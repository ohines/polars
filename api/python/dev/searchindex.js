Search.setIndex({"alltitles": {"ABS": [[1362, "abs"]], "ACOS": [[1365, "acos"]], "ACOSD": [[1365, "acosd"]], "ARRAY_AGG": [[1358, "array-agg"]], "ARRAY_CONTAINS": [[1358, "array-contains"]], "ARRAY_GET": [[1358, "array-get"]], "ARRAY_LENGTH": [[1358, "array-length"]], "ARRAY_LOWER": [[1358, "array-lower"]], "ARRAY_MEAN": [[1358, "array-mean"]], "ARRAY_REVERSE": [[1358, "array-reverse"]], "ARRAY_SUM": [[1358, "array-sum"]], "ARRAY_TO_STRING": [[1358, "array-to-string"]], "ARRAY_UNIQUE": [[1358, "array-unique"]], "ARRAY_UPPER": [[1358, "array-upper"]], "ASIN": [[1365, "asin"]], "ASIND": [[1365, "asind"]], "ATAN": [[1365, "atan"]], "ATAN2": [[1365, "atan2"]], "ATAN2D": [[1365, "atan2d"]], "ATAND": [[1365, "atand"]], "AVG": [[1357, "avg"]], "Aggregate": [[1357, null]], "Aggregation": [[193, null], [346, null], [844, null], [952, null]], "Aliases": [[1357, null], [1357, null], [1362, null], [1362, null], [1363, null], [1363, null]], "Array": [[822, null], [1332, null], [1358, null]], "Asserts": [[1371, "asserts"]], "Attributes": [[334, null], [940, null], [1333, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[843, "avro"]], "BIT_AND": [[1359, "bit-and"]], "BIT_COUNT": [[1359, "bit-count"]], "BIT_LENGTH": [[1363, "bit-length"]], "BIT_OR": [[1359, "bit-or"]], "BIT_XOR": [[1359, "bit-xor"]], "Binary": [[823, null], [836, "binary"], [1334, null]], "Bitwise": [[1359, null]], "Boolean": [[824, null], [1335, null]], "CAST": [[1366, "cast"]], "CBRT": [[1362, "cbrt"]], "CEIL": [[1362, "ceil"]], "COALESCE": [[1360, "coalesce"]], "CONCAT": [[1363, "concat"]], "CONCAT_WS": [[1363, "concat-ws"]], "COS": [[1365, "cos"]], "COSD": [[1365, "cosd"]], "COT": [[1365, "cot"]], "COTD": [[1365, "cotd"]], "COUNT": [[1357, "count"]], "CREATE TABLE": [[1370, "create-table"]], "CSV": [[843, "csv"]], "Catalog": [[190, null]], "Categories": [[825, null], [1336, null]], "Clipboard": [[843, "clipboard"]], "Cloud Credentials": [[843, "cloud-credentials"]], "Columns / names": [[827, null]], "Comparison": [[836, "comparison"], [1344, "comparison"]], "Computation": [[335, null], [828, null], [1337, null]], "Conditional": [[1360, null]], "Config": [[192, null]], "Config load, save, state": [[192, "config-load-save-state"]], "Config options": [[192, "config-options"]], "Conjunction": [[836, "conjunction"]], "Conversion": [[841, "conversion"]], "DATE": [[1363, "date"]], "DATE_PART": [[1364, "date-part"]], "DEGREES": [[1365, "degrees"]], "DELETE": [[1370, "delete"]], "DISTINCT": [[1356, "distinct"]], "DIV": [[1362, "div"]], "DROP TABLES": [[1370, "drop-tables"]], "Data types": [[344, null]], "DataFrame": [[339, null]], "DataType": [[344, "datatype"]], "Database": [[843, "database"]], "Delta Lake": [[843, "delta-lake"]], "Descriptive": [[336, null], [941, null], [1338, null]], "Documentation": [[1368, null], [1368, null], [1368, null]], "ENDS_WITH": [[1363, "ends-with"]], "EXCEPT": [[1369, "except"]], "EXP": [[1362, "exp"]], "EXPLAIN": [[1370, "explain"]], "EXTRACT": [[1364, "extract"]], "Errors": [[345, "errors"]], "Examples": [[1, "examples"], [951, "examples"], [1371, "examples"]], "Excel / ODS": [[843, "excel-ods"]], "Exceptions": [[345, null]], "Export": [[337, null], [1339, null]], "Expression SQL": [[1368, "expression-sql"]], "Expression plugins": [[949, "expression-plugins"]], "Expressions": [[830, null]], "Extending the API": [[1, null]], "FIRST": [[1357, "first"]], "FLOOR": [[1362, "floor"]], "FROM": [[1356, "from"]], "Feather / IPC": [[843, "feather-ipc"]], "Frame SQL": [[1368, "frame-sql"]], "Functions": [[829, null], [841, null], [951, "functions"]], "GPUEngine": [[942, null]], "GREATEST": [[1360, "greatest"]], "GROUP BY": [[1356, "group-by"]], "Global SQL": [[1368, "global-sql"]], "GroupBy": [[338, null], [943, null]], "HAVING": [[1356, "having"]], "IF": [[1360, "if"]], "IFNULL": [[1360, "ifnull"]], "INITCAP": [[1363, "initcap"]], "INTERSECT": [[1369, "intersect"]], "IO plugins": [[949, "io-plugins"]], "Iceberg": [[843, "iceberg"]], "Importing": [[951, "importing"]], "InProcessQuery": [[944, null]], "Index": [[0, null]], "Input/output": [[843, null]], "Introduction": [[1368, "introduction"]], "JOIN": [[1356, "join"]], "JSON": [[843, "json"]], "LAST": [[1357, "last"]], "LEAST": [[1360, "least"]], "LEFT": [[1363, "left"]], "LENGTH": [[1363, "length"]], "LIMIT": [[1356, "limit"]], "LN": [[1362, "ln"]], "LOG": [[1362, "log"]], "LOG10": [[1362, "log10"]], "LOG1P": [[1362, "log1p"]], "LOG2": [[1362, "log2"]], "LOWER": [[1363, "lower"]], "LTRIM": [[1363, "ltrim"]], "LazyFrame": [[945, null]], "List": [[831, null], [1341, null]], "MAX": [[1357, "max"]], "MEDIAN": [[1357, "median"]], "MIN": [[1357, "min"]], "MOD": [[1362, "mod"]], "Manipulation/selection": [[341, null], [834, null], [947, null], [1343, null]], "Math": [[1362, null]], "Meta": [[832, null]], "Metadata": [[948, null]], "Methods": [[1368, "methods"]], "Miscellaneous": [[340, null], [833, null], [841, "miscellaneous"], [946, null], [1342, null]], "Multiple Config instances": [[192, "multiple-config-instances"]], "NORMALIZE": [[1363, "normalize"]], "NULLIF": [[1360, "nullif"]], "Name": [[835, null]], "Nested": [[344, "nested"]], "Numeric": [[344, "numeric"], [836, "numeric"], [1344, "numeric"]], "OCTET_LENGTH": [[1363, "octet-length"]], "OFFSET": [[1356, "offset"]], "ORDER BY": [[1356, "order-by"]], "Operators": [[836, null], [1344, null]], "Other": [[344, "other"]], "PI": [[1362, "pi"]], "POW": [[1362, "pow"]], "Panic": [[345, "panic"]], "Parallelization": [[841, "parallelization"]], "Parametric testing": [[1371, "parametric-testing"]], "Parquet": [[843, "parquet"]], "Plot": [[342, null], [1345, null]], "Plugins": [[949, null]], "Polars strategies": [[1371, "polars-strategies"]], "Profiles": [[1371, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[843, "pyarrow-datasets"]], "Python API": [[1368, null]], "Python API reference": [[842, null]], "QUANTILE_CONT": [[1357, "quantile-cont"]], "QUANTILE_DISC": [[1357, "quantile-disc"]], "Querying": [[1368, "querying"]], "RADIANS": [[1365, "radians"]], "REGEXP_LIKE": [[1363, "regexp-like"]], "REPLACE": [[1363, "replace"]], "REVERSE": [[1363, "reverse"]], "RIGHT": [[1363, "right"]], "ROUND": [[1362, "round"]], "RTRIM": [[1363, "rtrim"]], "Random": [[841, "random"]], "SELECT": [[1356, "select"]], "SHOW TABLES": [[1370, "show-tables"]], "SIGN": [[1362, "sign"]], "SIN": [[1365, "sin"]], "SIND": [[1365, "sind"]], "SQL Clauses": [[1356, null]], "SQL Functions": [[1361, null]], "SQL Interface": [[1367, null]], "SQLContext": [[1368, "sqlcontext"]], "SQRT": [[1362, "sqrt"]], "STARTS_WITH": [[1363, "starts-with"]], "STDDEV": [[1357, "stddev"]], "STRFTIME": [[1364, "strftime"]], "STRPOS": [[1363, "strpos"]], "STRPTIME": [[1363, "strptime"]], "SUBSTR": [[1363, "substr"]], "SUM": [[1357, "sum"]], "Schema": [[950, null]], "Selectors": [[951, null]], "Serialization": [[340, "serialization"], [946, "serialization"]], "Series": [[1340, null]], "Set Operations": [[1369, null]], "Set operations": [[951, "set-operations"]], "Strategy helpers": [[1371, "strategy-helpers"]], "String": [[344, "string"], [837, null], [1346, null], [1363, null]], "StringCache": [[841, "stringcache"]], "Struct": [[838, null], [1347, null]], "Style": [[343, null]], "TAN": [[1365, "tan"]], "TAND": [[1365, "tand"]], "TIMESTAMP": [[1363, "timestamp"]], "TRUNCATE": [[1370, "truncate"]], "TRY_CAST": [[1366, "try-cast"]], "Table Operations": [[1370, null]], "Temporal": [[344, "temporal"], [839, null], [1348, null], [1364, null]], "Testing": [[1371, null]], "Trigonometry": [[1365, null]], "Types": [[1366, null]], "UNION": [[1369, "union"]], "UNION ALL": [[1369, "union-all"]], "UNION BY NAME": [[1369, "union-by-name"]], "UNNEST": [[1358, "unnest"], [1370, "unnest"]], "UPPER": [[1363, "upper"]], "Unity Catalog": [[191, null]], "Use as a context manager": [[192, "use-as-a-context-manager"]], "Use as a decorator": [[192, "use-as-a-decorator"]], "VARIANCE": [[1357, "variance"]], "WHERE": [[1356, "where"]], "Warnings": [[345, "warnings"]], "Window": [[840, null]], "polars.Catalog": [[177, null]], "polars.Catalog.get_table_info": [[178, null]], "polars.Catalog.list_catalogs": [[179, null]], "polars.Catalog.list_namespaces": [[180, null]], "polars.Catalog.list_tables": [[181, null]], "polars.Catalog.scan_table": [[182, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderAzure": [[33, null]], "polars.CredentialProviderGCP": [[34, null]], "polars.DataFrame.__array__": [[194, null]], "polars.DataFrame.__arrow_c_stream__": [[195, null]], "polars.DataFrame.__dataframe__": [[196, null]], "polars.DataFrame.__getitem__": [[197, null]], "polars.DataFrame.approx_n_unique": [[198, null]], "polars.DataFrame.bottom_k": [[199, null]], "polars.DataFrame.cast": [[200, null]], "polars.DataFrame.clear": [[201, null]], "polars.DataFrame.clone": [[202, null]], "polars.DataFrame.collect_schema": [[203, null]], "polars.DataFrame.columns": [[204, null]], "polars.DataFrame.corr": [[205, null]], "polars.DataFrame.count": [[206, null]], "polars.DataFrame.describe": [[207, null]], "polars.DataFrame.deserialize": [[208, null]], "polars.DataFrame.drop": [[209, null]], "polars.DataFrame.drop_in_place": [[210, null]], "polars.DataFrame.drop_nans": [[211, null]], "polars.DataFrame.drop_nulls": [[212, null]], "polars.DataFrame.dtypes": [[213, null]], "polars.DataFrame.equals": [[214, null]], "polars.DataFrame.estimated_size": [[215, null]], "polars.DataFrame.explode": [[216, null]], "polars.DataFrame.extend": [[217, null]], "polars.DataFrame.fill_nan": [[218, null]], "polars.DataFrame.fill_null": [[219, null]], "polars.DataFrame.filter": [[220, null]], "polars.DataFrame.flags": [[221, null]], "polars.DataFrame.fold": [[222, null]], "polars.DataFrame.gather_every": [[223, null]], "polars.DataFrame.get_column": [[224, null]], "polars.DataFrame.get_column_index": [[225, null]], "polars.DataFrame.get_columns": [[226, null]], "polars.DataFrame.glimpse": [[227, null]], "polars.DataFrame.group_by": [[228, null]], "polars.DataFrame.group_by_dynamic": [[229, null]], "polars.DataFrame.hash_rows": [[230, null]], "polars.DataFrame.head": [[231, null]], "polars.DataFrame.height": [[232, null]], "polars.DataFrame.hstack": [[233, null]], "polars.DataFrame.insert_column": [[234, null]], "polars.DataFrame.interpolate": [[235, null]], "polars.DataFrame.is_duplicated": [[236, null]], "polars.DataFrame.is_empty": [[237, null]], "polars.DataFrame.is_unique": [[238, null]], "polars.DataFrame.item": [[239, null]], "polars.DataFrame.iter_columns": [[240, null]], "polars.DataFrame.iter_rows": [[241, null]], "polars.DataFrame.iter_slices": [[242, null]], "polars.DataFrame.join": [[243, null]], "polars.DataFrame.join_asof": [[244, null]], "polars.DataFrame.join_where": [[245, null]], "polars.DataFrame.lazy": [[246, null]], "polars.DataFrame.limit": [[247, null]], "polars.DataFrame.map_rows": [[248, null]], "polars.DataFrame.max": [[249, null]], "polars.DataFrame.max_horizontal": [[250, null]], "polars.DataFrame.mean": [[251, null]], "polars.DataFrame.mean_horizontal": [[252, null]], "polars.DataFrame.median": [[253, null]], "polars.DataFrame.melt": [[254, null]], "polars.DataFrame.merge_sorted": [[255, null]], "polars.DataFrame.min": [[256, null]], "polars.DataFrame.min_horizontal": [[257, null]], "polars.DataFrame.n_chunks": [[258, null]], "polars.DataFrame.n_unique": [[259, null]], "polars.DataFrame.null_count": [[260, null]], "polars.DataFrame.partition_by": [[261, null]], "polars.DataFrame.pipe": [[262, null]], "polars.DataFrame.pivot": [[263, null]], "polars.DataFrame.product": [[264, null]], "polars.DataFrame.quantile": [[265, null]], "polars.DataFrame.rechunk": [[266, null]], "polars.DataFrame.remove": [[267, null]], "polars.DataFrame.rename": [[268, null]], "polars.DataFrame.replace_column": [[269, null]], "polars.DataFrame.reverse": [[270, null]], "polars.DataFrame.rolling": [[271, null]], "polars.DataFrame.row": [[272, null]], "polars.DataFrame.rows": [[273, null]], "polars.DataFrame.rows_by_key": [[274, null]], "polars.DataFrame.sample": [[275, null]], "polars.DataFrame.schema": [[276, null]], "polars.DataFrame.select": [[277, null]], "polars.DataFrame.select_seq": [[278, null]], "polars.DataFrame.serialize": [[279, null]], "polars.DataFrame.set_sorted": [[280, null]], "polars.DataFrame.shape": [[281, null]], "polars.DataFrame.shift": [[282, null]], "polars.DataFrame.shrink_to_fit": [[283, null]], "polars.DataFrame.slice": [[284, null]], "polars.DataFrame.sort": [[285, null]], "polars.DataFrame.sql": [[286, null]], "polars.DataFrame.std": [[287, null]], "polars.DataFrame.sum": [[288, null]], "polars.DataFrame.sum_horizontal": [[289, null]], "polars.DataFrame.tail": [[290, null]], "polars.DataFrame.to_arrow": [[291, null]], "polars.DataFrame.to_dict": [[292, null]], "polars.DataFrame.to_dicts": [[293, null]], "polars.DataFrame.to_dummies": [[294, null]], "polars.DataFrame.to_init_repr": [[295, null]], "polars.DataFrame.to_jax": [[296, null]], "polars.DataFrame.to_numpy": [[297, null]], "polars.DataFrame.to_pandas": [[298, null]], "polars.DataFrame.to_series": [[299, null]], "polars.DataFrame.to_struct": [[300, null]], "polars.DataFrame.to_torch": [[301, null]], "polars.DataFrame.top_k": [[302, null]], "polars.DataFrame.transpose": [[303, null]], "polars.DataFrame.unique": [[304, null]], "polars.DataFrame.unnest": [[305, null]], "polars.DataFrame.unpivot": [[306, null]], "polars.DataFrame.unstack": [[307, null]], "polars.DataFrame.update": [[308, null]], "polars.DataFrame.upsample": [[309, null]], "polars.DataFrame.var": [[310, null]], "polars.DataFrame.vstack": [[311, null]], "polars.DataFrame.width": [[312, null]], "polars.DataFrame.with_columns": [[313, null]], "polars.DataFrame.with_columns_seq": [[314, null]], "polars.DataFrame.with_row_count": [[315, null]], "polars.DataFrame.with_row_index": [[316, null]], "polars.DataFrame.write_avro": [[35, null]], "polars.DataFrame.write_clipboard": [[36, null]], "polars.DataFrame.write_csv": [[37, null]], "polars.DataFrame.write_database": [[38, null]], "polars.DataFrame.write_delta": [[39, null]], "polars.DataFrame.write_excel": [[40, null]], "polars.DataFrame.write_ipc": [[41, null]], "polars.DataFrame.write_ipc_stream": [[42, null]], "polars.DataFrame.write_json": [[43, null]], "polars.DataFrame.write_ndjson": [[44, null]], "polars.DataFrame.write_parquet": [[45, null]], "polars.Expr.abs": [[347, null]], "polars.Expr.add": [[348, null]], "polars.Expr.agg_groups": [[349, null]], "polars.Expr.alias": [[350, null]], "polars.Expr.all": [[351, null]], "polars.Expr.and_": [[352, null]], "polars.Expr.any": [[353, null]], "polars.Expr.append": [[354, null]], "polars.Expr.approx_n_unique": [[355, null]], "polars.Expr.arccos": [[356, null]], "polars.Expr.arccosh": [[357, null]], "polars.Expr.arcsin": [[358, null]], "polars.Expr.arcsinh": [[359, null]], "polars.Expr.arctan": [[360, null]], "polars.Expr.arctanh": [[361, null]], "polars.Expr.arg_max": [[362, null]], "polars.Expr.arg_min": [[363, null]], "polars.Expr.arg_sort": [[364, null]], "polars.Expr.arg_true": [[365, null]], "polars.Expr.arg_unique": [[366, null]], "polars.Expr.arr.all": [[367, null]], "polars.Expr.arr.any": [[368, null]], "polars.Expr.arr.arg_max": [[369, null]], "polars.Expr.arr.arg_min": [[370, null]], "polars.Expr.arr.contains": [[371, null]], "polars.Expr.arr.count_matches": [[372, null]], "polars.Expr.arr.explode": [[373, null]], "polars.Expr.arr.first": [[374, null]], "polars.Expr.arr.get": [[375, null]], "polars.Expr.arr.join": [[376, null]], "polars.Expr.arr.last": [[377, null]], "polars.Expr.arr.max": [[378, null]], "polars.Expr.arr.median": [[379, null]], "polars.Expr.arr.min": [[380, null]], "polars.Expr.arr.n_unique": [[381, null]], "polars.Expr.arr.reverse": [[382, null]], "polars.Expr.arr.shift": [[383, null]], "polars.Expr.arr.sort": [[384, null]], "polars.Expr.arr.std": [[385, null]], "polars.Expr.arr.sum": [[386, null]], "polars.Expr.arr.to_list": [[387, null]], "polars.Expr.arr.to_struct": [[388, null]], "polars.Expr.arr.unique": [[389, null]], "polars.Expr.arr.var": [[390, null]], "polars.Expr.backward_fill": [[391, null]], "polars.Expr.bin.contains": [[392, null]], "polars.Expr.bin.decode": [[393, null]], "polars.Expr.bin.encode": [[394, null]], "polars.Expr.bin.ends_with": [[395, null]], "polars.Expr.bin.reinterpret": [[396, null]], "polars.Expr.bin.size": [[397, null]], "polars.Expr.bin.starts_with": [[398, null]], "polars.Expr.bitwise_and": [[399, null]], "polars.Expr.bitwise_count_ones": [[400, null]], "polars.Expr.bitwise_count_zeros": [[401, null]], "polars.Expr.bitwise_leading_ones": [[402, null]], "polars.Expr.bitwise_leading_zeros": [[403, null]], "polars.Expr.bitwise_or": [[404, null]], "polars.Expr.bitwise_trailing_ones": [[405, null]], "polars.Expr.bitwise_trailing_zeros": [[406, null]], "polars.Expr.bitwise_xor": [[407, null]], "polars.Expr.bottom_k": [[408, null]], "polars.Expr.bottom_k_by": [[409, null]], "polars.Expr.cast": [[410, null]], "polars.Expr.cat.ends_with": [[411, null]], "polars.Expr.cat.get_categories": [[412, null]], "polars.Expr.cat.len_bytes": [[413, null]], "polars.Expr.cat.len_chars": [[414, null]], "polars.Expr.cat.starts_with": [[415, null]], "polars.Expr.cbrt": [[416, null]], "polars.Expr.ceil": [[417, null]], "polars.Expr.clip": [[418, null]], "polars.Expr.cos": [[419, null]], "polars.Expr.cosh": [[420, null]], "polars.Expr.cot": [[421, null]], "polars.Expr.count": [[422, null]], "polars.Expr.cum_count": [[423, null]], "polars.Expr.cum_max": [[424, null]], "polars.Expr.cum_min": [[425, null]], "polars.Expr.cum_prod": [[426, null]], "polars.Expr.cum_sum": [[427, null]], "polars.Expr.cumulative_eval": [[428, null]], "polars.Expr.cut": [[429, null]], "polars.Expr.degrees": [[430, null]], "polars.Expr.deserialize": [[431, null]], "polars.Expr.diff": [[432, null]], "polars.Expr.dot": [[433, null]], "polars.Expr.drop_nans": [[434, null]], "polars.Expr.drop_nulls": [[435, null]], "polars.Expr.dt.add_business_days": [[436, null]], "polars.Expr.dt.base_utc_offset": [[437, null]], "polars.Expr.dt.cast_time_unit": [[438, null]], "polars.Expr.dt.century": [[439, null]], "polars.Expr.dt.combine": [[440, null]], "polars.Expr.dt.convert_time_zone": [[441, null]], "polars.Expr.dt.date": [[442, null]], "polars.Expr.dt.datetime": [[443, null]], "polars.Expr.dt.day": [[444, null]], "polars.Expr.dt.dst_offset": [[445, null]], "polars.Expr.dt.epoch": [[446, null]], "polars.Expr.dt.hour": [[447, null]], "polars.Expr.dt.is_leap_year": [[448, null]], "polars.Expr.dt.iso_year": [[449, null]], "polars.Expr.dt.microsecond": [[450, null]], "polars.Expr.dt.millennium": [[451, null]], "polars.Expr.dt.millisecond": [[452, null]], "polars.Expr.dt.minute": [[453, null]], "polars.Expr.dt.month": [[454, null]], "polars.Expr.dt.month_end": [[455, null]], "polars.Expr.dt.month_start": [[456, null]], "polars.Expr.dt.nanosecond": [[457, null]], "polars.Expr.dt.offset_by": [[458, null]], "polars.Expr.dt.ordinal_day": [[459, null]], "polars.Expr.dt.quarter": [[460, null]], "polars.Expr.dt.replace": [[461, null]], "polars.Expr.dt.replace_time_zone": [[462, null]], "polars.Expr.dt.round": [[463, null]], "polars.Expr.dt.second": [[464, null]], "polars.Expr.dt.strftime": [[465, null]], "polars.Expr.dt.time": [[466, null]], "polars.Expr.dt.timestamp": [[467, null]], "polars.Expr.dt.to_string": [[468, null]], "polars.Expr.dt.total_days": [[469, null]], "polars.Expr.dt.total_hours": [[470, null]], "polars.Expr.dt.total_microseconds": [[471, null]], "polars.Expr.dt.total_milliseconds": [[472, null]], "polars.Expr.dt.total_minutes": [[473, null]], "polars.Expr.dt.total_nanoseconds": [[474, null]], "polars.Expr.dt.total_seconds": [[475, null]], "polars.Expr.dt.truncate": [[476, null]], "polars.Expr.dt.week": [[477, null]], "polars.Expr.dt.weekday": [[478, null]], "polars.Expr.dt.with_time_unit": [[479, null]], "polars.Expr.dt.year": [[480, null]], "polars.Expr.entropy": [[481, null]], "polars.Expr.eq": [[482, null]], "polars.Expr.eq_missing": [[483, null]], "polars.Expr.ewm_mean": [[484, null]], "polars.Expr.ewm_mean_by": [[485, null]], "polars.Expr.ewm_std": [[486, null]], "polars.Expr.ewm_var": [[487, null]], "polars.Expr.exclude": [[488, null]], "polars.Expr.exp": [[489, null]], "polars.Expr.explode": [[490, null]], "polars.Expr.extend_constant": [[491, null]], "polars.Expr.fill_nan": [[492, null]], "polars.Expr.fill_null": [[493, null]], "polars.Expr.filter": [[494, null]], "polars.Expr.first": [[495, null]], "polars.Expr.flatten": [[496, null]], "polars.Expr.floor": [[497, null]], "polars.Expr.floordiv": [[498, null]], "polars.Expr.forward_fill": [[499, null]], "polars.Expr.from_json": [[500, null]], "polars.Expr.gather": [[501, null]], "polars.Expr.gather_every": [[502, null]], "polars.Expr.ge": [[503, null]], "polars.Expr.get": [[504, null]], "polars.Expr.gt": [[505, null]], "polars.Expr.has_nulls": [[506, null]], "polars.Expr.hash": [[507, null]], "polars.Expr.head": [[508, null]], "polars.Expr.hist": [[509, null]], "polars.Expr.implode": [[510, null]], "polars.Expr.index_of": [[511, null]], "polars.Expr.inspect": [[512, null]], "polars.Expr.interpolate": [[513, null]], "polars.Expr.interpolate_by": [[514, null]], "polars.Expr.is_between": [[515, null]], "polars.Expr.is_duplicated": [[516, null]], "polars.Expr.is_finite": [[517, null]], "polars.Expr.is_first_distinct": [[518, null]], "polars.Expr.is_in": [[519, null]], "polars.Expr.is_infinite": [[520, null]], "polars.Expr.is_last_distinct": [[521, null]], "polars.Expr.is_nan": [[522, null]], "polars.Expr.is_not_nan": [[523, null]], "polars.Expr.is_not_null": [[524, null]], "polars.Expr.is_null": [[525, null]], "polars.Expr.is_unique": [[526, null]], "polars.Expr.kurtosis": [[527, null]], "polars.Expr.last": [[528, null]], "polars.Expr.le": [[529, null]], "polars.Expr.len": [[530, null]], "polars.Expr.limit": [[531, null]], "polars.Expr.list.all": [[532, null]], "polars.Expr.list.any": [[533, null]], "polars.Expr.list.arg_max": [[534, null]], "polars.Expr.list.arg_min": [[535, null]], "polars.Expr.list.concat": [[536, null]], "polars.Expr.list.contains": [[537, null]], "polars.Expr.list.count_matches": [[538, null]], "polars.Expr.list.diff": [[539, null]], "polars.Expr.list.drop_nulls": [[540, null]], "polars.Expr.list.eval": [[541, null]], "polars.Expr.list.explode": [[542, null]], "polars.Expr.list.first": [[543, null]], "polars.Expr.list.gather": [[544, null]], "polars.Expr.list.gather_every": [[545, null]], "polars.Expr.list.get": [[546, null]], "polars.Expr.list.head": [[547, null]], "polars.Expr.list.join": [[548, null]], "polars.Expr.list.last": [[549, null]], "polars.Expr.list.len": [[550, null]], "polars.Expr.list.max": [[551, null]], "polars.Expr.list.mean": [[552, null]], "polars.Expr.list.median": [[553, null]], "polars.Expr.list.min": [[554, null]], "polars.Expr.list.n_unique": [[555, null]], "polars.Expr.list.reverse": [[556, null]], "polars.Expr.list.sample": [[557, null]], "polars.Expr.list.set_difference": [[558, null]], "polars.Expr.list.set_intersection": [[559, null]], "polars.Expr.list.set_symmetric_difference": [[560, null]], "polars.Expr.list.set_union": [[561, null]], "polars.Expr.list.shift": [[562, null]], "polars.Expr.list.slice": [[563, null]], "polars.Expr.list.sort": [[564, null]], "polars.Expr.list.std": [[565, null]], "polars.Expr.list.sum": [[566, null]], "polars.Expr.list.tail": [[567, null]], "polars.Expr.list.to_array": [[568, null]], "polars.Expr.list.to_struct": [[569, null]], "polars.Expr.list.unique": [[570, null]], "polars.Expr.list.var": [[571, null]], "polars.Expr.log": [[572, null]], "polars.Expr.log10": [[573, null]], "polars.Expr.log1p": [[574, null]], "polars.Expr.lower_bound": [[575, null]], "polars.Expr.lt": [[576, null]], "polars.Expr.map_batches": [[577, null]], "polars.Expr.map_elements": [[578, null]], "polars.Expr.max": [[579, null]], "polars.Expr.mean": [[580, null]], "polars.Expr.median": [[581, null]], "polars.Expr.meta.eq": [[582, null]], "polars.Expr.meta.has_multiple_outputs": [[583, null]], "polars.Expr.meta.is_column": [[584, null]], "polars.Expr.meta.is_column_selection": [[585, null]], "polars.Expr.meta.is_literal": [[586, null]], "polars.Expr.meta.is_regex_projection": [[587, null]], "polars.Expr.meta.ne": [[588, null]], "polars.Expr.meta.output_name": [[589, null]], "polars.Expr.meta.pop": [[590, null]], "polars.Expr.meta.root_names": [[591, null]], "polars.Expr.meta.serialize": [[592, null]], "polars.Expr.meta.show_graph": [[593, null]], "polars.Expr.meta.tree_format": [[594, null]], "polars.Expr.meta.undo_aliases": [[595, null]], "polars.Expr.meta.write_json": [[596, null]], "polars.Expr.min": [[597, null]], "polars.Expr.mod": [[598, null]], "polars.Expr.mode": [[599, null]], "polars.Expr.mul": [[600, null]], "polars.Expr.n_unique": [[601, null]], "polars.Expr.name.keep": [[602, null]], "polars.Expr.name.map": [[603, null]], "polars.Expr.name.map_fields": [[604, null]], "polars.Expr.name.prefix": [[605, null]], "polars.Expr.name.prefix_fields": [[606, null]], "polars.Expr.name.suffix": [[607, null]], "polars.Expr.name.suffix_fields": [[608, null]], "polars.Expr.name.to_lowercase": [[609, null]], "polars.Expr.name.to_uppercase": [[610, null]], "polars.Expr.nan_max": [[611, null]], "polars.Expr.nan_min": [[612, null]], "polars.Expr.ne": [[613, null]], "polars.Expr.ne_missing": [[614, null]], "polars.Expr.neg": [[615, null]], "polars.Expr.not_": [[616, null]], "polars.Expr.null_count": [[617, null]], "polars.Expr.or_": [[618, null]], "polars.Expr.over": [[619, null]], "polars.Expr.pct_change": [[620, null]], "polars.Expr.peak_max": [[621, null]], "polars.Expr.peak_min": [[622, null]], "polars.Expr.pipe": [[623, null]], "polars.Expr.pow": [[624, null]], "polars.Expr.product": [[625, null]], "polars.Expr.qcut": [[626, null]], "polars.Expr.quantile": [[627, null]], "polars.Expr.radians": [[628, null]], "polars.Expr.rank": [[629, null]], "polars.Expr.rechunk": [[630, null]], "polars.Expr.reinterpret": [[631, null]], "polars.Expr.repeat_by": [[632, null]], "polars.Expr.replace": [[633, null]], "polars.Expr.replace_strict": [[634, null]], "polars.Expr.reshape": [[635, null]], "polars.Expr.reverse": [[636, null]], "polars.Expr.rle": [[637, null]], "polars.Expr.rle_id": [[638, null]], "polars.Expr.rolling": [[639, null]], "polars.Expr.rolling_map": [[640, null]], "polars.Expr.rolling_max": [[641, null]], "polars.Expr.rolling_max_by": [[642, null]], "polars.Expr.rolling_mean": [[643, null]], "polars.Expr.rolling_mean_by": [[644, null]], "polars.Expr.rolling_median": [[645, null]], "polars.Expr.rolling_median_by": [[646, null]], "polars.Expr.rolling_min": [[647, null]], "polars.Expr.rolling_min_by": [[648, null]], "polars.Expr.rolling_quantile": [[649, null]], "polars.Expr.rolling_quantile_by": [[650, null]], "polars.Expr.rolling_skew": [[651, null]], "polars.Expr.rolling_std": [[652, null]], "polars.Expr.rolling_std_by": [[653, null]], "polars.Expr.rolling_sum": [[654, null]], "polars.Expr.rolling_sum_by": [[655, null]], "polars.Expr.rolling_var": [[656, null]], "polars.Expr.rolling_var_by": [[657, null]], "polars.Expr.round": [[658, null]], "polars.Expr.round_sig_figs": [[659, null]], "polars.Expr.sample": [[660, null]], "polars.Expr.search_sorted": [[661, null]], "polars.Expr.set_sorted": [[662, null]], "polars.Expr.shift": [[663, null]], "polars.Expr.shrink_dtype": [[664, null]], "polars.Expr.shuffle": [[665, null]], "polars.Expr.sign": [[666, null]], "polars.Expr.sin": [[667, null]], "polars.Expr.sinh": [[668, null]], "polars.Expr.skew": [[669, null]], "polars.Expr.slice": [[670, null]], "polars.Expr.sort": [[671, null]], "polars.Expr.sort_by": [[672, null]], "polars.Expr.sqrt": [[673, null]], "polars.Expr.std": [[674, null]], "polars.Expr.str.concat": [[675, null]], "polars.Expr.str.contains": [[676, null]], "polars.Expr.str.contains_any": [[677, null]], "polars.Expr.str.count_matches": [[678, null]], "polars.Expr.str.decode": [[679, null]], "polars.Expr.str.encode": [[680, null]], "polars.Expr.str.ends_with": [[681, null]], "polars.Expr.str.escape_regex": [[682, null]], "polars.Expr.str.explode": [[683, null]], "polars.Expr.str.extract": [[684, null]], "polars.Expr.str.extract_all": [[685, null]], "polars.Expr.str.extract_groups": [[686, null]], "polars.Expr.str.extract_many": [[687, null]], "polars.Expr.str.find": [[688, null]], "polars.Expr.str.find_many": [[689, null]], "polars.Expr.str.head": [[690, null]], "polars.Expr.str.join": [[691, null]], "polars.Expr.str.json_decode": [[692, null]], "polars.Expr.str.json_path_match": [[693, null]], "polars.Expr.str.len_bytes": [[694, null]], "polars.Expr.str.len_chars": [[695, null]], "polars.Expr.str.normalize": [[696, null]], "polars.Expr.str.pad_end": [[697, null]], "polars.Expr.str.pad_start": [[698, null]], "polars.Expr.str.replace": [[699, null]], "polars.Expr.str.replace_all": [[700, null]], "polars.Expr.str.replace_many": [[701, null]], "polars.Expr.str.reverse": [[702, null]], "polars.Expr.str.slice": [[703, null]], "polars.Expr.str.split": [[704, null]], "polars.Expr.str.split_exact": [[705, null]], "polars.Expr.str.splitn": [[706, null]], "polars.Expr.str.starts_with": [[707, null]], "polars.Expr.str.strip_chars": [[708, null]], "polars.Expr.str.strip_chars_end": [[709, null]], "polars.Expr.str.strip_chars_start": [[710, null]], "polars.Expr.str.strip_prefix": [[711, null]], "polars.Expr.str.strip_suffix": [[712, null]], "polars.Expr.str.strptime": [[713, null]], "polars.Expr.str.tail": [[714, null]], "polars.Expr.str.to_date": [[715, null]], "polars.Expr.str.to_datetime": [[716, null]], "polars.Expr.str.to_decimal": [[717, null]], "polars.Expr.str.to_integer": [[718, null]], "polars.Expr.str.to_lowercase": [[719, null]], "polars.Expr.str.to_time": [[720, null]], "polars.Expr.str.to_titlecase": [[721, null]], "polars.Expr.str.to_uppercase": [[722, null]], "polars.Expr.str.zfill": [[723, null]], "polars.Expr.struct.field": [[724, null]], "polars.Expr.struct.json_encode": [[725, null]], "polars.Expr.struct.rename_fields": [[726, null]], "polars.Expr.struct.unnest": [[727, null]], "polars.Expr.struct.with_fields": [[728, null]], "polars.Expr.sub": [[729, null]], "polars.Expr.sum": [[730, null]], "polars.Expr.tail": [[731, null]], "polars.Expr.tan": [[732, null]], "polars.Expr.tanh": [[733, null]], "polars.Expr.to_physical": [[734, null]], "polars.Expr.top_k": [[735, null]], "polars.Expr.top_k_by": [[736, null]], "polars.Expr.truediv": [[737, null]], "polars.Expr.unique": [[738, null]], "polars.Expr.unique_counts": [[739, null]], "polars.Expr.upper_bound": [[740, null]], "polars.Expr.value_counts": [[741, null]], "polars.Expr.var": [[742, null]], "polars.Expr.where": [[743, null]], "polars.Expr.xor": [[744, null]], "polars.LazyFrame.approx_n_unique": [[845, null]], "polars.LazyFrame.bottom_k": [[846, null]], "polars.LazyFrame.cache": [[847, null]], "polars.LazyFrame.cast": [[848, null]], "polars.LazyFrame.clear": [[849, null]], "polars.LazyFrame.clone": [[850, null]], "polars.LazyFrame.collect": [[851, null]], "polars.LazyFrame.collect_async": [[852, null]], "polars.LazyFrame.collect_schema": [[853, null]], "polars.LazyFrame.columns": [[854, null]], "polars.LazyFrame.count": [[855, null]], "polars.LazyFrame.describe": [[856, null]], "polars.LazyFrame.deserialize": [[857, null]], "polars.LazyFrame.drop": [[858, null]], "polars.LazyFrame.drop_nans": [[859, null]], "polars.LazyFrame.drop_nulls": [[860, null]], "polars.LazyFrame.dtypes": [[861, null]], "polars.LazyFrame.explain": [[862, null]], "polars.LazyFrame.explode": [[863, null]], "polars.LazyFrame.fill_nan": [[864, null]], "polars.LazyFrame.fill_null": [[865, null]], "polars.LazyFrame.filter": [[866, null]], "polars.LazyFrame.first": [[867, null]], "polars.LazyFrame.gather_every": [[868, null]], "polars.LazyFrame.group_by": [[869, null]], "polars.LazyFrame.group_by_dynamic": [[870, null]], "polars.LazyFrame.head": [[871, null]], "polars.LazyFrame.inspect": [[872, null]], "polars.LazyFrame.interpolate": [[873, null]], "polars.LazyFrame.join": [[874, null]], "polars.LazyFrame.join_asof": [[875, null]], "polars.LazyFrame.join_where": [[876, null]], "polars.LazyFrame.last": [[877, null]], "polars.LazyFrame.lazy": [[878, null]], "polars.LazyFrame.limit": [[879, null]], "polars.LazyFrame.map_batches": [[880, null]], "polars.LazyFrame.max": [[881, null]], "polars.LazyFrame.mean": [[882, null]], "polars.LazyFrame.median": [[883, null]], "polars.LazyFrame.melt": [[884, null]], "polars.LazyFrame.merge_sorted": [[885, null]], "polars.LazyFrame.min": [[886, null]], "polars.LazyFrame.null_count": [[887, null]], "polars.LazyFrame.pipe": [[888, null]], "polars.LazyFrame.profile": [[889, null]], "polars.LazyFrame.quantile": [[890, null]], "polars.LazyFrame.remove": [[891, null]], "polars.LazyFrame.rename": [[892, null]], "polars.LazyFrame.reverse": [[893, null]], "polars.LazyFrame.rolling": [[894, null]], "polars.LazyFrame.schema": [[895, null]], "polars.LazyFrame.select": [[896, null]], "polars.LazyFrame.select_seq": [[897, null]], "polars.LazyFrame.serialize": [[898, null]], "polars.LazyFrame.set_sorted": [[899, null]], "polars.LazyFrame.shift": [[900, null]], "polars.LazyFrame.show_graph": [[901, null]], "polars.LazyFrame.sink_csv": [[46, null]], "polars.LazyFrame.sink_ipc": [[47, null]], "polars.LazyFrame.sink_ndjson": [[48, null]], "polars.LazyFrame.sink_parquet": [[49, null]], "polars.LazyFrame.slice": [[902, null]], "polars.LazyFrame.sort": [[903, null]], "polars.LazyFrame.sql": [[904, null]], "polars.LazyFrame.std": [[905, null]], "polars.LazyFrame.sum": [[906, null]], "polars.LazyFrame.tail": [[907, null]], "polars.LazyFrame.top_k": [[908, null]], "polars.LazyFrame.unique": [[909, null]], "polars.LazyFrame.unnest": [[910, null]], "polars.LazyFrame.unpivot": [[911, null]], "polars.LazyFrame.update": [[912, null]], "polars.LazyFrame.var": [[913, null]], "polars.LazyFrame.width": [[914, null]], "polars.LazyFrame.with_columns": [[915, null]], "polars.LazyFrame.with_columns_seq": [[916, null]], "polars.LazyFrame.with_context": [[917, null]], "polars.LazyFrame.with_row_count": [[918, null]], "polars.LazyFrame.with_row_index": [[919, null]], "polars.SQLContext.execute": [[1349, null]], "polars.SQLContext.execute_global": [[1350, null]], "polars.SQLContext.register": [[1351, null]], "polars.SQLContext.register_globals": [[1352, null]], "polars.SQLContext.register_many": [[1353, null]], "polars.SQLContext.tables": [[1354, null]], "polars.SQLContext.unregister": [[1355, null]], "polars.Series.__array__": [[953, null]], "polars.Series.__arrow_c_stream__": [[954, null]], "polars.Series.__getitem__": [[955, null]], "polars.Series.abs": [[956, null]], "polars.Series.alias": [[957, null]], "polars.Series.all": [[958, null]], "polars.Series.any": [[959, null]], "polars.Series.append": [[960, null]], "polars.Series.approx_n_unique": [[961, null]], "polars.Series.arccos": [[962, null]], "polars.Series.arccosh": [[963, null]], "polars.Series.arcsin": [[964, null]], "polars.Series.arcsinh": [[965, null]], "polars.Series.arctan": [[966, null]], "polars.Series.arctanh": [[967, null]], "polars.Series.arg_max": [[968, null]], "polars.Series.arg_min": [[969, null]], "polars.Series.arg_sort": [[970, null]], "polars.Series.arg_true": [[971, null]], "polars.Series.arg_unique": [[972, null]], "polars.Series.arr.all": [[973, null]], "polars.Series.arr.any": [[974, null]], "polars.Series.arr.arg_max": [[975, null]], "polars.Series.arr.arg_min": [[976, null]], "polars.Series.arr.contains": [[977, null]], "polars.Series.arr.count_matches": [[978, null]], "polars.Series.arr.explode": [[979, null]], "polars.Series.arr.first": [[980, null]], "polars.Series.arr.get": [[981, null]], "polars.Series.arr.join": [[982, null]], "polars.Series.arr.last": [[983, null]], "polars.Series.arr.max": [[984, null]], "polars.Series.arr.median": [[985, null]], "polars.Series.arr.min": [[986, null]], "polars.Series.arr.n_unique": [[987, null]], "polars.Series.arr.reverse": [[988, null]], "polars.Series.arr.shift": [[989, null]], "polars.Series.arr.sort": [[990, null]], "polars.Series.arr.std": [[991, null]], "polars.Series.arr.sum": [[992, null]], "polars.Series.arr.to_list": [[993, null]], "polars.Series.arr.to_struct": [[994, null]], "polars.Series.arr.unique": [[995, null]], "polars.Series.arr.var": [[996, null]], "polars.Series.bin.contains": [[997, null]], "polars.Series.bin.decode": [[998, null]], "polars.Series.bin.encode": [[999, null]], "polars.Series.bin.ends_with": [[1000, null]], "polars.Series.bin.reinterpret": [[1001, null]], "polars.Series.bin.size": [[1002, null]], "polars.Series.bin.starts_with": [[1003, null]], "polars.Series.bitwise_and": [[1004, null]], "polars.Series.bitwise_count_ones": [[1005, null]], "polars.Series.bitwise_count_zeros": [[1006, null]], "polars.Series.bitwise_leading_ones": [[1007, null]], "polars.Series.bitwise_leading_zeros": [[1008, null]], "polars.Series.bitwise_or": [[1009, null]], "polars.Series.bitwise_trailing_ones": [[1010, null]], "polars.Series.bitwise_trailing_zeros": [[1011, null]], "polars.Series.bitwise_xor": [[1012, null]], "polars.Series.bottom_k": [[1013, null]], "polars.Series.cast": [[1014, null]], "polars.Series.cat.ends_with": [[1015, null]], "polars.Series.cat.get_categories": [[1016, null]], "polars.Series.cat.is_local": [[1017, null]], "polars.Series.cat.len_bytes": [[1018, null]], "polars.Series.cat.len_chars": [[1019, null]], "polars.Series.cat.starts_with": [[1020, null]], "polars.Series.cat.to_local": [[1021, null]], "polars.Series.cat.uses_lexical_ordering": [[1022, null]], "polars.Series.cbrt": [[1023, null]], "polars.Series.ceil": [[1024, null]], "polars.Series.chunk_lengths": [[1025, null]], "polars.Series.clear": [[1026, null]], "polars.Series.clip": [[1027, null]], "polars.Series.clone": [[1028, null]], "polars.Series.cos": [[1029, null]], "polars.Series.cosh": [[1030, null]], "polars.Series.cot": [[1031, null]], "polars.Series.count": [[1032, null]], "polars.Series.cum_count": [[1033, null]], "polars.Series.cum_max": [[1034, null]], "polars.Series.cum_min": [[1035, null]], "polars.Series.cum_prod": [[1036, null]], "polars.Series.cum_sum": [[1037, null]], "polars.Series.cumulative_eval": [[1038, null]], "polars.Series.cut": [[1039, null]], "polars.Series.describe": [[1040, null]], "polars.Series.diff": [[1041, null]], "polars.Series.dot": [[1042, null]], "polars.Series.drop_nans": [[1043, null]], "polars.Series.drop_nulls": [[1044, null]], "polars.Series.dt.add_business_days": [[1045, null]], "polars.Series.dt.base_utc_offset": [[1046, null]], "polars.Series.dt.cast_time_unit": [[1047, null]], "polars.Series.dt.century": [[1048, null]], "polars.Series.dt.combine": [[1049, null]], "polars.Series.dt.convert_time_zone": [[1050, null]], "polars.Series.dt.date": [[1051, null]], "polars.Series.dt.datetime": [[1052, null]], "polars.Series.dt.day": [[1053, null]], "polars.Series.dt.dst_offset": [[1054, null]], "polars.Series.dt.epoch": [[1055, null]], "polars.Series.dt.hour": [[1056, null]], "polars.Series.dt.is_leap_year": [[1057, null]], "polars.Series.dt.iso_year": [[1058, null]], "polars.Series.dt.max": [[1059, null]], "polars.Series.dt.mean": [[1060, null]], "polars.Series.dt.median": [[1061, null]], "polars.Series.dt.microsecond": [[1062, null]], "polars.Series.dt.millennium": [[1063, null]], "polars.Series.dt.millisecond": [[1064, null]], "polars.Series.dt.min": [[1065, null]], "polars.Series.dt.minute": [[1066, null]], "polars.Series.dt.month": [[1067, null]], "polars.Series.dt.month_end": [[1068, null]], "polars.Series.dt.month_start": [[1069, null]], "polars.Series.dt.nanosecond": [[1070, null]], "polars.Series.dt.offset_by": [[1071, null]], "polars.Series.dt.ordinal_day": [[1072, null]], "polars.Series.dt.quarter": [[1073, null]], "polars.Series.dt.replace": [[1074, null]], "polars.Series.dt.replace_time_zone": [[1075, null]], "polars.Series.dt.round": [[1076, null]], "polars.Series.dt.second": [[1077, null]], "polars.Series.dt.strftime": [[1078, null]], "polars.Series.dt.time": [[1079, null]], "polars.Series.dt.timestamp": [[1080, null]], "polars.Series.dt.to_string": [[1081, null]], "polars.Series.dt.total_days": [[1082, null]], "polars.Series.dt.total_hours": [[1083, null]], "polars.Series.dt.total_microseconds": [[1084, null]], "polars.Series.dt.total_milliseconds": [[1085, null]], "polars.Series.dt.total_minutes": [[1086, null]], "polars.Series.dt.total_nanoseconds": [[1087, null]], "polars.Series.dt.total_seconds": [[1088, null]], "polars.Series.dt.truncate": [[1089, null]], "polars.Series.dt.week": [[1090, null]], "polars.Series.dt.weekday": [[1091, null]], "polars.Series.dt.with_time_unit": [[1092, null]], "polars.Series.dt.year": [[1093, null]], "polars.Series.dtype": [[1094, null]], "polars.Series.entropy": [[1095, null]], "polars.Series.eq": [[1096, null]], "polars.Series.eq_missing": [[1097, null]], "polars.Series.equals": [[1098, null]], "polars.Series.estimated_size": [[1099, null]], "polars.Series.ewm_mean": [[1100, null]], "polars.Series.ewm_mean_by": [[1101, null]], "polars.Series.ewm_std": [[1102, null]], "polars.Series.ewm_var": [[1103, null]], "polars.Series.exp": [[1104, null]], "polars.Series.explode": [[1105, null]], "polars.Series.extend": [[1106, null]], "polars.Series.extend_constant": [[1107, null]], "polars.Series.fill_nan": [[1108, null]], "polars.Series.fill_null": [[1109, null]], "polars.Series.filter": [[1110, null]], "polars.Series.first": [[1111, null]], "polars.Series.flags": [[1112, null]], "polars.Series.floor": [[1113, null]], "polars.Series.gather": [[1114, null]], "polars.Series.gather_every": [[1115, null]], "polars.Series.ge": [[1116, null]], "polars.Series.get_chunks": [[1117, null]], "polars.Series.gt": [[1118, null]], "polars.Series.has_nulls": [[1119, null]], "polars.Series.has_validity": [[1120, null]], "polars.Series.hash": [[1121, null]], "polars.Series.head": [[1122, null]], "polars.Series.hist": [[1123, null]], "polars.Series.implode": [[1124, null]], "polars.Series.index_of": [[1125, null]], "polars.Series.interpolate": [[1126, null]], "polars.Series.interpolate_by": [[1127, null]], "polars.Series.is_between": [[1128, null]], "polars.Series.is_duplicated": [[1129, null]], "polars.Series.is_empty": [[1130, null]], "polars.Series.is_finite": [[1131, null]], "polars.Series.is_first_distinct": [[1132, null]], "polars.Series.is_in": [[1133, null]], "polars.Series.is_infinite": [[1134, null]], "polars.Series.is_last_distinct": [[1135, null]], "polars.Series.is_nan": [[1136, null]], "polars.Series.is_not_nan": [[1137, null]], "polars.Series.is_not_null": [[1138, null]], "polars.Series.is_null": [[1139, null]], "polars.Series.is_sorted": [[1140, null]], "polars.Series.is_unique": [[1141, null]], "polars.Series.item": [[1142, null]], "polars.Series.kurtosis": [[1143, null]], "polars.Series.last": [[1144, null]], "polars.Series.le": [[1145, null]], "polars.Series.len": [[1146, null]], "polars.Series.limit": [[1147, null]], "polars.Series.list.all": [[1148, null]], "polars.Series.list.any": [[1149, null]], "polars.Series.list.arg_max": [[1150, null]], "polars.Series.list.arg_min": [[1151, null]], "polars.Series.list.concat": [[1152, null]], "polars.Series.list.contains": [[1153, null]], "polars.Series.list.count_matches": [[1154, null]], "polars.Series.list.diff": [[1155, null]], "polars.Series.list.drop_nulls": [[1156, null]], "polars.Series.list.eval": [[1157, null]], "polars.Series.list.explode": [[1158, null]], "polars.Series.list.first": [[1159, null]], "polars.Series.list.gather": [[1160, null]], "polars.Series.list.gather_every": [[1161, null]], "polars.Series.list.get": [[1162, null]], "polars.Series.list.head": [[1163, null]], "polars.Series.list.join": [[1164, null]], "polars.Series.list.last": [[1165, null]], "polars.Series.list.len": [[1166, null]], "polars.Series.list.max": [[1167, null]], "polars.Series.list.mean": [[1168, null]], "polars.Series.list.median": [[1169, null]], "polars.Series.list.min": [[1170, null]], "polars.Series.list.n_unique": [[1171, null]], "polars.Series.list.reverse": [[1172, null]], "polars.Series.list.sample": [[1173, null]], "polars.Series.list.set_difference": [[1174, null]], "polars.Series.list.set_intersection": [[1175, null]], "polars.Series.list.set_symmetric_difference": [[1176, null]], "polars.Series.list.set_union": [[1177, null]], "polars.Series.list.shift": [[1178, null]], "polars.Series.list.slice": [[1179, null]], "polars.Series.list.sort": [[1180, null]], "polars.Series.list.std": [[1181, null]], "polars.Series.list.sum": [[1182, null]], "polars.Series.list.tail": [[1183, null]], "polars.Series.list.to_array": [[1184, null]], "polars.Series.list.to_struct": [[1185, null]], "polars.Series.list.unique": [[1186, null]], "polars.Series.list.var": [[1187, null]], "polars.Series.log": [[1188, null]], "polars.Series.log10": [[1189, null]], "polars.Series.log1p": [[1190, null]], "polars.Series.lower_bound": [[1191, null]], "polars.Series.lt": [[1192, null]], "polars.Series.map_elements": [[1193, null]], "polars.Series.max": [[1194, null]], "polars.Series.mean": [[1195, null]], "polars.Series.median": [[1196, null]], "polars.Series.min": [[1197, null]], "polars.Series.mode": [[1198, null]], "polars.Series.n_chunks": [[1199, null]], "polars.Series.n_unique": [[1200, null]], "polars.Series.name": [[1201, null]], "polars.Series.nan_max": [[1202, null]], "polars.Series.nan_min": [[1203, null]], "polars.Series.ne": [[1204, null]], "polars.Series.ne_missing": [[1205, null]], "polars.Series.new_from_index": [[1206, null]], "polars.Series.not_": [[1207, null]], "polars.Series.null_count": [[1208, null]], "polars.Series.pct_change": [[1209, null]], "polars.Series.peak_max": [[1210, null]], "polars.Series.peak_min": [[1211, null]], "polars.Series.pow": [[1212, null]], "polars.Series.product": [[1213, null]], "polars.Series.qcut": [[1214, null]], "polars.Series.quantile": [[1215, null]], "polars.Series.rank": [[1216, null]], "polars.Series.rechunk": [[1217, null]], "polars.Series.reinterpret": [[1218, null]], "polars.Series.rename": [[1219, null]], "polars.Series.replace": [[1220, null]], "polars.Series.replace_strict": [[1221, null]], "polars.Series.reshape": [[1222, null]], "polars.Series.reverse": [[1223, null]], "polars.Series.rle": [[1224, null]], "polars.Series.rle_id": [[1225, null]], "polars.Series.rolling_map": [[1226, null]], "polars.Series.rolling_max": [[1227, null]], "polars.Series.rolling_mean": [[1228, null]], "polars.Series.rolling_median": [[1229, null]], "polars.Series.rolling_min": [[1230, null]], "polars.Series.rolling_quantile": [[1231, null]], "polars.Series.rolling_skew": [[1232, null]], "polars.Series.rolling_std": [[1233, null]], "polars.Series.rolling_sum": [[1234, null]], "polars.Series.rolling_var": [[1235, null]], "polars.Series.round": [[1236, null]], "polars.Series.round_sig_figs": [[1237, null]], "polars.Series.sample": [[1238, null]], "polars.Series.scatter": [[1239, null]], "polars.Series.search_sorted": [[1240, null]], "polars.Series.set": [[1241, null]], "polars.Series.set_sorted": [[1242, null]], "polars.Series.shape": [[1243, null]], "polars.Series.shift": [[1244, null]], "polars.Series.shrink_dtype": [[1245, null]], "polars.Series.shrink_to_fit": [[1246, null]], "polars.Series.shuffle": [[1247, null]], "polars.Series.sign": [[1248, null]], "polars.Series.sin": [[1249, null]], "polars.Series.sinh": [[1250, null]], "polars.Series.skew": [[1251, null]], "polars.Series.slice": [[1252, null]], "polars.Series.sort": [[1253, null]], "polars.Series.sqrt": [[1254, null]], "polars.Series.std": [[1255, null]], "polars.Series.str.concat": [[1256, null]], "polars.Series.str.contains": [[1257, null]], "polars.Series.str.contains_any": [[1258, null]], "polars.Series.str.count_matches": [[1259, null]], "polars.Series.str.decode": [[1260, null]], "polars.Series.str.encode": [[1261, null]], "polars.Series.str.ends_with": [[1262, null]], "polars.Series.str.escape_regex": [[1263, null]], "polars.Series.str.explode": [[1264, null]], "polars.Series.str.extract": [[1265, null]], "polars.Series.str.extract_all": [[1266, null]], "polars.Series.str.extract_groups": [[1267, null]], "polars.Series.str.extract_many": [[1268, null]], "polars.Series.str.find": [[1269, null]], "polars.Series.str.find_many": [[1270, null]], "polars.Series.str.head": [[1271, null]], "polars.Series.str.join": [[1272, null]], "polars.Series.str.json_decode": [[1273, null]], "polars.Series.str.json_path_match": [[1274, null]], "polars.Series.str.len_bytes": [[1275, null]], "polars.Series.str.len_chars": [[1276, null]], "polars.Series.str.normalize": [[1277, null]], "polars.Series.str.pad_end": [[1278, null]], "polars.Series.str.pad_start": [[1279, null]], "polars.Series.str.replace": [[1280, null]], "polars.Series.str.replace_all": [[1281, null]], "polars.Series.str.replace_many": [[1282, null]], "polars.Series.str.reverse": [[1283, null]], "polars.Series.str.slice": [[1284, null]], "polars.Series.str.split": [[1285, null]], "polars.Series.str.split_exact": [[1286, null]], "polars.Series.str.splitn": [[1287, null]], "polars.Series.str.starts_with": [[1288, null]], "polars.Series.str.strip_chars": [[1289, null]], "polars.Series.str.strip_chars_end": [[1290, null]], "polars.Series.str.strip_chars_start": [[1291, null]], "polars.Series.str.strip_prefix": [[1292, null]], "polars.Series.str.strip_suffix": [[1293, null]], "polars.Series.str.strptime": [[1294, null]], "polars.Series.str.tail": [[1295, null]], "polars.Series.str.to_date": [[1296, null]], "polars.Series.str.to_datetime": [[1297, null]], "polars.Series.str.to_decimal": [[1298, null]], "polars.Series.str.to_integer": [[1299, null]], "polars.Series.str.to_lowercase": [[1300, null]], "polars.Series.str.to_time": [[1301, null]], "polars.Series.str.to_titlecase": [[1302, null]], "polars.Series.str.to_uppercase": [[1303, null]], "polars.Series.str.zfill": [[1304, null]], "polars.Series.struct.field": [[1305, null]], "polars.Series.struct.fields": [[1306, null]], "polars.Series.struct.json_encode": [[1307, null]], "polars.Series.struct.rename_fields": [[1308, null]], "polars.Series.struct.schema": [[1309, null]], "polars.Series.struct.unnest": [[1310, null]], "polars.Series.sum": [[1311, null]], "polars.Series.tail": [[1312, null]], "polars.Series.tan": [[1313, null]], "polars.Series.tanh": [[1314, null]], "polars.Series.to_arrow": [[1315, null]], "polars.Series.to_dummies": [[1316, null]], "polars.Series.to_frame": [[1317, null]], "polars.Series.to_init_repr": [[1318, null]], "polars.Series.to_jax": [[1319, null]], "polars.Series.to_list": [[1320, null]], "polars.Series.to_numpy": [[1321, null]], "polars.Series.to_pandas": [[1322, null]], "polars.Series.to_physical": [[1323, null]], "polars.Series.to_torch": [[1324, null]], "polars.Series.top_k": [[1325, null]], "polars.Series.unique": [[1326, null]], "polars.Series.unique_counts": [[1327, null]], "polars.Series.upper_bound": [[1328, null]], "polars.Series.value_counts": [[1329, null]], "polars.Series.var": [[1330, null]], "polars.Series.zip_with": [[1331, null]], "polars.StringCache": [[50, null]], "polars.align_frames": [[51, null]], "polars.all": [[745, null]], "polars.all_horizontal": [[746, null]], "polars.any": [[747, null]], "polars.any_horizontal": [[748, null]], "polars.api.register_dataframe_namespace": [[52, null]], "polars.api.register_expr_namespace": [[53, null]], "polars.api.register_lazyframe_namespace": [[54, null]], "polars.api.register_series_namespace": [[55, null]], "polars.approx_n_unique": [[749, null]], "polars.arange": [[750, null]], "polars.arctan2": [[751, null]], "polars.arctan2d": [[752, null]], "polars.arg_sort_by": [[753, null]], "polars.arg_where": [[754, null]], "polars.build_info": [[56, null]], "polars.business_day_count": [[755, null]], "polars.catalog.unity.CatalogInfo": [[183, null]], "polars.catalog.unity.ColumnInfo": [[184, null]], "polars.catalog.unity.DataSourceFormat": [[185, null]], "polars.catalog.unity.NamespaceInfo": [[186, null]], "polars.catalog.unity.TableInfo": [[187, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[188, null]], "polars.catalog.unity.TableType": [[189, null]], "polars.coalesce": [[756, null]], "polars.col": [[826, null]], "polars.collect_all": [[57, null]], "polars.collect_all_async": [[58, null]], "polars.concat": [[59, null]], "polars.concat_arr": [[757, null]], "polars.concat_list": [[758, null]], "polars.concat_str": [[759, null]], "polars.corr": [[760, null]], "polars.count": [[761, null]], "polars.cov": [[762, null]], "polars.cum_count": [[763, null]], "polars.cum_fold": [[764, null]], "polars.cum_reduce": [[765, null]], "polars.cum_sum": [[766, null]], "polars.cum_sum_horizontal": [[767, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[317, null]], "polars.dataframe.group_by.GroupBy.agg": [[318, null]], "polars.dataframe.group_by.GroupBy.all": [[319, null]], "polars.dataframe.group_by.GroupBy.count": [[320, null]], "polars.dataframe.group_by.GroupBy.first": [[321, null]], "polars.dataframe.group_by.GroupBy.head": [[322, null]], "polars.dataframe.group_by.GroupBy.last": [[323, null]], "polars.dataframe.group_by.GroupBy.len": [[324, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[325, null]], "polars.dataframe.group_by.GroupBy.max": [[326, null]], "polars.dataframe.group_by.GroupBy.mean": [[327, null]], "polars.dataframe.group_by.GroupBy.median": [[328, null]], "polars.dataframe.group_by.GroupBy.min": [[329, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[330, null]], "polars.dataframe.group_by.GroupBy.quantile": [[331, null]], "polars.dataframe.group_by.GroupBy.sum": [[332, null]], "polars.dataframe.group_by.GroupBy.tail": [[333, null]], "polars.datatypes.Array": [[60, null]], "polars.datatypes.Binary": [[61, null]], "polars.datatypes.Boolean": [[62, null]], "polars.datatypes.Categorical": [[63, null]], "polars.datatypes.DataType": [[64, null]], "polars.datatypes.Date": [[65, null]], "polars.datatypes.Datetime": [[66, null]], "polars.datatypes.Decimal": [[67, null]], "polars.datatypes.Duration": [[68, null]], "polars.datatypes.Enum": [[69, null]], "polars.datatypes.Field": [[70, null]], "polars.datatypes.Float32": [[71, null]], "polars.datatypes.Float64": [[72, null]], "polars.datatypes.Int128": [[73, null]], "polars.datatypes.Int16": [[74, null]], "polars.datatypes.Int32": [[75, null]], "polars.datatypes.Int64": [[76, null]], "polars.datatypes.Int8": [[77, null]], "polars.datatypes.List": [[78, null]], "polars.datatypes.Null": [[79, null]], "polars.datatypes.Object": [[80, null]], "polars.datatypes.String": [[81, null]], "polars.datatypes.Struct": [[82, null]], "polars.datatypes.Time": [[83, null]], "polars.datatypes.UInt16": [[84, null]], "polars.datatypes.UInt32": [[85, null]], "polars.datatypes.UInt64": [[86, null]], "polars.datatypes.UInt8": [[87, null]], "polars.datatypes.Unknown": [[88, null]], "polars.datatypes.Utf8": [[89, null]], "polars.date": [[768, null]], "polars.date_range": [[769, null]], "polars.date_ranges": [[770, null]], "polars.datetime": [[771, null]], "polars.datetime_range": [[772, null]], "polars.datetime_ranges": [[773, null]], "polars.disable_string_cache": [[90, null]], "polars.duration": [[774, null]], "polars.element": [[775, null]], "polars.enable_string_cache": [[91, null]], "polars.escape_regex": [[92, null]], "polars.exceptions.CategoricalRemappingWarning": [[93, null]], "polars.exceptions.ChronoFormatWarning": [[94, null]], "polars.exceptions.ColumnNotFoundError": [[95, null]], "polars.exceptions.ComputeError": [[96, null]], "polars.exceptions.CustomUFuncWarning": [[97, null]], "polars.exceptions.DataOrientationWarning": [[98, null]], "polars.exceptions.DuplicateError": [[99, null]], "polars.exceptions.InvalidOperationError": [[100, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[101, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[102, null]], "polars.exceptions.NoDataError": [[103, null]], "polars.exceptions.NoRowsReturnedError": [[104, null]], "polars.exceptions.OutOfBoundsError": [[105, null]], "polars.exceptions.PanicException": [[106, null]], "polars.exceptions.ParameterCollisionError": [[107, null]], "polars.exceptions.PerformanceWarning": [[108, null]], "polars.exceptions.PolarsError": [[109, null]], "polars.exceptions.PolarsInefficientMapWarning": [[110, null]], "polars.exceptions.PolarsWarning": [[111, null]], "polars.exceptions.RowsError": [[112, null]], "polars.exceptions.SQLInterfaceError": [[113, null]], "polars.exceptions.SQLSyntaxError": [[114, null]], "polars.exceptions.SchemaError": [[115, null]], "polars.exceptions.SchemaFieldNotFoundError": [[116, null]], "polars.exceptions.ShapeError": [[117, null]], "polars.exceptions.StringCacheMismatchError": [[118, null]], "polars.exceptions.StructFieldNotFoundError": [[119, null]], "polars.exceptions.TooManyRowsReturnedError": [[120, null]], "polars.exceptions.UnstableWarning": [[121, null]], "polars.exceptions.UnsuitableSQLError": [[122, null]], "polars.exclude": [[776, null]], "polars.first": [[777, null]], "polars.fold": [[778, null]], "polars.format": [[779, null]], "polars.from_arrow": [[123, null]], "polars.from_dataframe": [[124, null]], "polars.from_dict": [[125, null]], "polars.from_dicts": [[126, null]], "polars.from_epoch": [[780, null]], "polars.from_numpy": [[127, null]], "polars.from_pandas": [[128, null]], "polars.from_records": [[129, null]], "polars.from_repr": [[130, null]], "polars.get_index_type": [[131, null]], "polars.groups": [[781, null]], "polars.head": [[782, null]], "polars.implode": [[783, null]], "polars.int_range": [[784, null]], "polars.int_ranges": [[785, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[132, null]], "polars.io.plugins.register_io_source": [[133, null]], "polars.json_normalize": [[134, null]], "polars.last": [[786, null]], "polars.lazyframe.engine_config.GPUEngine": [[920, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[921, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[922, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[923, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[924, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[925, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[926, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[927, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[928, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[929, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[930, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[931, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[932, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[933, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[934, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[935, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[936, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[937, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[938, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[939, null]], "polars.len": [[787, null]], "polars.linear_space": [[788, null]], "polars.linear_spaces": [[789, null]], "polars.lit": [[790, null]], "polars.map_batches": [[791, null]], "polars.map_groups": [[792, null]], "polars.max": [[793, null]], "polars.max_horizontal": [[794, null]], "polars.mean": [[795, null]], "polars.mean_horizontal": [[796, null]], "polars.median": [[797, null]], "polars.min": [[798, null]], "polars.min_horizontal": [[799, null]], "polars.n_unique": [[800, null]], "polars.nth": [[801, null]], "polars.ones": [[802, null]], "polars.plugins.register_plugin_function": [[135, null]], "polars.quantile": [[803, null]], "polars.read_avro": [[136, null]], "polars.read_clipboard": [[137, null]], "polars.read_csv": [[138, null]], "polars.read_csv_batched": [[139, null]], "polars.read_database": [[140, null]], "polars.read_database_uri": [[141, null]], "polars.read_delta": [[142, null]], "polars.read_excel": [[143, null]], "polars.read_ipc": [[144, null]], "polars.read_ipc_schema": [[145, null]], "polars.read_ipc_stream": [[146, null]], "polars.read_json": [[147, null]], "polars.read_ndjson": [[148, null]], "polars.read_ods": [[149, null]], "polars.read_parquet": [[150, null]], "polars.read_parquet_schema": [[151, null]], "polars.reduce": [[804, null]], "polars.repeat": [[805, null]], "polars.rolling_corr": [[806, null]], "polars.rolling_cov": [[807, null]], "polars.scan_csv": [[152, null]], "polars.scan_delta": [[153, null]], "polars.scan_iceberg": [[154, null]], "polars.scan_ipc": [[155, null]], "polars.scan_ndjson": [[156, null]], "polars.scan_parquet": [[157, null]], "polars.scan_pyarrow_dataset": [[158, null]], "polars.select": [[808, null]], "polars.set_random_seed": [[159, null]], "polars.show_versions": [[160, null]], "polars.sql": [[809, null]], "polars.sql_expr": [[810, null]], "polars.std": [[811, null]], "polars.struct": [[812, null]], "polars.sum": [[813, null]], "polars.sum_horizontal": [[814, null]], "polars.tail": [[815, null]], "polars.testing.assert_frame_equal": [[161, null]], "polars.testing.assert_frame_not_equal": [[162, null]], "polars.testing.assert_series_equal": [[163, null]], "polars.testing.assert_series_not_equal": [[164, null]], "polars.testing.parametric.column": [[165, null]], "polars.testing.parametric.columns": [[166, null]], "polars.testing.parametric.create_list_strategy": [[167, null]], "polars.testing.parametric.dataframes": [[168, null]], "polars.testing.parametric.dtypes": [[169, null]], "polars.testing.parametric.lists": [[170, null]], "polars.testing.parametric.load_profile": [[171, null]], "polars.testing.parametric.series": [[172, null]], "polars.testing.parametric.set_profile": [[173, null]], "polars.thread_pool_size": [[174, null]], "polars.threadpool_size": [[175, null]], "polars.time": [[816, null]], "polars.time_range": [[817, null]], "polars.time_ranges": [[818, null]], "polars.using_string_cache": [[176, null]], "polars.var": [[819, null]], "polars.when": [[820, null]], "polars.zeros": [[821, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[194, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[953, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[195, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[954, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[196, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1368, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1368, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[197, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[955, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[177, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[183, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[184, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[186, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[187, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[33, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[34, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[60, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[61, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[62, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[63, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[64, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[65, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[66, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[67, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[68, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[69, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[70, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[71, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[72, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[73, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[74, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[75, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[76, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[77, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[78, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[79, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[80, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[81, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[82, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[83, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[84, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[85, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[86, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[87, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[88, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[920, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1368, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[50, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[165, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[317, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[347, "polars.Expr.abs", false]], "abs() (polars.series method)": [[956, "polars.Series.abs", false]], "add() (polars.expr method)": [[348, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[436, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1045, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[318, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[921, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[349, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[350, "polars.Expr.alias", false]], "alias() (polars.series method)": [[957, "polars.Series.alias", false]], "align_frames() (in module polars)": [[51, "polars.align_frames", false]], "all() (in module polars)": [[745, "polars.all", false]], "all() (in module polars.selectors)": [[951, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[319, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[351, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[367, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[532, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[922, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[958, "polars.Series.all", false]], "all() (polars.series.arr method)": [[973, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1148, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[746, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[951, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[951, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[352, "polars.Expr.and_", false]], "any() (in module polars)": [[747, "polars.any", false]], "any() (polars.expr method)": [[353, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[368, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[533, "polars.Expr.list.any", false]], "any() (polars.series method)": [[959, "polars.Series.any", false]], "any() (polars.series.arr method)": [[974, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1149, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[748, "polars.any_horizontal", false]], "append() (polars.expr method)": [[354, "polars.Expr.append", false]], "append() (polars.series method)": [[960, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[749, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[198, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[355, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[845, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[961, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[750, "polars.arange", false]], "arccos() (polars.expr method)": [[356, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[962, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[357, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[963, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[358, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[964, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[359, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[965, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[360, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[966, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[751, "polars.arctan2", false]], "arctan2d() (in module polars)": [[752, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[361, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[967, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[362, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[369, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[534, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[968, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[975, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1150, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[363, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[370, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[535, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[969, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[976, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1151, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[364, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[970, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[753, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[365, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[971, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[366, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[972, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[754, "polars.arg_where", false]], "array (class in polars.datatypes)": [[60, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[161, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[162, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[163, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[164, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[391, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[437, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1046, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[61, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[951, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[399, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1004, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[400, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1005, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[401, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1006, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[402, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1007, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[403, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1008, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[404, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1009, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[405, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1010, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[406, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1011, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[407, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1012, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[62, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[951, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[199, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[408, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[846, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1013, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[409, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[56, "polars.build_info", false]], "business_day_count() (in module polars)": [[755, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[951, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[951, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[951, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[847, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[937, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[200, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[410, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[848, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1014, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[438, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1047, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[177, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[183, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[63, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[951, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[93, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[416, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1023, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[417, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1024, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[439, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1048, "polars.Series.dt.century", false]], "chronoformatwarning": [[94, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1025, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[201, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[849, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1026, "polars.Series.clear", false]], "clip() (polars.expr method)": [[418, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1027, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[202, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[850, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1028, "polars.Series.clone", false]], "coalesce() (in module polars)": [[756, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[851, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[57, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[58, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[852, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[203, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[853, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[165, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[184, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[95, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[204, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[854, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[440, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1049, "polars.Series.dt.combine", false]], "computeerror": [[96, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[59, "polars.concat", false]], "concat() (polars.expr.list method)": [[536, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[675, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1152, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1256, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[757, "polars.concat_arr", false]], "concat_list() (in module polars)": [[758, "polars.concat_list", false]], "concat_str() (in module polars)": [[759, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[951, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[371, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[392, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[537, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[676, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[977, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[997, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1153, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1257, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[677, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1258, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[441, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1050, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[760, "polars.corr", false]], "corr() (polars.dataframe method)": [[205, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[419, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1029, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[420, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1030, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[421, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1031, "polars.Series.cot", false]], "count() (in module polars)": [[761, "polars.count", false]], "count() (polars.dataframe method)": [[206, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[320, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[422, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[855, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[923, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1032, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[372, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[538, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[678, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[978, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1154, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1259, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[762, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[33, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[34, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[763, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[423, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1033, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[764, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[424, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1034, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[425, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1035, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[426, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1036, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[765, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[766, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[427, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1037, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[767, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[428, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1038, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[97, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[429, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1039, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[98, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[185, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[64, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[65, "polars.datatypes.Date", false]], "date() (in module polars)": [[768, "polars.date", false]], "date() (in module polars.selectors)": [[951, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[442, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1051, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[769, "polars.date_range", false]], "date_ranges() (in module polars)": [[770, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[66, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[771, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[951, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[443, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1052, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[772, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[773, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[444, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1053, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[67, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[951, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[393, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[679, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[998, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1260, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[430, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[207, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[856, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1040, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[208, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[431, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[857, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[432, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[539, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1041, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1155, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[951, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[90, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[433, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1042, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[209, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[858, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[210, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[211, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[434, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[859, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1043, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[212, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[435, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[540, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[860, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1044, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1156, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[445, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1054, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1094, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[213, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[861, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[169, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[99, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[68, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[774, "polars.duration", false]], "duration() (in module polars.selectors)": [[951, "polars.selectors.duration", false]], "element() (in module polars)": [[775, "polars.element", false]], "enable_string_cache() (in module polars)": [[91, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[394, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[680, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[999, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1261, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[951, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[395, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[411, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[681, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1000, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1015, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1262, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[481, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1095, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[69, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[446, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1055, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[482, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[582, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1096, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[483, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1097, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[214, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1098, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[92, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[682, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1263, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[215, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1099, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[541, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1157, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[484, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1100, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[485, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1101, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[486, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1102, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[487, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1103, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[776, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[951, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[488, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1349, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1350, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[489, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1104, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[951, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[862, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[216, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[490, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[373, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[542, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[683, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[863, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1105, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[979, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1158, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1264, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[217, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1106, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[491, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1107, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[684, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1265, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[685, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1266, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[686, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1267, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[687, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1268, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[938, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[939, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[70, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[724, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1305, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1306, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[218, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[492, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[864, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1108, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[219, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[493, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[865, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1109, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[220, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[494, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[866, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1110, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[688, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1269, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[689, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1270, "polars.Series.str.find_many", false]], "first() (in module polars)": [[777, "polars.first", false]], "first() (in module polars.selectors)": [[951, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[321, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[495, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[374, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[543, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[867, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[924, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1111, "polars.Series.first", false]], "first() (polars.series.arr method)": [[980, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1159, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[221, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1112, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[496, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[951, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[71, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[72, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[497, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1113, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[498, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[778, "polars.fold", false]], "fold() (polars.dataframe method)": [[222, "polars.DataFrame.fold", false]], "format() (in module polars)": [[779, "polars.format", false]], "forward_fill() (polars.expr method)": [[499, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[123, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[124, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[125, "polars.from_dict", false]], "from_dicts() (in module polars)": [[126, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[780, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[500, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[127, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[128, "polars.from_pandas", false]], "from_records() (in module polars)": [[129, "polars.from_records", false]], "from_repr() (in module polars)": [[130, "polars.from_repr", false]], "gather() (polars.expr method)": [[501, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[544, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1114, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1160, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[223, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[502, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[545, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[868, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1115, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1161, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[503, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1116, "polars.Series.ge", false]], "get() (polars.expr method)": [[504, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[375, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[546, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[981, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1162, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[412, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1016, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1117, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[224, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[225, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[226, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[131, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[188, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[178, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[227, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[920, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[228, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[869, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[229, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[870, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[781, "polars.groups", false]], "gt() (polars.expr method)": [[505, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1118, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[583, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[506, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1119, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1120, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[507, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1121, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[230, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[782, "polars.head", false]], "head() (polars.dataframe method)": [[231, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[322, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[508, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[547, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[690, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[871, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[925, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1122, "polars.Series.head", false]], "head() (polars.series.list method)": [[1163, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1271, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[232, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[509, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1123, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[447, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1056, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[233, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[783, "polars.implode", false]], "implode() (polars.expr method)": [[510, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1124, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[511, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1125, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[234, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[512, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[872, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[73, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[74, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[75, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[76, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[77, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[784, "polars.int_range", false]], "int_ranges() (in module polars)": [[785, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[951, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[235, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[513, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[873, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1126, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[514, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1127, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[100, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[515, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1128, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[584, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[585, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[236, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[516, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1129, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[237, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1130, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[517, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1131, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[518, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1132, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[519, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1133, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[520, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1134, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[521, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1135, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[448, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1057, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[586, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1017, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[522, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1136, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[523, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1137, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[524, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1138, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[525, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1139, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[587, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[951, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1140, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[238, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[526, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1141, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[449, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1058, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[239, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1142, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[240, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[241, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[242, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[243, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[376, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[548, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[691, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[874, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[982, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1164, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1272, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[244, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[875, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[245, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[876, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[692, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1273, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[725, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1307, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[134, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[693, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1274, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[602, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[527, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1143, "polars.Series.kurtosis", false]], "last() (in module polars)": [[786, "polars.last", false]], "last() (in module polars.selectors)": [[951, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[323, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[528, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[377, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[549, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[877, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[926, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1144, "polars.Series.last", false]], "last() (polars.series.arr method)": [[983, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1165, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[246, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[878, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[529, "polars.Expr.le", false]], "le() (polars.series method)": [[1145, "polars.Series.le", false]], "len() (in module polars)": [[787, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[324, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[530, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[550, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[927, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1146, "polars.Series.len", false]], "len() (polars.series.list method)": [[1166, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[413, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[694, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1018, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1275, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[414, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[695, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1019, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1276, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[247, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[531, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[879, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1147, "polars.Series.limit", false]], "linear_space() (in module polars)": [[788, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[789, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[78, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[179, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[180, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[181, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[170, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[790, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[171, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[572, "polars.Expr.log", false]], "log() (polars.series method)": [[1188, "polars.Series.log", false]], "log10() (polars.expr method)": [[573, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1189, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[574, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1190, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[575, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1191, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[576, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1192, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[603, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[791, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[577, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[880, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[578, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1193, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[604, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[792, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[325, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[928, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[248, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[101, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[951, "polars.selectors.matches", false]], "max() (in module polars)": [[793, "polars.max", false]], "max() (polars.dataframe method)": [[249, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[326, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[579, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[378, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[551, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[881, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[929, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1194, "polars.Series.max", false]], "max() (polars.series.arr method)": [[984, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1059, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1167, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[794, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[250, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[795, "polars.mean", false]], "mean() (polars.dataframe method)": [[251, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[327, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[580, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[552, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[882, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[930, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1195, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1060, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1168, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[796, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[252, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[797, "polars.median", false]], "median() (polars.dataframe method)": [[253, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[328, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[581, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[379, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[553, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[883, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[931, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1196, "polars.Series.median", false]], "median() (polars.series.arr method)": [[985, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1061, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1169, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[254, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[884, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[255, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[885, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[450, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1062, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[451, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1063, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[452, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1064, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[798, "polars.min", false]], "min() (polars.dataframe method)": [[256, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[329, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[597, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[380, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[554, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[886, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[932, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1197, "polars.Series.min", false]], "min() (polars.series.arr method)": [[986, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1065, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1170, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[799, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[257, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[453, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1066, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[598, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[599, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1198, "polars.Series.mode", false]], "module": [[951, "module-polars.selectors", false]], "moduleupgraderequirederror": [[102, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[454, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1067, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[455, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1068, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[456, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1069, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[600, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[258, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1199, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[800, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[259, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[601, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[381, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[555, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[933, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1200, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[987, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1171, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1201, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[186, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[611, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1202, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[612, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1203, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[457, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1070, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[613, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[588, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1204, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[614, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1205, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[615, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1206, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[132, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[103, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[696, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1277, "polars.Series.str.normalize", false]], "norowsreturnederror": [[104, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[616, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1207, "polars.Series.not_", false]], "nth() (in module polars)": [[801, "polars.nth", false]], "null (class in polars.datatypes)": [[79, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[260, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[617, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[887, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1208, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[951, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[80, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[458, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1071, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[802, "polars.ones", false]], "or_() (polars.expr method)": [[618, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[459, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1072, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[105, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[589, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[619, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[697, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1278, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[698, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1279, "polars.Series.str.pad_start", false]], "panicexception": [[106, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[107, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[261, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[620, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1209, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[621, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1210, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[622, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1211, "polars.Series.peak_min", false]], "performancewarning": [[108, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[262, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[623, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[888, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[263, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[342, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1345, "polars.Series.plot", false]], "polars.selectors": [[951, "module-polars.selectors", false]], "polarserror": [[109, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[110, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[111, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[590, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[624, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1212, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[605, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[606, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[264, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[625, "polars.Expr.product", false]], "product() (polars.series method)": [[1213, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[889, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[626, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1214, "polars.Series.qcut", false]], "quantile() (in module polars)": [[803, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[265, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[627, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[890, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[934, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1215, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[460, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1073, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[628, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[629, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1216, "polars.Series.rank", false]], "read_avro() (in module polars)": [[136, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[137, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[138, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[139, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[140, "polars.read_database", false]], "read_database_uri() (in module polars)": [[141, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[142, "polars.read_delta", false]], "read_excel() (in module polars)": [[143, "polars.read_excel", false]], "read_ipc() (in module polars)": [[144, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[145, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[146, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[147, "polars.read_json", false]], "read_ndjson() (in module polars)": [[148, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[149, "polars.read_ods", false]], "read_parquet() (in module polars)": [[150, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[151, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[266, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[630, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1217, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[804, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1351, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[52, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[53, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1352, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[133, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[54, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1353, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[135, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[55, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[631, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[396, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1218, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1001, "polars.Series.bin.reinterpret", false]], "remove() (polars.dataframe method)": [[267, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[891, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[268, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[892, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1219, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[726, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1308, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[805, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[632, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[633, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[461, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[699, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1220, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1074, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1280, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[700, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1281, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[269, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[701, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1282, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[634, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1221, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[462, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1075, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[635, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1222, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[270, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[636, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[382, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[556, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[702, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[893, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1223, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[988, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1172, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1283, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[637, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1224, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[638, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1225, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[271, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[639, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[894, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[806, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[807, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[640, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1226, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[641, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1227, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[642, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[643, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1228, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[644, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[645, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1229, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[646, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[647, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1230, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[648, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[649, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1231, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[650, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[651, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1232, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[652, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1233, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[653, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[654, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1234, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[655, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[656, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1235, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[657, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[591, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[658, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[463, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1236, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1076, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[659, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1237, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[272, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[273, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[274, "polars.DataFrame.rows_by_key", false]], "rowserror": [[112, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[275, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[660, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[557, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1238, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1173, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[152, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[153, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[154, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[155, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[156, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[157, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[158, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[182, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1239, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[276, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[895, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1309, "polars.Series.struct.schema", false]], "schemaerror": [[115, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[116, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[661, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1240, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[464, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1077, "polars.Series.dt.second", false]], "select() (in module polars)": [[808, "polars.select", false]], "select() (polars.dataframe method)": [[277, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[896, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[278, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[897, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[279, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[592, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[898, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[172, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1241, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[558, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1174, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[559, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1175, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[173, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[159, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[280, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[662, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[899, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1242, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[560, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1176, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[561, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1177, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[281, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1243, "polars.Series.shape", false]], "shapeerror": [[117, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[282, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[663, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[383, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[562, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[900, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1244, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[989, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1178, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[593, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[901, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[160, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[664, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1245, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[283, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1246, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[665, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1247, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[666, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1248, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[951, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[667, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1249, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[668, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1250, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[397, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1002, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[669, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1251, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[284, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[670, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[563, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[703, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[902, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1252, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1179, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1284, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[285, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[671, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[384, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[564, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[903, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1253, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[990, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1180, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[672, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[704, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1285, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[705, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1286, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[706, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1287, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[809, "polars.sql", false]], "sql() (polars.dataframe method)": [[286, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[904, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[810, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1368, "polars.SQLContext", false]], "sqlinterfaceerror": [[113, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[114, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[673, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1254, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[951, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[398, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[415, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[707, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1003, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1020, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1288, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[811, "polars.std", false]], "std() (polars.dataframe method)": [[287, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[674, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[385, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[565, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[905, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1255, "polars.Series.std", false]], "std() (polars.series.arr method)": [[991, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1181, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[465, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1078, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[81, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[951, "polars.selectors.string", false]], "stringcache (class in polars)": [[50, "polars.StringCache", false]], "stringcachemismatcherror": [[118, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[708, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1289, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[709, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1290, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[710, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1291, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[711, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1292, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[712, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1293, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[713, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1294, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[82, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[812, "polars.struct", false]], "structfieldnotfounderror": [[119, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[343, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[729, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[607, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[608, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[813, "polars.sum", false]], "sum() (polars.dataframe method)": [[288, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[730, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[386, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[566, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[906, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[935, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1311, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[992, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1182, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[814, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[289, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[187, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1354, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[189, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[815, "polars.tail", false]], "tail() (polars.dataframe method)": [[290, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[731, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[567, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[714, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[907, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[936, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1312, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1183, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1295, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[732, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1313, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[733, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1314, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[951, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[174, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[175, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[83, "polars.datatypes.Time", false]], "time() (in module polars)": [[816, "polars.time", false]], "time() (in module polars.selectors)": [[951, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[466, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1079, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[817, "polars.time_range", false]], "time_ranges() (in module polars)": [[818, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[467, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1080, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[568, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1184, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[291, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1315, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[715, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1296, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[716, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1297, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[717, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1298, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[292, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[293, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[294, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1316, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1317, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[295, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1318, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[718, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1299, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[296, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1319, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[387, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1320, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[993, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1021, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[609, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[719, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1300, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[297, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1321, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[298, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1322, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[734, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1323, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[299, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[468, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1081, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[300, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[388, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[569, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[994, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1185, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[720, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1301, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[721, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1302, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[301, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1324, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[610, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[722, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1303, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[120, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[302, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[735, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[908, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1325, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[736, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[469, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1082, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[470, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1083, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[471, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1084, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[472, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1085, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[473, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1086, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[474, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1087, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[475, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1088, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[303, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[594, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[737, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[476, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1089, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[84, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[85, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[86, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[87, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[595, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[304, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[738, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[389, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[570, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[909, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1326, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[995, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1186, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[739, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1327, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[88, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[305, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[727, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[910, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1310, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[306, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[911, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1355, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[951, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[121, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[307, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[122, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[308, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[912, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[740, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1328, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[309, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1022, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[176, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[89, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[741, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1329, "polars.Series.value_counts", false]], "var() (in module polars)": [[819, "polars.var", false]], "var() (polars.dataframe method)": [[310, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[742, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[390, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[571, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[913, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1330, "polars.Series.var", false]], "var() (polars.series.arr method)": [[996, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1187, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[311, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[477, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1090, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[478, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1091, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[820, "polars.when", false]], "where() (polars.expr method)": [[743, "polars.Expr.where", false]], "width (polars.dataframe property)": [[312, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[914, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[313, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[915, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[314, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[916, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[917, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[728, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[315, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[918, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[316, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[919, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[479, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1092, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[35, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[36, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[596, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[744, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[480, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1093, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[821, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[723, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1304, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1331, "polars.Series.zip_with", false]]}, "objects": {"polars": [[177, 0, 1, "", "Catalog"], [31, 0, 1, "", "CredentialProvider"], [32, 0, 1, "", "CredentialProviderAWS"], [33, 0, 1, "", "CredentialProviderAzure"], [34, 0, 1, "", "CredentialProviderGCP"], [1368, 0, 1, "", "SQLContext"], [50, 0, 1, "", "StringCache"], [51, 4, 1, "", "align_frames"], [745, 4, 1, "", "all"], [746, 4, 1, "", "all_horizontal"], [747, 4, 1, "", "any"], [748, 4, 1, "", "any_horizontal"], [749, 4, 1, "", "approx_n_unique"], [750, 4, 1, "", "arange"], [751, 4, 1, "", "arctan2"], [752, 4, 1, "", "arctan2d"], [753, 4, 1, "", "arg_sort_by"], [754, 4, 1, "", "arg_where"], [56, 4, 1, "", "build_info"], [755, 4, 1, "", "business_day_count"], [756, 4, 1, "", "coalesce"], [57, 4, 1, "", "collect_all"], [58, 4, 1, "", "collect_all_async"], [59, 4, 1, "", "concat"], [757, 4, 1, "", "concat_arr"], [758, 4, 1, "", "concat_list"], [759, 4, 1, "", "concat_str"], [760, 4, 1, "", "corr"], [761, 4, 1, "", "count"], [762, 4, 1, "", "cov"], [763, 4, 1, "", "cum_count"], [764, 4, 1, "", "cum_fold"], [765, 4, 1, "", "cum_reduce"], [766, 4, 1, "", "cum_sum"], [767, 4, 1, "", "cum_sum_horizontal"], [768, 4, 1, "", "date"], [769, 4, 1, "", "date_range"], [770, 4, 1, "", "date_ranges"], [771, 4, 1, "", "datetime"], [772, 4, 1, "", "datetime_range"], [773, 4, 1, "", "datetime_ranges"], [90, 4, 1, "", "disable_string_cache"], [774, 4, 1, "", "duration"], [775, 4, 1, "", "element"], [91, 4, 1, "", "enable_string_cache"], [92, 4, 1, "", "escape_regex"], [776, 4, 1, "", "exclude"], [777, 4, 1, "", "first"], [778, 4, 1, "", "fold"], [779, 4, 1, "", "format"], [123, 4, 1, "", "from_arrow"], [124, 4, 1, "", "from_dataframe"], [125, 4, 1, "", "from_dict"], [126, 4, 1, "", "from_dicts"], [780, 4, 1, "", "from_epoch"], [127, 4, 1, "", "from_numpy"], [128, 4, 1, "", "from_pandas"], [129, 4, 1, "", "from_records"], [130, 4, 1, "", "from_repr"], [131, 4, 1, "", "get_index_type"], [781, 4, 1, "", "groups"], [782, 4, 1, "", "head"], [783, 4, 1, "", "implode"], [784, 4, 1, "", "int_range"], [785, 4, 1, "", "int_ranges"], [134, 4, 1, "", "json_normalize"], [786, 4, 1, "", "last"], [787, 4, 1, "", "len"], [788, 4, 1, "", "linear_space"], [789, 4, 1, "", "linear_spaces"], [790, 4, 1, "", "lit"], [791, 4, 1, "", "map_batches"], [792, 4, 1, "", "map_groups"], [793, 4, 1, "", "max"], [794, 4, 1, "", "max_horizontal"], [795, 4, 1, "", "mean"], [796, 4, 1, "", "mean_horizontal"], [797, 4, 1, "", "median"], [798, 4, 1, "", "min"], [799, 4, 1, "", "min_horizontal"], [800, 4, 1, "", "n_unique"], [801, 4, 1, "", "nth"], [802, 4, 1, "", "ones"], [803, 4, 1, "", "quantile"], [136, 4, 1, "", "read_avro"], [137, 4, 1, "", "read_clipboard"], [138, 4, 1, "", "read_csv"], [139, 4, 1, "", "read_csv_batched"], [140, 4, 1, "", "read_database"], [141, 4, 1, "", "read_database_uri"], [142, 4, 1, "", "read_delta"], [143, 4, 1, "", "read_excel"], [144, 4, 1, "", "read_ipc"], [145, 4, 1, "", "read_ipc_schema"], [146, 4, 1, "", "read_ipc_stream"], [147, 4, 1, "", "read_json"], [148, 4, 1, "", "read_ndjson"], [149, 4, 1, "", "read_ods"], [150, 4, 1, "", "read_parquet"], [151, 4, 1, "", "read_parquet_schema"], [804, 4, 1, "", "reduce"], [805, 4, 1, "", "repeat"], [806, 4, 1, "", "rolling_corr"], [807, 4, 1, "", "rolling_cov"], [152, 4, 1, "", "scan_csv"], [153, 4, 1, "", "scan_delta"], [154, 4, 1, "", "scan_iceberg"], [155, 4, 1, "", "scan_ipc"], [156, 4, 1, "", "scan_ndjson"], [157, 4, 1, "", "scan_parquet"], [158, 4, 1, "", "scan_pyarrow_dataset"], [808, 4, 1, "", "select"], [951, 7, 0, "-", "selectors"], [159, 4, 1, "", "set_random_seed"], [160, 4, 1, "", "show_versions"], [809, 4, 1, "", "sql"], [810, 4, 1, "", "sql_expr"], [811, 4, 1, "", "std"], [812, 4, 1, "", "struct"], [813, 4, 1, "", "sum"], [814, 4, 1, "", "sum_horizontal"], [815, 4, 1, "", "tail"], [174, 4, 1, "", "thread_pool_size"], [175, 4, 1, "", "threadpool_size"], [816, 4, 1, "", "time"], [817, 4, 1, "", "time_range"], [818, 4, 1, "", "time_ranges"], [176, 4, 1, "", "using_string_cache"], [819, 4, 1, "", "var"], [820, 4, 1, "", "when"], [821, 4, 1, "", "zeros"]], "polars.Catalog": [[177, 1, 1, "", "__init__"], [178, 1, 1, "", "get_table_info"], [179, 1, 1, "", "list_catalogs"], [180, 1, 1, "", "list_namespaces"], [181, 1, 1, "", "list_tables"], [182, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_float_precision"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_fmt_table_cell_list_len"], [14, 1, 1, "", "set_streaming_chunk_size"], [15, 1, 1, "", "set_tbl_cell_alignment"], [16, 1, 1, "", "set_tbl_cell_numeric_alignment"], [17, 1, 1, "", "set_tbl_cols"], [18, 1, 1, "", "set_tbl_column_data_type_inline"], [19, 1, 1, "", "set_tbl_dataframe_shape_below"], [20, 1, 1, "", "set_tbl_formatting"], [21, 1, 1, "", "set_tbl_hide_column_data_types"], [22, 1, 1, "", "set_tbl_hide_column_names"], [23, 1, 1, "", "set_tbl_hide_dataframe_shape"], [24, 1, 1, "", "set_tbl_hide_dtype_separator"], [25, 1, 1, "", "set_tbl_rows"], [26, 1, 1, "", "set_tbl_width_chars"], [27, 1, 1, "", "set_thousands_separator"], [28, 1, 1, "", "set_trim_decimal_zeros"], [29, 1, 1, "", "set_verbose"], [30, 1, 1, "", "state"]], "polars.CredentialProvider": [[31, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[34, 1, 1, "", "__init__"]], "polars.DataFrame": [[194, 1, 1, "", "__array__"], [195, 1, 1, "", "__arrow_c_stream__"], [196, 1, 1, "", "__dataframe__"], [197, 1, 1, "", "__getitem__"], [198, 1, 1, "", "approx_n_unique"], [199, 1, 1, "", "bottom_k"], [200, 1, 1, "", "cast"], [201, 1, 1, "", "clear"], [202, 1, 1, "", "clone"], [203, 1, 1, "", "collect_schema"], [204, 2, 1, "", "columns"], [205, 1, 1, "", "corr"], [206, 1, 1, "", "count"], [207, 1, 1, "", "describe"], [208, 1, 1, "", "deserialize"], [209, 1, 1, "", "drop"], [210, 1, 1, "", "drop_in_place"], [211, 1, 1, "", "drop_nans"], [212, 1, 1, "", "drop_nulls"], [213, 2, 1, "", "dtypes"], [214, 1, 1, "", "equals"], [215, 1, 1, "", "estimated_size"], [216, 1, 1, "", "explode"], [217, 1, 1, "", "extend"], [218, 1, 1, "", "fill_nan"], [219, 1, 1, "", "fill_null"], [220, 1, 1, "", "filter"], [221, 2, 1, "", "flags"], [222, 1, 1, "", "fold"], [223, 1, 1, "", "gather_every"], [224, 1, 1, "", "get_column"], [225, 1, 1, "", "get_column_index"], [226, 1, 1, "", "get_columns"], [227, 1, 1, "", "glimpse"], [228, 1, 1, "", "group_by"], [229, 1, 1, "", "group_by_dynamic"], [230, 1, 1, "", "hash_rows"], [231, 1, 1, "", "head"], [232, 2, 1, "", "height"], [233, 1, 1, "", "hstack"], [234, 1, 1, "", "insert_column"], [235, 1, 1, "", "interpolate"], [236, 1, 1, "", "is_duplicated"], [237, 1, 1, "", "is_empty"], [238, 1, 1, "", "is_unique"], [239, 1, 1, "", "item"], [240, 1, 1, "", "iter_columns"], [241, 1, 1, "", "iter_rows"], [242, 1, 1, "", "iter_slices"], [243, 1, 1, "", "join"], [244, 1, 1, "", "join_asof"], [245, 1, 1, "", "join_where"], [246, 1, 1, "", "lazy"], [247, 1, 1, "", "limit"], [248, 1, 1, "", "map_rows"], [249, 1, 1, "", "max"], [250, 1, 1, "", "max_horizontal"], [251, 1, 1, "", "mean"], [252, 1, 1, "", "mean_horizontal"], [253, 1, 1, "", "median"], [254, 1, 1, "", "melt"], [255, 1, 1, "", "merge_sorted"], [256, 1, 1, "", "min"], [257, 1, 1, "", "min_horizontal"], [258, 1, 1, "", "n_chunks"], [259, 1, 1, "", "n_unique"], [260, 1, 1, "", "null_count"], [261, 1, 1, "", "partition_by"], [262, 1, 1, "", "pipe"], [263, 1, 1, "", "pivot"], [342, 2, 1, "", "plot"], [264, 1, 1, "", "product"], [265, 1, 1, "", "quantile"], [266, 1, 1, "", "rechunk"], [267, 1, 1, "", "remove"], [268, 1, 1, "", "rename"], [269, 1, 1, "", "replace_column"], [270, 1, 1, "", "reverse"], [271, 1, 1, "", "rolling"], [272, 1, 1, "", "row"], [273, 1, 1, "", "rows"], [274, 1, 1, "", "rows_by_key"], [275, 1, 1, "", "sample"], [276, 2, 1, "", "schema"], [277, 1, 1, "", "select"], [278, 1, 1, "", "select_seq"], [279, 1, 1, "", "serialize"], [280, 1, 1, "", "set_sorted"], [281, 2, 1, "", "shape"], [282, 1, 1, "", "shift"], [283, 1, 1, "", "shrink_to_fit"], [284, 1, 1, "", "slice"], [285, 1, 1, "", "sort"], [286, 1, 1, "", "sql"], [287, 1, 1, "", "std"], [343, 2, 1, "", "style"], [288, 1, 1, "", "sum"], [289, 1, 1, "", "sum_horizontal"], [290, 1, 1, "", "tail"], [291, 1, 1, "", "to_arrow"], [292, 1, 1, "", "to_dict"], [293, 1, 1, "", "to_dicts"], [294, 1, 1, "", "to_dummies"], [295, 1, 1, "", "to_init_repr"], [296, 1, 1, "", "to_jax"], [297, 1, 1, "", "to_numpy"], [298, 1, 1, "", "to_pandas"], [299, 1, 1, "", "to_series"], [300, 1, 1, "", "to_struct"], [301, 1, 1, "", "to_torch"], [302, 1, 1, "", "top_k"], [303, 1, 1, "", "transpose"], [304, 1, 1, "", "unique"], [305, 1, 1, "", "unnest"], [306, 1, 1, "", "unpivot"], [307, 1, 1, "", "unstack"], [308, 1, 1, "", "update"], [309, 1, 1, "", "upsample"], [310, 1, 1, "", "var"], [311, 1, 1, "", "vstack"], [312, 2, 1, "", "width"], [313, 1, 1, "", "with_columns"], [314, 1, 1, "", "with_columns_seq"], [315, 1, 1, "", "with_row_count"], [316, 1, 1, "", "with_row_index"], [35, 1, 1, "", "write_avro"], [36, 1, 1, "", "write_clipboard"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.Expr": [[347, 1, 1, "", "abs"], [348, 1, 1, "", "add"], [349, 1, 1, "", "agg_groups"], [350, 1, 1, "", "alias"], [351, 1, 1, "", "all"], [352, 1, 1, "", "and_"], [353, 1, 1, "", "any"], [354, 1, 1, "", "append"], [355, 1, 1, "", "approx_n_unique"], [356, 1, 1, "", "arccos"], [357, 1, 1, "", "arccosh"], [358, 1, 1, "", "arcsin"], [359, 1, 1, "", "arcsinh"], [360, 1, 1, "", "arctan"], [361, 1, 1, "", "arctanh"], [362, 1, 1, "", "arg_max"], [363, 1, 1, "", "arg_min"], [364, 1, 1, "", "arg_sort"], [365, 1, 1, "", "arg_true"], [366, 1, 1, "", "arg_unique"], [391, 1, 1, "", "backward_fill"], [399, 1, 1, "", "bitwise_and"], [400, 1, 1, "", "bitwise_count_ones"], [401, 1, 1, "", "bitwise_count_zeros"], [402, 1, 1, "", "bitwise_leading_ones"], [403, 1, 1, "", "bitwise_leading_zeros"], [404, 1, 1, "", "bitwise_or"], [405, 1, 1, "", "bitwise_trailing_ones"], [406, 1, 1, "", "bitwise_trailing_zeros"], [407, 1, 1, "", "bitwise_xor"], [408, 1, 1, "", "bottom_k"], [409, 1, 1, "", "bottom_k_by"], [410, 1, 1, "", "cast"], [416, 1, 1, "", "cbrt"], [417, 1, 1, "", "ceil"], [418, 1, 1, "", "clip"], [419, 1, 1, "", "cos"], [420, 1, 1, "", "cosh"], [421, 1, 1, "", "cot"], [422, 1, 1, "", "count"], [423, 1, 1, "", "cum_count"], [424, 1, 1, "", "cum_max"], [425, 1, 1, "", "cum_min"], [426, 1, 1, "", "cum_prod"], [427, 1, 1, "", "cum_sum"], [428, 1, 1, "", "cumulative_eval"], [429, 1, 1, "", "cut"], [430, 1, 1, "", "degrees"], [431, 1, 1, "", "deserialize"], [432, 1, 1, "", "diff"], [433, 1, 1, "", "dot"], [434, 1, 1, "", "drop_nans"], [435, 1, 1, "", "drop_nulls"], [481, 1, 1, "", "entropy"], [482, 1, 1, "", "eq"], [483, 1, 1, "", "eq_missing"], [484, 1, 1, "", "ewm_mean"], [485, 1, 1, "", "ewm_mean_by"], [486, 1, 1, "", "ewm_std"], [487, 1, 1, "", "ewm_var"], [488, 1, 1, "", "exclude"], [489, 1, 1, "", "exp"], [490, 1, 1, "", "explode"], [491, 1, 1, "", "extend_constant"], [492, 1, 1, "", "fill_nan"], [493, 1, 1, "", "fill_null"], [494, 1, 1, "", "filter"], [495, 1, 1, "", "first"], [496, 1, 1, "", "flatten"], [497, 1, 1, "", "floor"], [498, 1, 1, "", "floordiv"], [499, 1, 1, "", "forward_fill"], [500, 1, 1, "", "from_json"], [501, 1, 1, "", "gather"], [502, 1, 1, "", "gather_every"], [503, 1, 1, "", "ge"], [504, 1, 1, "", "get"], [505, 1, 1, "", "gt"], [506, 1, 1, "", "has_nulls"], [507, 1, 1, "", "hash"], [508, 1, 1, "", "head"], [509, 1, 1, "", "hist"], [510, 1, 1, "", "implode"], [511, 1, 1, "", "index_of"], [512, 1, 1, "", "inspect"], [513, 1, 1, "", "interpolate"], [514, 1, 1, "", "interpolate_by"], [515, 1, 1, "", "is_between"], [516, 1, 1, "", "is_duplicated"], [517, 1, 1, "", "is_finite"], [518, 1, 1, "", "is_first_distinct"], [519, 1, 1, "", "is_in"], [520, 1, 1, "", "is_infinite"], [521, 1, 1, "", "is_last_distinct"], [522, 1, 1, "", "is_nan"], [523, 1, 1, "", "is_not_nan"], [524, 1, 1, "", "is_not_null"], [525, 1, 1, "", "is_null"], [526, 1, 1, "", "is_unique"], [527, 1, 1, "", "kurtosis"], [528, 1, 1, "", "last"], [529, 1, 1, "", "le"], [530, 1, 1, "", "len"], [531, 1, 1, "", "limit"], [572, 1, 1, "", "log"], [573, 1, 1, "", "log10"], [574, 1, 1, "", "log1p"], [575, 1, 1, "", "lower_bound"], [576, 1, 1, "", "lt"], [577, 1, 1, "", "map_batches"], [578, 1, 1, "", "map_elements"], [579, 1, 1, "", "max"], [580, 1, 1, "", "mean"], [581, 1, 1, "", "median"], [597, 1, 1, "", "min"], [598, 1, 1, "", "mod"], [599, 1, 1, "", "mode"], [600, 1, 1, "", "mul"], [601, 1, 1, "", "n_unique"], [611, 1, 1, "", "nan_max"], [612, 1, 1, "", "nan_min"], [613, 1, 1, "", "ne"], [614, 1, 1, "", "ne_missing"], [615, 1, 1, "", "neg"], [616, 1, 1, "", "not_"], [617, 1, 1, "", "null_count"], [618, 1, 1, "", "or_"], [619, 1, 1, "", "over"], [620, 1, 1, "", "pct_change"], [621, 1, 1, "", "peak_max"], [622, 1, 1, "", "peak_min"], [623, 1, 1, "", "pipe"], [624, 1, 1, "", "pow"], [625, 1, 1, "", "product"], [626, 1, 1, "", "qcut"], [627, 1, 1, "", "quantile"], [628, 1, 1, "", "radians"], [629, 1, 1, "", "rank"], [630, 1, 1, "", "rechunk"], [631, 1, 1, "", "reinterpret"], [632, 1, 1, "", "repeat_by"], [633, 1, 1, "", "replace"], [634, 1, 1, "", "replace_strict"], [635, 1, 1, "", "reshape"], [636, 1, 1, "", "reverse"], [637, 1, 1, "", "rle"], [638, 1, 1, "", "rle_id"], [639, 1, 1, "", "rolling"], [640, 1, 1, "", "rolling_map"], [641, 1, 1, "", "rolling_max"], [642, 1, 1, "", "rolling_max_by"], [643, 1, 1, "", "rolling_mean"], [644, 1, 1, "", "rolling_mean_by"], [645, 1, 1, "", "rolling_median"], [646, 1, 1, "", "rolling_median_by"], [647, 1, 1, "", "rolling_min"], [648, 1, 1, "", "rolling_min_by"], [649, 1, 1, "", "rolling_quantile"], [650, 1, 1, "", "rolling_quantile_by"], [651, 1, 1, "", "rolling_skew"], [652, 1, 1, "", "rolling_std"], [653, 1, 1, "", "rolling_std_by"], [654, 1, 1, "", "rolling_sum"], [655, 1, 1, "", "rolling_sum_by"], [656, 1, 1, "", "rolling_var"], [657, 1, 1, "", "rolling_var_by"], [658, 1, 1, "", "round"], [659, 1, 1, "", "round_sig_figs"], [660, 1, 1, "", "sample"], [661, 1, 1, "", "search_sorted"], [662, 1, 1, "", "set_sorted"], [663, 1, 1, "", "shift"], [664, 1, 1, "", "shrink_dtype"], [665, 1, 1, "", "shuffle"], [666, 1, 1, "", "sign"], [667, 1, 1, "", "sin"], [668, 1, 1, "", "sinh"], [669, 1, 1, "", "skew"], [670, 1, 1, "", "slice"], [671, 1, 1, "", "sort"], [672, 1, 1, "", "sort_by"], [673, 1, 1, "", "sqrt"], [674, 1, 1, "", "std"], [729, 1, 1, "", "sub"], [730, 1, 1, "", "sum"], [731, 1, 1, "", "tail"], [732, 1, 1, "", "tan"], [733, 1, 1, "", "tanh"], [734, 1, 1, "", "to_physical"], [735, 1, 1, "", "top_k"], [736, 1, 1, "", "top_k_by"], [737, 1, 1, "", "truediv"], [738, 1, 1, "", "unique"], [739, 1, 1, "", "unique_counts"], [740, 1, 1, "", "upper_bound"], [741, 1, 1, "", "value_counts"], [742, 1, 1, "", "var"], [743, 1, 1, "", "where"], [744, 1, 1, "", "xor"]], "polars.Expr.arr": [[367, 1, 1, "", "all"], [368, 1, 1, "", "any"], [369, 1, 1, "", "arg_max"], [370, 1, 1, "", "arg_min"], [371, 1, 1, "", "contains"], [372, 1, 1, "", "count_matches"], [373, 1, 1, "", "explode"], [374, 1, 1, "", "first"], [375, 1, 1, "", "get"], [376, 1, 1, "", "join"], [377, 1, 1, "", "last"], [378, 1, 1, "", "max"], [379, 1, 1, "", "median"], [380, 1, 1, "", "min"], [381, 1, 1, "", "n_unique"], [382, 1, 1, "", "reverse"], [383, 1, 1, "", "shift"], [384, 1, 1, "", "sort"], [385, 1, 1, "", "std"], [386, 1, 1, "", "sum"], [387, 1, 1, "", "to_list"], [388, 1, 1, "", "to_struct"], [389, 1, 1, "", "unique"], [390, 1, 1, "", "var"]], "polars.Expr.bin": [[392, 1, 1, "", "contains"], [393, 1, 1, "", "decode"], [394, 1, 1, "", "encode"], [395, 1, 1, "", "ends_with"], [396, 1, 1, "", "reinterpret"], [397, 1, 1, "", "size"], [398, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[411, 1, 1, "", "ends_with"], [412, 1, 1, "", "get_categories"], [413, 1, 1, "", "len_bytes"], [414, 1, 1, "", "len_chars"], [415, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[436, 1, 1, "", "add_business_days"], [437, 1, 1, "", "base_utc_offset"], [438, 1, 1, "", "cast_time_unit"], [439, 1, 1, "", "century"], [440, 1, 1, "", "combine"], [441, 1, 1, "", "convert_time_zone"], [442, 1, 1, "", "date"], [443, 1, 1, "", "datetime"], [444, 1, 1, "", "day"], [445, 1, 1, "", "dst_offset"], [446, 1, 1, "", "epoch"], [447, 1, 1, "", "hour"], [448, 1, 1, "", "is_leap_year"], [449, 1, 1, "", "iso_year"], [450, 1, 1, "", "microsecond"], [451, 1, 1, "", "millennium"], [452, 1, 1, "", "millisecond"], [453, 1, 1, "", "minute"], [454, 1, 1, "", "month"], [455, 1, 1, "", "month_end"], [456, 1, 1, "", "month_start"], [457, 1, 1, "", "nanosecond"], [458, 1, 1, "", "offset_by"], [459, 1, 1, "", "ordinal_day"], [460, 1, 1, "", "quarter"], [461, 1, 1, "", "replace"], [462, 1, 1, "", "replace_time_zone"], [463, 1, 1, "", "round"], [464, 1, 1, "", "second"], [465, 1, 1, "", "strftime"], [466, 1, 1, "", "time"], [467, 1, 1, "", "timestamp"], [468, 1, 1, "", "to_string"], [469, 1, 1, "", "total_days"], [470, 1, 1, "", "total_hours"], [471, 1, 1, "", "total_microseconds"], [472, 1, 1, "", "total_milliseconds"], [473, 1, 1, "", "total_minutes"], [474, 1, 1, "", "total_nanoseconds"], [475, 1, 1, "", "total_seconds"], [476, 1, 1, "", "truncate"], [477, 1, 1, "", "week"], [478, 1, 1, "", "weekday"], [479, 1, 1, "", "with_time_unit"], [480, 1, 1, "", "year"]], "polars.Expr.list": [[532, 1, 1, "", "all"], [533, 1, 1, "", "any"], [534, 1, 1, "", "arg_max"], [535, 1, 1, "", "arg_min"], [536, 1, 1, "", "concat"], [537, 1, 1, "", "contains"], [538, 1, 1, "", "count_matches"], [539, 1, 1, "", "diff"], [540, 1, 1, "", "drop_nulls"], [541, 1, 1, "", "eval"], [542, 1, 1, "", "explode"], [543, 1, 1, "", "first"], [544, 1, 1, "", "gather"], [545, 1, 1, "", "gather_every"], [546, 1, 1, "", "get"], [547, 1, 1, "", "head"], [548, 1, 1, "", "join"], [549, 1, 1, "", "last"], [550, 1, 1, "", "len"], [551, 1, 1, "", "max"], [552, 1, 1, "", "mean"], [553, 1, 1, "", "median"], [554, 1, 1, "", "min"], [555, 1, 1, "", "n_unique"], [556, 1, 1, "", "reverse"], [557, 1, 1, "", "sample"], [558, 1, 1, "", "set_difference"], [559, 1, 1, "", "set_intersection"], [560, 1, 1, "", "set_symmetric_difference"], [561, 1, 1, "", "set_union"], [562, 1, 1, "", "shift"], [563, 1, 1, "", "slice"], [564, 1, 1, "", "sort"], [565, 1, 1, "", "std"], [566, 1, 1, "", "sum"], [567, 1, 1, "", "tail"], [568, 1, 1, "", "to_array"], [569, 1, 1, "", "to_struct"], [570, 1, 1, "", "unique"], [571, 1, 1, "", "var"]], "polars.Expr.meta": [[582, 1, 1, "", "eq"], [583, 1, 1, "", "has_multiple_outputs"], [584, 1, 1, "", "is_column"], [585, 1, 1, "", "is_column_selection"], [586, 1, 1, "", "is_literal"], [587, 1, 1, "", "is_regex_projection"], [588, 1, 1, "", "ne"], [589, 1, 1, "", "output_name"], [590, 1, 1, "", "pop"], [591, 1, 1, "", "root_names"], [592, 1, 1, "", "serialize"], [593, 1, 1, "", "show_graph"], [594, 1, 1, "", "tree_format"], [595, 1, 1, "", "undo_aliases"], [596, 1, 1, "", "write_json"]], "polars.Expr.name": [[602, 1, 1, "", "keep"], [603, 1, 1, "", "map"], [604, 1, 1, "", "map_fields"], [605, 1, 1, "", "prefix"], [606, 1, 1, "", "prefix_fields"], [607, 1, 1, "", "suffix"], [608, 1, 1, "", "suffix_fields"], [609, 1, 1, "", "to_lowercase"], [610, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[675, 1, 1, "", "concat"], [676, 1, 1, "", "contains"], [677, 1, 1, "", "contains_any"], [678, 1, 1, "", "count_matches"], [679, 1, 1, "", "decode"], [680, 1, 1, "", "encode"], [681, 1, 1, "", "ends_with"], [682, 1, 1, "", "escape_regex"], [683, 1, 1, "", "explode"], [684, 1, 1, "", "extract"], [685, 1, 1, "", "extract_all"], [686, 1, 1, "", "extract_groups"], [687, 1, 1, "", "extract_many"], [688, 1, 1, "", "find"], [689, 1, 1, "", "find_many"], [690, 1, 1, "", "head"], [691, 1, 1, "", "join"], [692, 1, 1, "", "json_decode"], [693, 1, 1, "", "json_path_match"], [694, 1, 1, "", "len_bytes"], [695, 1, 1, "", "len_chars"], [696, 1, 1, "", "normalize"], [697, 1, 1, "", "pad_end"], [698, 1, 1, "", "pad_start"], [699, 1, 1, "", "replace"], [700, 1, 1, "", "replace_all"], [701, 1, 1, "", "replace_many"], [702, 1, 1, "", "reverse"], [703, 1, 1, "", "slice"], [704, 1, 1, "", "split"], [705, 1, 1, "", "split_exact"], [706, 1, 1, "", "splitn"], [707, 1, 1, "", "starts_with"], [708, 1, 1, "", "strip_chars"], [709, 1, 1, "", "strip_chars_end"], [710, 1, 1, "", "strip_chars_start"], [711, 1, 1, "", "strip_prefix"], [712, 1, 1, "", "strip_suffix"], [713, 1, 1, "", "strptime"], [714, 1, 1, "", "tail"], [715, 1, 1, "", "to_date"], [716, 1, 1, "", "to_datetime"], [717, 1, 1, "", "to_decimal"], [718, 1, 1, "", "to_integer"], [719, 1, 1, "", "to_lowercase"], [720, 1, 1, "", "to_time"], [721, 1, 1, "", "to_titlecase"], [722, 1, 1, "", "to_uppercase"], [723, 1, 1, "", "zfill"]], "polars.Expr.struct": [[724, 1, 1, "", "field"], [725, 1, 1, "", "json_encode"], [726, 1, 1, "", "rename_fields"], [727, 1, 1, "", "unnest"], [728, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[845, 1, 1, "", "approx_n_unique"], [846, 1, 1, "", "bottom_k"], [847, 1, 1, "", "cache"], [848, 1, 1, "", "cast"], [849, 1, 1, "", "clear"], [850, 1, 1, "", "clone"], [851, 1, 1, "", "collect"], [852, 1, 1, "", "collect_async"], [853, 1, 1, "", "collect_schema"], [854, 2, 1, "", "columns"], [855, 1, 1, "", "count"], [856, 1, 1, "", "describe"], [857, 1, 1, "", "deserialize"], [858, 1, 1, "", "drop"], [859, 1, 1, "", "drop_nans"], [860, 1, 1, "", "drop_nulls"], [861, 2, 1, "", "dtypes"], [862, 1, 1, "", "explain"], [863, 1, 1, "", "explode"], [864, 1, 1, "", "fill_nan"], [865, 1, 1, "", "fill_null"], [866, 1, 1, "", "filter"], [867, 1, 1, "", "first"], [868, 1, 1, "", "gather_every"], [869, 1, 1, "", "group_by"], [870, 1, 1, "", "group_by_dynamic"], [871, 1, 1, "", "head"], [872, 1, 1, "", "inspect"], [873, 1, 1, "", "interpolate"], [874, 1, 1, "", "join"], [875, 1, 1, "", "join_asof"], [876, 1, 1, "", "join_where"], [877, 1, 1, "", "last"], [878, 1, 1, "", "lazy"], [879, 1, 1, "", "limit"], [880, 1, 1, "", "map_batches"], [881, 1, 1, "", "max"], [882, 1, 1, "", "mean"], [883, 1, 1, "", "median"], [884, 1, 1, "", "melt"], [885, 1, 1, "", "merge_sorted"], [886, 1, 1, "", "min"], [887, 1, 1, "", "null_count"], [888, 1, 1, "", "pipe"], [889, 1, 1, "", "profile"], [890, 1, 1, "", "quantile"], [891, 1, 1, "", "remove"], [892, 1, 1, "", "rename"], [893, 1, 1, "", "reverse"], [894, 1, 1, "", "rolling"], [895, 2, 1, "", "schema"], [896, 1, 1, "", "select"], [897, 1, 1, "", "select_seq"], [898, 1, 1, "", "serialize"], [899, 1, 1, "", "set_sorted"], [900, 1, 1, "", "shift"], [901, 1, 1, "", "show_graph"], [46, 1, 1, "", "sink_csv"], [47, 1, 1, "", "sink_ipc"], [48, 1, 1, "", "sink_ndjson"], [49, 1, 1, "", "sink_parquet"], [902, 1, 1, "", "slice"], [903, 1, 1, "", "sort"], [904, 1, 1, "", "sql"], [905, 1, 1, "", "std"], [906, 1, 1, "", "sum"], [907, 1, 1, "", "tail"], [908, 1, 1, "", "top_k"], [909, 1, 1, "", "unique"], [910, 1, 1, "", "unnest"], [911, 1, 1, "", "unpivot"], [912, 1, 1, "", "update"], [913, 1, 1, "", "var"], [914, 2, 1, "", "width"], [915, 1, 1, "", "with_columns"], [916, 1, 1, "", "with_columns_seq"], [917, 1, 1, "", "with_context"], [918, 1, 1, "", "with_row_count"], [919, 1, 1, "", "with_row_index"]], "polars.SQLContext": [[1368, 1, 1, "", "__enter__"], [1368, 1, 1, "", "__exit__"], [1368, 1, 1, "", "__init__"], [1349, 1, 1, "", "execute"], [1350, 1, 1, "", "execute_global"], [1351, 1, 1, "", "register"], [1352, 1, 1, "", "register_globals"], [1353, 1, 1, "", "register_many"], [1354, 1, 1, "", "tables"], [1355, 1, 1, "", "unregister"]], "polars.Series": [[953, 1, 1, "", "__array__"], [954, 1, 1, "", "__arrow_c_stream__"], [955, 1, 1, "", "__getitem__"], [956, 1, 1, "", "abs"], [957, 1, 1, "", "alias"], [958, 1, 1, "", "all"], [959, 1, 1, "", "any"], [960, 1, 1, "", "append"], [961, 1, 1, "", "approx_n_unique"], [962, 1, 1, "", "arccos"], [963, 1, 1, "", "arccosh"], [964, 1, 1, "", "arcsin"], [965, 1, 1, "", "arcsinh"], [966, 1, 1, "", "arctan"], [967, 1, 1, "", "arctanh"], [968, 1, 1, "", "arg_max"], [969, 1, 1, "", "arg_min"], [970, 1, 1, "", "arg_sort"], [971, 1, 1, "", "arg_true"], [972, 1, 1, "", "arg_unique"], [1004, 1, 1, "", "bitwise_and"], [1005, 1, 1, "", "bitwise_count_ones"], [1006, 1, 1, "", "bitwise_count_zeros"], [1007, 1, 1, "", "bitwise_leading_ones"], [1008, 1, 1, "", "bitwise_leading_zeros"], [1009, 1, 1, "", "bitwise_or"], [1010, 1, 1, "", "bitwise_trailing_ones"], [1011, 1, 1, "", "bitwise_trailing_zeros"], [1012, 1, 1, "", "bitwise_xor"], [1013, 1, 1, "", "bottom_k"], [1014, 1, 1, "", "cast"], [1023, 1, 1, "", "cbrt"], [1024, 1, 1, "", "ceil"], [1025, 1, 1, "", "chunk_lengths"], [1026, 1, 1, "", "clear"], [1027, 1, 1, "", "clip"], [1028, 1, 1, "", "clone"], [1029, 1, 1, "", "cos"], [1030, 1, 1, "", "cosh"], [1031, 1, 1, "", "cot"], [1032, 1, 1, "", "count"], [1033, 1, 1, "", "cum_count"], [1034, 1, 1, "", "cum_max"], [1035, 1, 1, "", "cum_min"], [1036, 1, 1, "", "cum_prod"], [1037, 1, 1, "", "cum_sum"], [1038, 1, 1, "", "cumulative_eval"], [1039, 1, 1, "", "cut"], [1040, 1, 1, "", "describe"], [1041, 1, 1, "", "diff"], [1042, 1, 1, "", "dot"], [1043, 1, 1, "", "drop_nans"], [1044, 1, 1, "", "drop_nulls"], [1094, 2, 1, "", "dtype"], [1095, 1, 1, "", "entropy"], [1096, 1, 1, "", "eq"], [1097, 1, 1, "", "eq_missing"], [1098, 1, 1, "", "equals"], [1099, 1, 1, "", "estimated_size"], [1100, 1, 1, "", "ewm_mean"], [1101, 1, 1, "", "ewm_mean_by"], [1102, 1, 1, "", "ewm_std"], [1103, 1, 1, "", "ewm_var"], [1104, 1, 1, "", "exp"], [1105, 1, 1, "", "explode"], [1106, 1, 1, "", "extend"], [1107, 1, 1, "", "extend_constant"], [1108, 1, 1, "", "fill_nan"], [1109, 1, 1, "", "fill_null"], [1110, 1, 1, "", "filter"], [1111, 1, 1, "", "first"], [1112, 2, 1, "", "flags"], [1113, 1, 1, "", "floor"], [1114, 1, 1, "", "gather"], [1115, 1, 1, "", "gather_every"], [1116, 1, 1, "", "ge"], [1117, 1, 1, "", "get_chunks"], [1118, 1, 1, "", "gt"], [1119, 1, 1, "", "has_nulls"], [1120, 1, 1, "", "has_validity"], [1121, 1, 1, "", "hash"], [1122, 1, 1, "", "head"], [1123, 1, 1, "", "hist"], [1124, 1, 1, "", "implode"], [1125, 1, 1, "", "index_of"], [1126, 1, 1, "", "interpolate"], [1127, 1, 1, "", "interpolate_by"], [1128, 1, 1, "", "is_between"], [1129, 1, 1, "", "is_duplicated"], [1130, 1, 1, "", "is_empty"], [1131, 1, 1, "", "is_finite"], [1132, 1, 1, "", "is_first_distinct"], [1133, 1, 1, "", "is_in"], [1134, 1, 1, "", "is_infinite"], [1135, 1, 1, "", "is_last_distinct"], [1136, 1, 1, "", "is_nan"], [1137, 1, 1, "", "is_not_nan"], [1138, 1, 1, "", "is_not_null"], [1139, 1, 1, "", "is_null"], [1140, 1, 1, "", "is_sorted"], [1141, 1, 1, "", "is_unique"], [1142, 1, 1, "", "item"], [1143, 1, 1, "", "kurtosis"], [1144, 1, 1, "", "last"], [1145, 1, 1, "", "le"], [1146, 1, 1, "", "len"], [1147, 1, 1, "", "limit"], [1188, 1, 1, "", "log"], [1189, 1, 1, "", "log10"], [1190, 1, 1, "", "log1p"], [1191, 1, 1, "", "lower_bound"], [1192, 1, 1, "", "lt"], [1193, 1, 1, "", "map_elements"], [1194, 1, 1, "", "max"], [1195, 1, 1, "", "mean"], [1196, 1, 1, "", "median"], [1197, 1, 1, "", "min"], [1198, 1, 1, "", "mode"], [1199, 1, 1, "", "n_chunks"], [1200, 1, 1, "", "n_unique"], [1201, 2, 1, "", "name"], [1202, 1, 1, "", "nan_max"], [1203, 1, 1, "", "nan_min"], [1204, 1, 1, "", "ne"], [1205, 1, 1, "", "ne_missing"], [1206, 1, 1, "", "new_from_index"], [1207, 1, 1, "", "not_"], [1208, 1, 1, "", "null_count"], [1209, 1, 1, "", "pct_change"], [1210, 1, 1, "", "peak_max"], [1211, 1, 1, "", "peak_min"], [1345, 2, 1, "", "plot"], [1212, 1, 1, "", "pow"], [1213, 1, 1, "", "product"], [1214, 1, 1, "", "qcut"], [1215, 1, 1, "", "quantile"], [1216, 1, 1, "", "rank"], [1217, 1, 1, "", "rechunk"], [1218, 1, 1, "", "reinterpret"], [1219, 1, 1, "", "rename"], [1220, 1, 1, "", "replace"], [1221, 1, 1, "", "replace_strict"], [1222, 1, 1, "", "reshape"], [1223, 1, 1, "", "reverse"], [1224, 1, 1, "", "rle"], [1225, 1, 1, "", "rle_id"], [1226, 1, 1, "", "rolling_map"], [1227, 1, 1, "", "rolling_max"], [1228, 1, 1, "", "rolling_mean"], [1229, 1, 1, "", "rolling_median"], [1230, 1, 1, "", "rolling_min"], [1231, 1, 1, "", "rolling_quantile"], [1232, 1, 1, "", "rolling_skew"], [1233, 1, 1, "", "rolling_std"], [1234, 1, 1, "", "rolling_sum"], [1235, 1, 1, "", "rolling_var"], [1236, 1, 1, "", "round"], [1237, 1, 1, "", "round_sig_figs"], [1238, 1, 1, "", "sample"], [1239, 1, 1, "", "scatter"], [1240, 1, 1, "", "search_sorted"], [1241, 1, 1, "", "set"], [1242, 1, 1, "", "set_sorted"], [1243, 2, 1, "", "shape"], [1244, 1, 1, "", "shift"], [1245, 1, 1, "", "shrink_dtype"], [1246, 1, 1, "", "shrink_to_fit"], [1247, 1, 1, "", "shuffle"], [1248, 1, 1, "", "sign"], [1249, 1, 1, "", "sin"], [1250, 1, 1, "", "sinh"], [1251, 1, 1, "", "skew"], [1252, 1, 1, "", "slice"], [1253, 1, 1, "", "sort"], [1254, 1, 1, "", "sqrt"], [1255, 1, 1, "", "std"], [1311, 1, 1, "", "sum"], [1312, 1, 1, "", "tail"], [1313, 1, 1, "", "tan"], [1314, 1, 1, "", "tanh"], [1315, 1, 1, "", "to_arrow"], [1316, 1, 1, "", "to_dummies"], [1317, 1, 1, "", "to_frame"], [1318, 1, 1, "", "to_init_repr"], [1319, 1, 1, "", "to_jax"], [1320, 1, 1, "", "to_list"], [1321, 1, 1, "", "to_numpy"], [1322, 1, 1, "", "to_pandas"], [1323, 1, 1, "", "to_physical"], [1324, 1, 1, "", "to_torch"], [1325, 1, 1, "", "top_k"], [1326, 1, 1, "", "unique"], [1327, 1, 1, "", "unique_counts"], [1328, 1, 1, "", "upper_bound"], [1329, 1, 1, "", "value_counts"], [1330, 1, 1, "", "var"], [1331, 1, 1, "", "zip_with"]], "polars.Series.arr": [[973, 1, 1, "", "all"], [974, 1, 1, "", "any"], [975, 1, 1, "", "arg_max"], [976, 1, 1, "", "arg_min"], [977, 1, 1, "", "contains"], [978, 1, 1, "", "count_matches"], [979, 1, 1, "", "explode"], [980, 1, 1, "", "first"], [981, 1, 1, "", "get"], [982, 1, 1, "", "join"], [983, 1, 1, "", "last"], [984, 1, 1, "", "max"], [985, 1, 1, "", "median"], [986, 1, 1, "", "min"], [987, 1, 1, "", "n_unique"], [988, 1, 1, "", "reverse"], [989, 1, 1, "", "shift"], [990, 1, 1, "", "sort"], [991, 1, 1, "", "std"], [992, 1, 1, "", "sum"], [993, 1, 1, "", "to_list"], [994, 1, 1, "", "to_struct"], [995, 1, 1, "", "unique"], [996, 1, 1, "", "var"]], "polars.Series.bin": [[997, 1, 1, "", "contains"], [998, 1, 1, "", "decode"], [999, 1, 1, "", "encode"], [1000, 1, 1, "", "ends_with"], [1001, 1, 1, "", "reinterpret"], [1002, 1, 1, "", "size"], [1003, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1015, 1, 1, "", "ends_with"], [1016, 1, 1, "", "get_categories"], [1017, 1, 1, "", "is_local"], [1018, 1, 1, "", "len_bytes"], [1019, 1, 1, "", "len_chars"], [1020, 1, 1, "", "starts_with"], [1021, 1, 1, "", "to_local"], [1022, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1045, 1, 1, "", "add_business_days"], [1046, 1, 1, "", "base_utc_offset"], [1047, 1, 1, "", "cast_time_unit"], [1048, 1, 1, "", "century"], [1049, 1, 1, "", "combine"], [1050, 1, 1, "", "convert_time_zone"], [1051, 1, 1, "", "date"], [1052, 1, 1, "", "datetime"], [1053, 1, 1, "", "day"], [1054, 1, 1, "", "dst_offset"], [1055, 1, 1, "", "epoch"], [1056, 1, 1, "", "hour"], [1057, 1, 1, "", "is_leap_year"], [1058, 1, 1, "", "iso_year"], [1059, 1, 1, "", "max"], [1060, 1, 1, "", "mean"], [1061, 1, 1, "", "median"], [1062, 1, 1, "", "microsecond"], [1063, 1, 1, "", "millennium"], [1064, 1, 1, "", "millisecond"], [1065, 1, 1, "", "min"], [1066, 1, 1, "", "minute"], [1067, 1, 1, "", "month"], [1068, 1, 1, "", "month_end"], [1069, 1, 1, "", "month_start"], [1070, 1, 1, "", "nanosecond"], [1071, 1, 1, "", "offset_by"], [1072, 1, 1, "", "ordinal_day"], [1073, 1, 1, "", "quarter"], [1074, 1, 1, "", "replace"], [1075, 1, 1, "", "replace_time_zone"], [1076, 1, 1, "", "round"], [1077, 1, 1, "", "second"], [1078, 1, 1, "", "strftime"], [1079, 1, 1, "", "time"], [1080, 1, 1, "", "timestamp"], [1081, 1, 1, "", "to_string"], [1082, 1, 1, "", "total_days"], [1083, 1, 1, "", "total_hours"], [1084, 1, 1, "", "total_microseconds"], [1085, 1, 1, "", "total_milliseconds"], [1086, 1, 1, "", "total_minutes"], [1087, 1, 1, "", "total_nanoseconds"], [1088, 1, 1, "", "total_seconds"], [1089, 1, 1, "", "truncate"], [1090, 1, 1, "", "week"], [1091, 1, 1, "", "weekday"], [1092, 1, 1, "", "with_time_unit"], [1093, 1, 1, "", "year"]], "polars.Series.list": [[1148, 1, 1, "", "all"], [1149, 1, 1, "", "any"], [1150, 1, 1, "", "arg_max"], [1151, 1, 1, "", "arg_min"], [1152, 1, 1, "", "concat"], [1153, 1, 1, "", "contains"], [1154, 1, 1, "", "count_matches"], [1155, 1, 1, "", "diff"], [1156, 1, 1, "", "drop_nulls"], [1157, 1, 1, "", "eval"], [1158, 1, 1, "", "explode"], [1159, 1, 1, "", "first"], [1160, 1, 1, "", "gather"], [1161, 1, 1, "", "gather_every"], [1162, 1, 1, "", "get"], [1163, 1, 1, "", "head"], [1164, 1, 1, "", "join"], [1165, 1, 1, "", "last"], [1166, 1, 1, "", "len"], [1167, 1, 1, "", "max"], [1168, 1, 1, "", "mean"], [1169, 1, 1, "", "median"], [1170, 1, 1, "", "min"], [1171, 1, 1, "", "n_unique"], [1172, 1, 1, "", "reverse"], [1173, 1, 1, "", "sample"], [1174, 1, 1, "", "set_difference"], [1175, 1, 1, "", "set_intersection"], [1176, 1, 1, "", "set_symmetric_difference"], [1177, 1, 1, "", "set_union"], [1178, 1, 1, "", "shift"], [1179, 1, 1, "", "slice"], [1180, 1, 1, "", "sort"], [1181, 1, 1, "", "std"], [1182, 1, 1, "", "sum"], [1183, 1, 1, "", "tail"], [1184, 1, 1, "", "to_array"], [1185, 1, 1, "", "to_struct"], [1186, 1, 1, "", "unique"], [1187, 1, 1, "", "var"]], "polars.Series.str": [[1256, 1, 1, "", "concat"], [1257, 1, 1, "", "contains"], [1258, 1, 1, "", "contains_any"], [1259, 1, 1, "", "count_matches"], [1260, 1, 1, "", "decode"], [1261, 1, 1, "", "encode"], [1262, 1, 1, "", "ends_with"], [1263, 1, 1, "", "escape_regex"], [1264, 1, 1, "", "explode"], [1265, 1, 1, "", "extract"], [1266, 1, 1, "", "extract_all"], [1267, 1, 1, "", "extract_groups"], [1268, 1, 1, "", "extract_many"], [1269, 1, 1, "", "find"], [1270, 1, 1, "", "find_many"], [1271, 1, 1, "", "head"], [1272, 1, 1, "", "join"], [1273, 1, 1, "", "json_decode"], [1274, 1, 1, "", "json_path_match"], [1275, 1, 1, "", "len_bytes"], [1276, 1, 1, "", "len_chars"], [1277, 1, 1, "", "normalize"], [1278, 1, 1, "", "pad_end"], [1279, 1, 1, "", "pad_start"], [1280, 1, 1, "", "replace"], [1281, 1, 1, "", "replace_all"], [1282, 1, 1, "", "replace_many"], [1283, 1, 1, "", "reverse"], [1284, 1, 1, "", "slice"], [1285, 1, 1, "", "split"], [1286, 1, 1, "", "split_exact"], [1287, 1, 1, "", "splitn"], [1288, 1, 1, "", "starts_with"], [1289, 1, 1, "", "strip_chars"], [1290, 1, 1, "", "strip_chars_end"], [1291, 1, 1, "", "strip_chars_start"], [1292, 1, 1, "", "strip_prefix"], [1293, 1, 1, "", "strip_suffix"], [1294, 1, 1, "", "strptime"], [1295, 1, 1, "", "tail"], [1296, 1, 1, "", "to_date"], [1297, 1, 1, "", "to_datetime"], [1298, 1, 1, "", "to_decimal"], [1299, 1, 1, "", "to_integer"], [1300, 1, 1, "", "to_lowercase"], [1301, 1, 1, "", "to_time"], [1302, 1, 1, "", "to_titlecase"], [1303, 1, 1, "", "to_uppercase"], [1304, 1, 1, "", "zfill"]], "polars.Series.struct": [[1305, 1, 1, "", "field"], [1306, 3, 1, "", "fields"], [1307, 1, 1, "", "json_encode"], [1308, 1, 1, "", "rename_fields"], [1309, 3, 1, "", "schema"], [1310, 1, 1, "", "unnest"]], "polars.StringCache": [[50, 1, 1, "", "__init__"]], "polars.api": [[52, 4, 1, "", "register_dataframe_namespace"], [53, 4, 1, "", "register_expr_namespace"], [54, 4, 1, "", "register_lazyframe_namespace"], [55, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[183, 0, 1, "", "CatalogInfo"], [184, 0, 1, "", "ColumnInfo"], [185, 5, 1, "", "DataSourceFormat"], [186, 0, 1, "", "NamespaceInfo"], [187, 0, 1, "", "TableInfo"], [189, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[183, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[184, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[186, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[187, 1, 1, "", "__init__"], [188, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[317, 1, 1, "", "__iter__"], [318, 1, 1, "", "agg"], [319, 1, 1, "", "all"], [320, 1, 1, "", "count"], [321, 1, 1, "", "first"], [322, 1, 1, "", "head"], [323, 1, 1, "", "last"], [324, 1, 1, "", "len"], [325, 1, 1, "", "map_groups"], [326, 1, 1, "", "max"], [327, 1, 1, "", "mean"], [328, 1, 1, "", "median"], [329, 1, 1, "", "min"], [330, 1, 1, "", "n_unique"], [331, 1, 1, "", "quantile"], [332, 1, 1, "", "sum"], [333, 1, 1, "", "tail"]], "polars.datatypes": [[60, 0, 1, "", "Array"], [61, 0, 1, "", "Binary"], [62, 0, 1, "", "Boolean"], [63, 0, 1, "", "Categorical"], [64, 0, 1, "", "DataType"], [65, 0, 1, "", "Date"], [66, 0, 1, "", "Datetime"], [67, 0, 1, "", "Decimal"], [68, 0, 1, "", "Duration"], [69, 0, 1, "", "Enum"], [70, 0, 1, "", "Field"], [71, 0, 1, "", "Float32"], [72, 0, 1, "", "Float64"], [73, 0, 1, "", "Int128"], [74, 0, 1, "", "Int16"], [75, 0, 1, "", "Int32"], [76, 0, 1, "", "Int64"], [77, 0, 1, "", "Int8"], [78, 0, 1, "", "List"], [79, 0, 1, "", "Null"], [80, 0, 1, "", "Object"], [81, 0, 1, "", "String"], [82, 0, 1, "", "Struct"], [83, 0, 1, "", "Time"], [84, 0, 1, "", "UInt16"], [85, 0, 1, "", "UInt32"], [86, 0, 1, "", "UInt64"], [87, 0, 1, "", "UInt8"], [88, 0, 1, "", "Unknown"], [89, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[60, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[61, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[62, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[63, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[64, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[65, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[77, 1, 1, "", "__init__"]], "polars.datatypes.List": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[80, 1, 1, "", "__init__"]], "polars.datatypes.String": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[83, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[84, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[85, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[86, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[88, 1, 1, "", "__init__"]], "polars.exceptions": [[93, 6, 1, "", "CategoricalRemappingWarning"], [94, 6, 1, "", "ChronoFormatWarning"], [95, 6, 1, "", "ColumnNotFoundError"], [96, 6, 1, "", "ComputeError"], [97, 6, 1, "", "CustomUFuncWarning"], [98, 6, 1, "", "DataOrientationWarning"], [99, 6, 1, "", "DuplicateError"], [100, 6, 1, "", "InvalidOperationError"], [101, 6, 1, "", "MapWithoutReturnDtypeWarning"], [102, 6, 1, "", "ModuleUpgradeRequiredError"], [103, 6, 1, "", "NoDataError"], [104, 6, 1, "", "NoRowsReturnedError"], [105, 6, 1, "", "OutOfBoundsError"], [106, 6, 1, "", "PanicException"], [107, 6, 1, "", "ParameterCollisionError"], [108, 6, 1, "", "PerformanceWarning"], [109, 6, 1, "", "PolarsError"], [110, 6, 1, "", "PolarsInefficientMapWarning"], [111, 6, 1, "", "PolarsWarning"], [112, 6, 1, "", "RowsError"], [113, 6, 1, "", "SQLInterfaceError"], [114, 6, 1, "", "SQLSyntaxError"], [115, 6, 1, "", "SchemaError"], [116, 6, 1, "", "SchemaFieldNotFoundError"], [117, 6, 1, "", "ShapeError"], [118, 6, 1, "", "StringCacheMismatchError"], [119, 6, 1, "", "StructFieldNotFoundError"], [120, 6, 1, "", "TooManyRowsReturnedError"], [121, 6, 1, "", "UnstableWarning"], [122, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[132, 1, 1, "", "next_batches"]], "polars.io.plugins": [[133, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[920, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[920, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[921, 1, 1, "", "agg"], [922, 1, 1, "", "all"], [923, 1, 1, "", "count"], [924, 1, 1, "", "first"], [925, 1, 1, "", "head"], [926, 1, 1, "", "last"], [927, 1, 1, "", "len"], [928, 1, 1, "", "map_groups"], [929, 1, 1, "", "max"], [930, 1, 1, "", "mean"], [931, 1, 1, "", "median"], [932, 1, 1, "", "min"], [933, 1, 1, "", "n_unique"], [934, 1, 1, "", "quantile"], [935, 1, 1, "", "sum"], [936, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[937, 1, 1, "", "cancel"], [938, 1, 1, "", "fetch"], [939, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[135, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[951, 4, 1, "", "all"], [951, 4, 1, "", "alpha"], [951, 4, 1, "", "alphanumeric"], [951, 4, 1, "", "binary"], [951, 4, 1, "", "boolean"], [951, 4, 1, "", "by_dtype"], [951, 4, 1, "", "by_index"], [951, 4, 1, "", "by_name"], [951, 4, 1, "", "categorical"], [951, 4, 1, "", "contains"], [951, 4, 1, "", "date"], [951, 4, 1, "", "datetime"], [951, 4, 1, "", "decimal"], [951, 4, 1, "", "digit"], [951, 4, 1, "", "duration"], [951, 4, 1, "", "ends_with"], [951, 4, 1, "", "exclude"], [951, 4, 1, "", "expand_selector"], [951, 4, 1, "", "first"], [951, 4, 1, "", "float"], [951, 4, 1, "", "integer"], [951, 4, 1, "", "is_selector"], [951, 4, 1, "", "last"], [951, 4, 1, "", "matches"], [951, 4, 1, "", "numeric"], [951, 4, 1, "", "signed_integer"], [951, 4, 1, "", "starts_with"], [951, 4, 1, "", "string"], [951, 4, 1, "", "temporal"], [951, 4, 1, "", "time"], [951, 4, 1, "", "unsigned_integer"]], "polars.testing": [[161, 4, 1, "", "assert_frame_equal"], [162, 4, 1, "", "assert_frame_not_equal"], [163, 4, 1, "", "assert_series_equal"], [164, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[165, 0, 1, "", "column"], [166, 4, 1, "", "columns"], [167, 4, 1, "", "create_list_strategy"], [168, 4, 1, "", "dataframes"], [169, 4, 1, "", "dtypes"], [170, 4, 1, "", "lists"], [171, 4, 1, "", "load_profile"], [172, 4, 1, "", "series"], [173, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[165, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 11, 37, 38, 39, 40, 45, 46, 55, 60, 70, 82, 92, 94, 100, 123, 130, 133, 138, 139, 140, 141, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 172, 199, 200, 211, 212, 215, 220, 223, 228, 229, 234, 240, 243, 244, 254, 261, 263, 267, 269, 271, 274, 277, 278, 285, 294, 297, 302, 304, 305, 306, 307, 308, 313, 314, 339, 376, 409, 441, 446, 465, 468, 488, 494, 498, 511, 527, 548, 577, 578, 590, 599, 604, 611, 612, 619, 620, 631, 638, 672, 676, 684, 685, 686, 688, 690, 699, 700, 703, 704, 706, 713, 714, 715, 716, 720, 724, 726, 728, 736, 745, 746, 747, 748, 753, 760, 763, 766, 767, 776, 777, 779, 780, 786, 791, 792, 793, 794, 796, 798, 799, 801, 808, 810, 812, 813, 814, 820, 826, 830, 846, 848, 859, 860, 869, 870, 874, 875, 884, 891, 896, 897, 903, 908, 909, 910, 911, 912, 915, 916, 928, 945, 950, 951, 955, 956, 957, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1053, 1054, 1055, 1057, 1059, 1060, 1061, 1063, 1064, 1065, 1068, 1069, 1072, 1074, 1076, 1077, 1078, 1081, 1089, 1091, 1092, 1093, 1094, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1117, 1119, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1340, 1345, 1349, 1353, 1356, 1363, 1364], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 45, 49, 51, 52, 53, 55, 59, 60, 67, 78, 124, 134, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 160, 165, 166, 167, 168, 169, 170, 172, 175, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 234, 235, 239, 241, 242, 243, 246, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 263, 264, 265, 267, 269, 271, 273, 274, 275, 276, 277, 284, 285, 286, 287, 289, 294, 295, 296, 297, 298, 299, 301, 303, 307, 309, 310, 313, 315, 316, 318, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 339, 342, 343, 347, 349, 350, 352, 356, 357, 358, 359, 360, 361, 364, 365, 366, 369, 370, 372, 375, 385, 388, 390, 397, 399, 404, 407, 410, 416, 417, 418, 419, 420, 421, 428, 429, 430, 434, 435, 436, 442, 443, 447, 450, 452, 453, 457, 461, 464, 466, 468, 471, 472, 474, 475, 479, 482, 483, 484, 485, 486, 487, 489, 491, 492, 493, 494, 497, 498, 500, 502, 503, 505, 507, 509, 513, 514, 517, 520, 522, 523, 524, 525, 527, 529, 534, 535, 538, 541, 544, 545, 546, 552, 553, 565, 569, 571, 572, 573, 574, 576, 577, 579, 580, 581, 585, 590, 593, 596, 597, 598, 600, 602, 611, 612, 613, 614, 615, 617, 618, 620, 623, 624, 626, 627, 628, 629, 633, 634, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 667, 668, 669, 673, 674, 675, 678, 683, 684, 685, 688, 689, 728, 729, 730, 732, 733, 734, 737, 742, 743, 745, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 764, 771, 775, 778, 784, 785, 787, 788, 789, 792, 795, 796, 797, 801, 803, 804, 808, 809, 816, 817, 818, 819, 820, 821, 826, 830, 845, 848, 849, 850, 853, 855, 856, 858, 859, 861, 862, 864, 865, 866, 868, 869, 870, 873, 874, 878, 880, 883, 884, 887, 889, 890, 891, 895, 896, 901, 903, 904, 905, 913, 915, 917, 918, 919, 921, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 945, 950, 951, 955, 962, 963, 964, 965, 966, 967, 968, 970, 972, 975, 981, 991, 994, 996, 1002, 1014, 1021, 1023, 1024, 1026, 1029, 1030, 1031, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1052, 1056, 1060, 1061, 1062, 1064, 1066, 1070, 1074, 1077, 1081, 1084, 1085, 1087, 1088, 1092, 1095, 1100, 1101, 1102, 1103, 1108, 1113, 1115, 1120, 1121, 1123, 1126, 1127, 1131, 1134, 1136, 1137, 1138, 1139, 1142, 1143, 1150, 1151, 1154, 1157, 1160, 1161, 1162, 1168, 1169, 1181, 1185, 1187, 1188, 1189, 1190, 1191, 1195, 1196, 1202, 1203, 1209, 1212, 1214, 1215, 1216, 1220, 1221, 1225, 1226, 1228, 1229, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1240, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1259, 1264, 1265, 1266, 1269, 1270, 1274, 1280, 1313, 1314, 1316, 1319, 1321, 1322, 1323, 1324, 1328, 1330, 1340, 1345, 1349, 1355, 1357, 1358, 1359, 1362, 1365, 1366, 1368, 1370, 1371], "00": [27, 40, 66, 200, 207, 229, 309, 339, 437, 438, 441, 445, 455, 456, 458, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 642, 644, 646, 648, 650, 653, 655, 657, 713, 716, 720, 771, 772, 773, 774, 788, 816, 817, 818, 830, 848, 856, 870, 945, 951, 1046, 1047, 1050, 1051, 1052, 1054, 1055, 1056, 1061, 1062, 1066, 1068, 1069, 1070, 1071, 1075, 1076, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1280, 1294, 1297, 1301, 1363], "000": [9, 10, 27, 40, 339, 1280, 1371], "0000": [301, 339, 1324, 1340, 1371], "000000": [393, 394, 468, 679, 998, 999, 1260], "00000001": [11, 744, 830], "00000010": [744, 830], "00000011": [744, 830], "00000100": [744, 830], "00001000": [744, 830], "00001010": [744, 830], "00001011": [744, 830], "0000e": 11, "0000ff": [393, 394, 679, 998, 999, 1260], "0001": 468, "000100": 468, "000101": 468, "0005": 951, "00050": 951, "000800": 1081, "001": [53, 723, 774, 1084, 1085, 1087, 1304], "002": [774, 1084, 1085, 1087], "005": [1095, 1340], "00prefix": 951, "00z": [713, 716, 1294, 1297], "01": [28, 51, 65, 66, 168, 200, 207, 227, 229, 244, 271, 309, 339, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 713, 715, 716, 720, 755, 768, 769, 770, 771, 772, 773, 774, 788, 830, 848, 856, 870, 875, 894, 945, 951, 1045, 1047, 1049, 1050, 1051, 1052, 1055, 1056, 1061, 1062, 1066, 1068, 1069, 1070, 1071, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1294, 1296, 1297, 1301, 1363, 1366], "010": [9, 718, 1299], "01000": 28, "01000010": [744, 830], "01000110": [744, 830], "012": [659, 696, 830, 1237, 1277, 1340], "0123": [723, 1304], "01234": [659, 830, 1237, 1340], "012345": 1081, "015625": [1212, 1340], "01\u00b2": [696, 1277], "02": [51, 200, 207, 227, 229, 271, 309, 339, 436, 438, 440, 446, 455, 456, 458, 462, 467, 468, 470, 473, 475, 479, 639, 642, 644, 646, 648, 650, 653, 655, 657, 658, 713, 715, 716, 720, 755, 768, 769, 770, 771, 772, 773, 774, 788, 830, 848, 856, 870, 894, 945, 951, 994, 1047, 1049, 1051, 1052, 1055, 1056, 1061, 1062, 1066, 1068, 1069, 1070, 1074, 1075, 1076, 1079, 1080, 1083, 1086, 1088, 1089, 1185, 1294, 1296, 1297, 1301, 1363, 1364], "03": [51, 130, 138, 200, 229, 244, 271, 309, 339, 438, 440, 441, 446, 455, 456, 458, 461, 462, 463, 465, 467, 468, 469, 470, 473, 475, 476, 479, 485, 498, 639, 642, 644, 646, 648, 650, 653, 655, 657, 715, 720, 768, 769, 770, 771, 772, 773, 774, 830, 848, 870, 875, 894, 945, 951, 1047, 1049, 1050, 1055, 1056, 1061, 1062, 1068, 1069, 1070, 1075, 1076, 1078, 1080, 1082, 1083, 1086, 1088, 1296, 1301], "037037": [1212, 1340], "04": [158, 200, 207, 229, 309, 339, 440, 441, 455, 456, 461, 462, 463, 465, 469, 470, 473, 475, 479, 642, 644, 646, 648, 650, 653, 655, 657, 713, 755, 768, 771, 772, 774, 830, 848, 856, 870, 945, 951, 1050, 1062, 1066, 1068, 1069, 1070, 1075, 1078, 1082, 1083, 1086, 1088, 1092, 1294, 1363], "047198": 1365, "05": [16, 158, 161, 162, 163, 164, 168, 200, 207, 309, 339, 436, 439, 440, 441, 442, 443, 447, 450, 451, 452, 453, 455, 456, 457, 462, 464, 465, 466, 468, 469, 755, 768, 769, 771, 772, 848, 856, 945, 951, 1049, 1050, 1051, 1052, 1075, 1076, 1078, 1079, 1081, 1082, 1089, 1363, 1364, 1366], "050545": 130, "0522623626787952": [1143, 1340], "0545": [1051, 1052, 1079], "05t10": 1081, "06": [168, 200, 309, 339, 436, 440, 454, 460, 462, 463, 464, 476, 477, 768, 771, 788, 848, 945, 951, 1045, 1075, 1076, 1081, 1089], "060": [442, 443, 447, 450, 452, 453, 457, 464, 466], "0601749420166": [215, 339], "06293300616044681": [1095, 1340], "07": [16, 138, 168, 207, 339, 436, 439, 440, 451, 462, 463, 468, 476, 713, 768, 769, 771, 772, 780, 856, 945, 951, 1045, 1049, 1075, 1081, 1294, 1363, 1366], "071068": [207, 339, 856, 945], "08": [138, 161, 162, 163, 164, 207, 244, 271, 286, 339, 436, 440, 455, 456, 463, 468, 639, 713, 772, 774, 788, 830, 856, 875, 894, 945, 951, 1045, 1076, 1089, 1294, 1363, 1364], "085537": [1104, 1340], "09": [51, 138, 207, 271, 339, 436, 440, 455, 456, 468, 619, 639, 717, 768, 769, 771, 818, 830, 856, 894, 945, 951, 1045, 1298], "090909": [620, 830], "094395": 1365, "098612": [574, 830, 1188, 1190, 1340, 1362], "0999": [439, 451], "0_": [40, 339], "0m": [445, 1054], "0x11bc0ad80": 950, "0\u00b5": 468, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 55, 59, 60, 78, 82, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 139, 142, 143, 144, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 172, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 397, 399, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 699, 700, 701, 705, 706, 707, 708, 709, 710, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 826, 830, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 951, 955, 956, 957, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 1002, 1013, 1014, 1018, 1019, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1117, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1265, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1280, 1281, 1282, 1286, 1287, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1340, 1345, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1369, 1370, 1371], "10": [13, 16, 17, 27, 35, 37, 39, 40, 41, 42, 45, 49, 51, 59, 130, 138, 139, 141, 152, 160, 202, 207, 211, 217, 226, 227, 229, 231, 233, 234, 235, 240, 244, 247, 258, 262, 264, 269, 271, 277, 286, 290, 313, 318, 321, 323, 326, 327, 328, 329, 330, 331, 332, 339, 350, 354, 362, 363, 364, 366, 418, 424, 427, 432, 436, 437, 439, 440, 442, 443, 445, 447, 450, 451, 452, 453, 455, 456, 457, 461, 462, 463, 464, 466, 468, 476, 479, 485, 506, 507, 508, 513, 519, 531, 539, 545, 547, 553, 563, 565, 567, 571, 573, 589, 591, 602, 617, 619, 620, 623, 633, 634, 639, 670, 718, 728, 731, 744, 755, 756, 764, 769, 771, 772, 775, 778, 780, 782, 790, 791, 815, 818, 830, 851, 852, 856, 859, 870, 871, 873, 875, 879, 888, 889, 894, 896, 906, 907, 915, 921, 924, 926, 929, 930, 931, 932, 933, 934, 935, 945, 951, 1027, 1041, 1045, 1046, 1048, 1049, 1054, 1063, 1075, 1081, 1089, 1092, 1095, 1101, 1122, 1133, 1147, 1155, 1163, 1169, 1179, 1181, 1183, 1187, 1189, 1193, 1209, 1221, 1239, 1241, 1299, 1312, 1319, 1321, 1324, 1340, 1349, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1366, 1371], "100": [10, 17, 27, 40, 126, 129, 134, 138, 139, 140, 143, 147, 148, 149, 152, 156, 245, 263, 282, 339, 468, 633, 634, 663, 677, 687, 689, 692, 701, 717, 773, 830, 876, 900, 945, 951, 1097, 1189, 1205, 1220, 1221, 1227, 1228, 1230, 1244, 1258, 1270, 1273, 1282, 1298, 1340, 1360, 1371], "1000": [140, 215, 295, 316, 339, 355, 830, 919, 945, 1084, 1189, 1318, 1340, 1371], "10000": [138, 242, 339], "100000": [10, 27], "1000000": [11, 1087], "1001": [316, 339, 919, 945], "1002": [316, 339, 919, 945], "10047419486152048166": [230, 339], "1005": [355, 830], "100_000": [808, 880, 945], "100\u00b5": 468, "101": [9, 27, 245, 339, 440, 468, 718, 876, 945, 951, 1299, 1371], "101000": 440, "10101": [27, 1366], "1010101": 9, "101514": [207, 339, 856, 945], "102": [245, 339, 876, 945], "1024": [37, 45, 46, 49, 138, 139, 140, 148, 156, 339, 397, 945, 1002], "1040361802642726": [1143, 1340], "107149": 1365, "10734580197236529959": [1121, 1340], "1073741824": [664, 830], "10783150408545073287": [230, 339], "107_930_000": 1349, "10_000": [40, 339], "10i": [229, 339, 870, 945], "10m": [463, 476, 1076, 1089], "10t00": 468, "11": [10, 16, 45, 49, 160, 168, 198, 207, 244, 271, 339, 350, 455, 456, 458, 463, 476, 500, 513, 545, 596, 620, 629, 639, 640, 654, 670, 744, 788, 813, 818, 826, 830, 845, 851, 852, 856, 871, 875, 879, 889, 894, 907, 945, 951, 1071, 1076, 1089, 1193, 1226, 1340, 1358], "110": [211, 339, 701, 718, 859, 945, 1299], "1101441246220388612": [507, 830], "111": [10, 1360], "11111": 1077, "111110": 1077, "11111001": [744, 830], "11111010": [744, 830], "11111111": 10, "112": [664, 830, 1371], "11330": 167, "1152921504606846976": [1218, 1340], "116": 167, "11638928888656214026": [507, 830], "118034": [905, 945], "11aa": 1363, "11aabb": 1363, "11h": [437, 1046], "12": [26, 40, 51, 130, 138, 160, 168, 207, 229, 240, 244, 245, 271, 286, 309, 339, 350, 426, 437, 439, 440, 444, 451, 454, 455, 456, 458, 459, 460, 461, 463, 468, 476, 477, 478, 485, 513, 545, 577, 593, 620, 628, 639, 654, 664, 678, 699, 717, 765, 768, 771, 772, 773, 788, 791, 816, 817, 818, 830, 856, 870, 871, 875, 876, 879, 894, 901, 907, 945, 951, 1046, 1048, 1049, 1060, 1061, 1063, 1067, 1074, 1076, 1081, 1089, 1101, 1193, 1236, 1259, 1281, 1298, 1340, 1362, 1363, 1364, 1366, 1368, 1371], "120": [245, 339, 774, 876, 945, 1365], "1200": [659, 830], "120134": [717, 1298], "121": 1371, "123": [9, 586, 678, 685, 700, 723, 820, 951, 1259, 1266, 1304, 1317, 1340], "123000": 951, "1232e": [1029, 1031, 1340], "1234": [27, 659, 830], "12345": [780, 1024, 1081, 1113, 1236, 1340], "1234500": 951, "123456": [9, 951], "1234567": 27, "123456780": 130, "12346": 780, "123465": 951, "123a123": 700, "123abc": [699, 1280, 1281], "125": [1, 40, 55, 339, 348, 624, 809, 830, 904, 945, 1209, 1212, 1340], "127": [1328, 1340, 1359], "128": [53, 67, 73, 1209, 1340], "129": [664, 830], "13": [201, 202, 207, 218, 219, 226, 234, 245, 246, 258, 271, 313, 321, 323, 326, 327, 328, 329, 330, 331, 332, 339, 350, 436, 442, 443, 447, 450, 452, 453, 457, 464, 466, 589, 591, 639, 717, 758, 764, 767, 771, 778, 814, 816, 819, 830, 849, 850, 856, 864, 865, 876, 878, 894, 915, 924, 926, 929, 930, 931, 932, 933, 934, 935, 945, 1045, 1076, 1089, 1090, 1193, 1298, 1340, 1359], "130": [245, 339, 876, 945], "13382926553367784577": [507, 830], "134821952": 1349, "134_821_952": 1349, "135": [752, 1365], "13614470193936745724": [507, 830], "13756996518000038261": [1121, 1340], "13d": 468, "13h": [437, 1046], "14": [39, 160, 207, 245, 248, 321, 323, 326, 327, 328, 329, 330, 331, 332, 339, 437, 442, 443, 447, 450, 452, 453, 457, 464, 466, 468, 513, 586, 629, 771, 816, 817, 830, 856, 876, 924, 926, 929, 930, 931, 932, 933, 934, 935, 945, 951, 1046, 1076, 1081], "140": [245, 339, 876, 945], "141592653589793": 10, "141593": [628, 830, 962, 1340, 1362, 1365], "142857": [1209, 1340], "143": [717, 1298, 1371], "1433": [38, 339], "1436e16": 168, "1438741209321515184": [230, 339], "1440": [473, 1086], "1443e235": 1371, "149": 1371, "14d": 951, "14h": 468, "15": [10, 40, 160, 207, 229, 234, 245, 248, 271, 339, 428, 432, 456, 461, 463, 468, 476, 485, 623, 639, 654, 696, 765, 771, 816, 817, 830, 856, 870, 876, 894, 945, 951, 1038, 1041, 1076, 1081, 1089, 1101, 1277, 1340, 1359, 1363], "150": [245, 339, 876, 945, 1228, 1340], "1500": [160, 171], "15000": [242, 339], "153061": [527, 830], "155": 134, "15836": 168, "15_000": [242, 339], "16": [1, 40, 53, 74, 84, 160, 174, 207, 229, 245, 271, 313, 339, 424, 427, 461, 468, 513, 593, 600, 619, 624, 639, 718, 728, 764, 774, 775, 778, 788, 830, 856, 870, 876, 894, 901, 915, 945, 951, 1076, 1089, 1209, 1249, 1299, 1313, 1340, 1359, 1362, 1363, 1368], "160": [245, 339, 876, 945], "165": [1076, 1089], "1656e15": [1031, 1340], "166667": [1209, 1340], "1666683077": 780, "1666683099": 780, "167": 51, "16996": 1371, "16h": 951, "17": [160, 168, 215, 244, 318, 339, 485, 511, 619, 640, 658, 760, 780, 817, 830, 875, 921, 945, 1029, 1031, 1076, 1101, 1125, 1226, 1340, 1371], "170": [134, 245, 339, 876, 945], "17293822569102704640": [1218, 1340], "174": 1371, "175201": [668, 830, 1250, 1340], "1755e": [165, 168], "1764": 55, "17888890": [215, 339], "179": 1371, "17_500": [242, 339], "18": [38, 130, 143, 207, 255, 271, 339, 427, 463, 476, 479, 513, 602, 619, 639, 728, 830, 856, 885, 889, 894, 945, 951, 1081, 1092, 1357, 1368], "180": [134, 430, 628, 830, 1365], "1800": [461, 1074], "1844": 168, "18446744073709551614": [1218, 1340], "185_000_000": 1349, "186": 1371, "1875": [656, 830, 913, 945], "1897": [439, 451, 1048, 1063], "18d": 951, "19": [168, 244, 271, 339, 439, 463, 639, 644, 646, 648, 650, 717, 830, 875, 894, 945, 1048, 1076, 1089, 1298], "1920": 1363, "196": 1364, "1964": [889, 945], "1969": [1363, 1364], "1970": [65, 66, 158, 1349], "1972": 1349, "1976": [449, 480], "1977": [449, 480], "1978": [442, 443, 447, 449, 450, 452, 453, 457, 464, 466, 480, 1364], "1979": [449, 480], "1980": 468, "1985": [769, 772], "1990": [138, 1349], "1993": 1349, "1994": 1349, "1995": 138, "1998": [458, 1071], "1999": [286, 339, 458, 468, 951, 1071, 1081, 1366], "199992": [880, 945], "199994": [880, 945], "199996": [880, 945], "199998": [880, 945], "1_000_000": [215, 339, 1099, 1340], "1_234_500": 951, "1d": [229, 244, 271, 309, 339, 438, 458, 463, 468, 470, 473, 476, 479, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 774, 790, 817, 818, 830, 870, 875, 894, 945, 951, 1047, 1055, 1061, 1071, 1076, 1080, 1083, 1086, 1089, 1101, 1340], "1e": [11, 161, 162, 163, 164], "1e6": 11, "1h": [229, 244, 271, 309, 339, 445, 458, 463, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1054, 1056, 1071, 1076, 1089, 1101, 1340], "1i": [229, 271, 309, 339, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 830, 870, 894, 945, 1101, 1340], "1m": [229, 244, 271, 309, 339, 458, 463, 475, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1084, 1085, 1087, 1088, 1089, 1101, 1340], "1mo": [229, 244, 271, 309, 339, 441, 455, 456, 458, 462, 463, 469, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1050, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1076, 1082, 1089, 1090, 1101, 1340], "1n": [229, 244, 271, 309, 339, 458, 463, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089, 1101, 1340], "1q": [229, 244, 271, 309, 339, 458, 463, 476, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089], "1st_col": 951, "1u": [229, 244, 271, 309, 339, 458, 463, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089, 1101, 1340], "1w": [229, 244, 271, 309, 339, 458, 463, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089, 1101, 1340], "1w2d": [769, 770], "1y": [229, 244, 271, 309, 339, 458, 463, 476, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089], "1y2mo": [458, 1071], "1zy3": [678, 1259], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 59, 60, 78, 82, 95, 98, 100, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 141, 147, 148, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 182, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 347, 348, 349, 350, 352, 354, 355, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 399, 404, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 448, 451, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 593, 594, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 804, 808, 809, 810, 811, 812, 813, 815, 818, 819, 820, 826, 830, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 950, 951, 955, 956, 957, 960, 963, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 1001, 1002, 1013, 1019, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1049, 1051, 1052, 1054, 1056, 1059, 1060, 1061, 1063, 1065, 1066, 1067, 1068, 1069, 1073, 1074, 1075, 1076, 1079, 1089, 1091, 1092, 1093, 1094, 1095, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1117, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1259, 1265, 1267, 1269, 1270, 1271, 1273, 1274, 1276, 1277, 1280, 1281, 1286, 1287, 1289, 1290, 1291, 1294, 1295, 1297, 1298, 1299, 1300, 1303, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1340, 1345, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1369, 1370, 1371], "20": [38, 39, 40, 60, 138, 143, 160, 165, 166, 167, 168, 172, 175, 198, 207, 211, 217, 233, 234, 255, 262, 264, 269, 286, 296, 297, 301, 315, 320, 339, 362, 363, 364, 418, 432, 439, 442, 443, 447, 450, 451, 452, 453, 457, 463, 464, 466, 468, 476, 479, 500, 507, 513, 577, 585, 596, 623, 642, 644, 646, 648, 650, 653, 655, 657, 683, 728, 743, 771, 780, 790, 809, 817, 830, 845, 856, 859, 862, 885, 888, 904, 918, 923, 945, 951, 1041, 1048, 1052, 1063, 1076, 1081, 1089, 1092, 1104, 1120, 1220, 1264, 1319, 1321, 1324, 1340, 1356, 1357, 1360, 1366], "200": [471, 472, 474, 633, 634, 830, 951, 1097, 1205, 1220, 1221, 1227, 1228, 1230, 1340, 1360], "2000": [439, 448, 451, 455, 456, 458, 951, 1048, 1057, 1063, 1068, 1069, 1071, 1077, 1349, 1363], "200000": [471, 880, 945], "200000000": 474, "2001": [16, 438, 439, 444, 446, 448, 451, 454, 458, 459, 460, 463, 467, 476, 477, 478, 479, 642, 644, 646, 648, 650, 653, 655, 657, 713, 830, 951, 1047, 1048, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1070, 1071, 1072, 1073, 1076, 1080, 1089, 1090, 1091, 1092, 1093, 1294], "2002": [138, 448, 458, 1057, 1071, 1093], "2003": [458, 780, 1071], "2004": [458, 1071], "2005": [458, 1071], "2006": [458, 1071], "2008": 1349, "200m": [471, 472, 474], "2010": [286, 339, 468, 951], "2011": [437, 1046], "2012": [437, 1046, 1366], "2013": 1074, "2016": [244, 339, 875, 945], "2017": [244, 339, 875, 945], "2018": [244, 339, 462, 875, 945, 1075], "2019": [244, 339, 875, 945], "202": 1364, "2020": [142, 153, 200, 207, 227, 244, 271, 339, 342, 436, 441, 445, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 485, 639, 713, 715, 716, 755, 830, 848, 856, 875, 894, 945, 951, 1045, 1050, 1054, 1075, 1078, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1101, 1294, 1296, 1297, 1340, 1364], "2021": [200, 207, 227, 229, 309, 339, 713, 790, 848, 856, 870, 945, 951, 1051, 1052, 1058, 1079, 1294, 1363], "2022": [51, 200, 207, 227, 339, 440, 463, 476, 713, 769, 770, 772, 773, 774, 780, 848, 856, 945, 951, 1049, 1058, 1076, 1089, 1294], "2023": [16, 40, 130, 160, 242, 339, 440, 774, 790, 951, 1049], "2024": [160, 436, 442, 443, 447, 450, 452, 453, 457, 461, 464, 466, 619, 755, 768, 769, 771, 772, 774, 830, 951, 1045, 1074, 1363, 1366], "2025": [436, 461, 755, 788, 951, 1045], "2026": 1364, "2030": 1363, "2031": 951, "2040": 468, "2047317070637311557": [230, 339], "2055938745": 130, "2065": [442, 443, 447, 450, 452, 453, 457, 464, 466], "2068": 168, "207": 1364, "2077": [286, 339, 468, 951, 1081, 1363, 1364], "2095": 168, "20_000": [40, 339], "20t08": 468, "20t18": 1081, "20word": 141, "21": [160, 207, 255, 288, 339, 439, 642, 644, 646, 648, 650, 653, 655, 657, 771, 780, 788, 830, 856, 885, 945, 951, 1048, 1357], "213": 1371, "2147483647": 1371, "2147483648": [1191, 1340], "21d": 951, "22": [45, 49, 160, 168, 339, 444, 459, 463, 476, 478, 479, 640, 642, 644, 646, 648, 650, 653, 655, 657, 713, 771, 826, 830, 945, 951, 1076, 1089, 1092, 1226, 1294, 1340, 1363, 1364, 1371], "221": 1371, "2246e": [1249, 1313, 1340], "225": [463, 476, 1365], "22500": 808, "22_000_000": 1349, "22_500": 808, "23": [10, 124, 168, 207, 229, 271, 301, 339, 440, 444, 447, 459, 461, 463, 468, 478, 639, 642, 644, 646, 648, 650, 653, 655, 657, 771, 774, 816, 817, 818, 830, 856, 870, 894, 904, 945, 951, 1049, 1056, 1074, 1324, 1340, 1370, 1371], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1349, "2337": [40, 339], "234": 27, "2345": 951, "23456789": 10, "235": 1371, "23h": 951, "24": [53, 160, 229, 244, 248, 271, 286, 309, 339, 426, 428, 444, 458, 459, 463, 470, 476, 478, 600, 639, 642, 644, 646, 648, 650, 653, 655, 657, 696, 769, 770, 772, 773, 774, 817, 818, 830, 870, 875, 894, 945, 1038, 1071, 1076, 1083, 1089, 1142, 1340, 1363, 1370], "24030": 167, "249": [744, 830], "25": [1, 27, 40, 55, 130, 207, 211, 229, 244, 271, 296, 301, 309, 313, 339, 397, 432, 444, 445, 459, 463, 468, 476, 478, 485, 624, 626, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 737, 771, 772, 773, 774, 780, 788, 789, 792, 817, 818, 830, 856, 859, 870, 875, 882, 894, 913, 915, 945, 951, 1002, 1040, 1041, 1054, 1076, 1081, 1089, 1095, 1101, 1123, 1209, 1214, 1280, 1340, 1357, 1362, 1368, 1369], "250": [744, 830, 1228, 1340, 1360, 1371], "2500": [242, 301, 339], "254508": [485, 830, 1101, 1340], "255": 1371, "256": [248, 339, 397, 1002, 1209, 1340, 1362], "2560": 1002, "259921": [416, 830, 1023, 1340, 1362], "25_000_000": 1349, "26": [38, 40, 160, 165, 166, 167, 168, 172, 207, 339, 445, 477, 856, 945, 1054], "266667": [207, 339, 856, 945], "27": [1, 55, 296, 332, 339, 427, 454, 460, 477, 728, 830, 935, 951, 1212, 1319, 1340, 1370, 1371], "270": 1365, "28": [292, 297, 339, 348, 462, 479, 830, 1075, 1092, 1321, 1340, 1363, 1365, 1370, 1371], "283185": [628, 830], "2846": 339, "285714": [514, 830, 1127, 1340], "289962": 1365, "28_341_469": 1349, "29": [16, 160, 437, 455, 1046, 1068], "29096": 1371, "290994": [905, 945], "292432": [963, 1340], "292893": [485, 830, 1101, 1340], "2_color_scal": [40, 339], "2d": [271, 296, 297, 339, 458, 639, 790, 830, 894, 945, 1046, 1053], "2h": [642, 644, 646, 648, 650, 653, 655, 657, 830], "2i": [229, 339, 870, 945], "2m": [951, 1066], "2x": 167, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 59, 60, 78, 95, 98, 100, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 141, 143, 147, 148, 149, 152, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 348, 349, 350, 351, 353, 364, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 598, 599, 600, 601, 602, 603, 605, 607, 609, 610, 613, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 671, 672, 673, 676, 677, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 714, 715, 720, 721, 724, 725, 726, 727, 728, 729, 731, 735, 736, 739, 740, 741, 743, 744, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 830, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 950, 951, 956, 957, 960, 962, 964, 965, 966, 968, 969, 970, 971, 972, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1063, 1065, 1066, 1067, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1087, 1089, 1091, 1092, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1117, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1146, 1147, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1258, 1260, 1261, 1262, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1275, 1276, 1280, 1281, 1282, 1283, 1284, 1288, 1295, 1296, 1301, 1302, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1320, 1321, 1322, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1340, 1345, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1369, 1370, 1371], "30": [40, 207, 217, 229, 233, 262, 269, 292, 313, 339, 342, 362, 363, 364, 432, 440, 442, 443, 447, 450, 452, 453, 454, 455, 457, 460, 462, 463, 464, 466, 468, 469, 476, 477, 507, 585, 664, 771, 788, 790, 816, 817, 830, 856, 862, 870, 888, 915, 945, 951, 1041, 1049, 1068, 1075, 1076, 1081, 1082, 1089, 1120, 1340, 1345, 1356, 1357, 1360, 1362, 1363, 1365, 1366, 1369, 1371], "300": [292, 339, 506, 617, 634, 830, 951, 1221, 1227, 1228, 1230, 1340, 1360], "3000": 951, "3002": [439, 451, 1048, 1063], "30103": [573, 830, 1362], "3022416320763508302": [1121, 1340], "30_000": [40, 339], "30m": [229, 339, 463, 476, 870, 945, 1076, 1089], "30t16": 468, "31": [55, 60, 207, 286, 339, 439, 440, 444, 451, 455, 458, 461, 469, 683, 713, 768, 771, 780, 790, 809, 856, 945, 951, 1046, 1048, 1049, 1053, 1063, 1068, 1074, 1081, 1082, 1220, 1264, 1294, 1340, 1364, 1366, 1371], "31t06": 1081, "32": [53, 65, 71, 75, 85, 239, 244, 271, 339, 600, 639, 664, 830, 875, 894, 945, 1042, 1072, 1209, 1231, 1340, 1357, 1363], "321": [27, 1371], "3212": [717, 1298], "321cba": 1363, "3265500": 951, "32971": [479, 1092], "32974": [479, 1092], "32976": [479, 1092], "32bit": [296, 339], "33": [207, 255, 339, 658, 830, 856, 885, 945, 1231, 1340, 1364], "333": [16, 659, 830, 1097, 1205, 1237, 1340], "33333": 1366, "333333": [235, 339, 602, 788, 873, 945, 1209, 1235, 1340, 1357], "34": [207, 339, 699, 713, 856, 945, 1281, 1294], "3420": [717, 1298], "343622": [669, 830], "345": [413, 414, 694, 695, 1018, 1019, 1275, 1276], "3450": [1237, 1340], "3456": 951, "34776706224699483": [1251, 1340], "35": [40, 339, 432, 468, 771, 830, 1041, 1340], "350": [339, 342, 506, 617, 830, 1228, 1340, 1345], "3500": [1237, 1340], "356": [444, 459, 478], "356194": [751, 752, 1365], "357": [444, 459, 478], "358": [444, 459, 478], "359": [444, 459, 478], "36": [207, 339, 856, 945, 1368], "360": [430, 628, 830, 1365], "361": 1371, "363961": [565, 1181], "366": [459, 1072], "37": [12, 951], "370h": [485, 830, 1101, 1340], "37338": 1371, "38": [40, 130, 165, 168, 339], "38180177416060584": [651, 830, 1232, 1340], "381802": [651, 830, 1232, 1340], "386294": [574, 830, 1190, 1340, 1362], "389056": [489, 830, 1104, 1340, 1362], "39": [655, 780, 830], "39m": 951, "3_color_scal": [40, 339], "3d12h4m25": [229, 244, 271, 309, 339, 463, 476, 485, 639, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1076, 1089, 1101, 1340], "3f": [141, 713, 716, 1294, 1297], "3i": [229, 271, 339, 870, 945], "3rd": [1271, 1295], "3xy": [678, 1259], "4": [1, 8, 13, 17, 25, 35, 37, 39, 40, 41, 42, 45, 51, 52, 53, 54, 55, 59, 60, 78, 98, 123, 124, 125, 126, 127, 128, 129, 130, 134, 152, 160, 172, 196, 197, 198, 199, 200, 201, 202, 206, 208, 212, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 259, 261, 262, 263, 264, 267, 271, 273, 274, 281, 282, 285, 289, 290, 291, 292, 293, 294, 297, 300, 302, 303, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 347, 348, 349, 350, 352, 354, 366, 373, 374, 375, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 390, 391, 397, 408, 409, 410, 413, 414, 416, 417, 418, 422, 423, 426, 427, 428, 430, 433, 440, 443, 444, 451, 459, 460, 461, 462, 463, 464, 465, 468, 470, 473, 475, 476, 478, 482, 483, 485, 489, 490, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 508, 510, 512, 513, 514, 515, 524, 525, 529, 530, 531, 538, 539, 540, 541, 542, 544, 545, 547, 555, 557, 558, 559, 560, 561, 562, 563, 567, 568, 573, 576, 577, 578, 598, 600, 602, 603, 605, 607, 609, 610, 613, 614, 615, 618, 619, 621, 622, 623, 624, 627, 629, 633, 634, 635, 636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 663, 666, 670, 671, 672, 673, 676, 678, 682, 685, 688, 690, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 711, 712, 713, 714, 718, 723, 724, 726, 727, 728, 729, 731, 734, 735, 736, 737, 743, 744, 746, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 762, 764, 765, 766, 767, 768, 771, 772, 773, 775, 777, 778, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 826, 830, 845, 846, 848, 849, 850, 851, 852, 855, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 889, 890, 891, 894, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 918, 919, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 950, 951, 955, 960, 963, 970, 977, 979, 980, 981, 983, 984, 985, 986, 987, 989, 991, 992, 993, 994, 995, 996, 1002, 1013, 1018, 1019, 1024, 1025, 1027, 1033, 1038, 1040, 1042, 1052, 1056, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1076, 1078, 1083, 1086, 1088, 1089, 1090, 1091, 1098, 1101, 1105, 1106, 1108, 1109, 1114, 1115, 1117, 1122, 1123, 1126, 1127, 1128, 1129, 1133, 1136, 1137, 1138, 1139, 1141, 1147, 1154, 1155, 1156, 1157, 1158, 1163, 1167, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1183, 1184, 1199, 1202, 1203, 1206, 1209, 1210, 1211, 1212, 1216, 1217, 1220, 1221, 1222, 1225, 1229, 1231, 1232, 1233, 1234, 1235, 1238, 1240, 1244, 1245, 1248, 1251, 1252, 1253, 1257, 1259, 1263, 1266, 1269, 1271, 1275, 1276, 1278, 1279, 1284, 1286, 1287, 1292, 1293, 1294, 1295, 1299, 1304, 1305, 1308, 1310, 1312, 1318, 1321, 1323, 1325, 1331, 1340, 1345, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1368, 1369, 1370, 1371], "40": [40, 207, 217, 244, 262, 339, 463, 468, 476, 507, 571, 717, 728, 830, 856, 875, 888, 945, 951, 1058, 1089, 1187, 1298, 1356, 1357, 1360, 1363], "400": [308, 339, 471, 472, 474, 912, 945, 1227, 1228, 1230, 1340, 1360], "4000000": [1099, 1340], "404": [245, 339, 684, 686, 876, 945, 1265, 1267], "4096": 1362, "41": [207, 339, 655, 830, 856, 945, 1357, 1371], "412277": 168, "414214": [673, 830, 1254, 1340, 1362], "4160": 55, "416147": 1365, "4164": [244, 339, 875, 945], "42": [55, 207, 230, 255, 271, 339, 468, 639, 830, 856, 885, 894, 945, 1121, 1340, 1356, 1370], "424778": [628, 830], "428571": [484, 830, 1100, 1340], "429101": 1357, "4294967296": [45, 339], "43": [207, 271, 339, 427, 639, 655, 830, 856, 894, 945], "4321": 951, "433013": [652, 830, 905, 945], "44": [10, 255, 339, 433, 830, 885, 945], "4411": [244, 339, 875, 945], "44225": [1023, 1340], "444": 10, "44444444444": 10, "45": [40, 207, 271, 339, 440, 463, 476, 639, 655, 678, 685, 725, 752, 771, 790, 816, 817, 830, 856, 894, 945, 951, 1049, 1076, 1081, 1089, 1259, 1266, 1307, 1362, 1363, 1365, 1369, 1371], "450": [1228, 1340], "45000": 808, "4500000": 951, "456": [9, 10, 440, 951, 1049, 1317, 1340], "456000": [440, 1049], "456001\u00b5": 951, "4566": [244, 339, 875, 945], "456789": [468, 951, 1077], "456789\u00b5": 951, "456m": 951, "457658": 1365, "459148": [481, 830], "46": 951, "4696": [244, 339, 875, 945], "47": [51, 207, 339, 655, 830, 856, 945, 951, 1357], "470": [889, 945], "47033": [651, 830, 1232, 1340], "47033046033698594": [651, 830, 1232, 1340], "475": [889, 945], "48": [12, 168, 271, 339, 639, 728, 830, 894, 945, 951], "4827": [244, 339, 875, 945], "485": 1371, "49": [207, 339, 856, 945, 951], "492474": [485, 830, 1101, 1340], "498": [245, 339, 876, 945], "4_500_000": 951, "4ab4a": 1363, "4d": [485, 830, 1101, 1340], "4f6228": [40, 339], "4f71": [40, 339], "4x": [241, 339], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 35, 37, 39, 41, 42, 45, 51, 52, 54, 55, 59, 98, 123, 126, 127, 128, 129, 130, 132, 139, 160, 161, 163, 166, 168, 172, 197, 200, 201, 202, 207, 208, 211, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 232, 234, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 257, 258, 259, 261, 263, 264, 265, 267, 271, 274, 281, 282, 285, 286, 289, 290, 291, 292, 293, 294, 296, 297, 300, 301, 303, 306, 307, 308, 309, 312, 313, 315, 316, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 348, 349, 352, 367, 368, 373, 374, 375, 377, 379, 383, 388, 390, 396, 397, 408, 409, 410, 413, 414, 417, 418, 428, 429, 430, 432, 433, 436, 439, 440, 441, 442, 443, 447, 450, 451, 452, 453, 457, 462, 464, 465, 466, 468, 469, 475, 479, 483, 485, 487, 488, 491, 493, 497, 498, 502, 503, 505, 508, 510, 513, 515, 518, 521, 522, 523, 524, 525, 529, 531, 538, 541, 542, 544, 545, 547, 550, 552, 553, 557, 558, 559, 560, 561, 562, 566, 567, 571, 577, 598, 600, 602, 614, 618, 619, 620, 621, 622, 623, 624, 626, 627, 629, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 652, 654, 655, 656, 657, 658, 661, 672, 678, 688, 689, 690, 693, 694, 695, 714, 718, 729, 731, 735, 736, 737, 749, 751, 752, 754, 755, 756, 757, 758, 760, 762, 764, 765, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 808, 809, 811, 813, 814, 815, 819, 826, 830, 848, 849, 850, 851, 852, 856, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 882, 883, 889, 891, 894, 900, 901, 902, 903, 904, 905, 906, 907, 911, 912, 914, 915, 918, 919, 921, 923, 924, 925, 926, 929, 930, 931, 932, 933, 934, 935, 936, 945, 951, 960, 963, 967, 970, 973, 974, 977, 979, 980, 981, 983, 985, 989, 994, 995, 996, 1001, 1002, 1013, 1018, 1025, 1027, 1034, 1038, 1039, 1040, 1041, 1042, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1063, 1075, 1077, 1078, 1079, 1081, 1082, 1088, 1090, 1091, 1092, 1098, 1101, 1103, 1105, 1106, 1107, 1117, 1122, 1123, 1126, 1128, 1132, 1135, 1147, 1154, 1157, 1158, 1163, 1166, 1169, 1173, 1174, 1175, 1176, 1177, 1178, 1182, 1183, 1187, 1191, 1199, 1206, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1221, 1222, 1225, 1226, 1227, 1228, 1230, 1231, 1234, 1238, 1240, 1245, 1251, 1254, 1259, 1269, 1270, 1271, 1274, 1275, 1295, 1299, 1312, 1319, 1321, 1324, 1325, 1328, 1331, 1340, 1345, 1350, 1353, 1355, 1357, 1358, 1359, 1362, 1363, 1364, 1365, 1368, 1370, 1371], "50": [12, 27, 40, 207, 217, 227, 339, 418, 463, 468, 476, 769, 770, 830, 856, 945, 951, 1027, 1040, 1089, 1280, 1340, 1356, 1357], "500": [40, 308, 339, 342, 442, 443, 447, 450, 452, 453, 457, 464, 466, 912, 945, 1062, 1064, 1070, 1227, 1228, 1230, 1340, 1345], "5000": [301, 339, 1324, 1340], "50000": 139, "500000": [450, 1062], "500000000": [457, 1070], "5000555": 951, "500_000": [442, 443, 447, 450, 452, 453, 457, 464, 466], "500m": [1062, 1064, 1070], "51": 951, "512": [45, 140, 241, 339, 397, 624, 830, 1002, 1209, 1340], "51966": [718, 1299], "52": [313, 339, 477, 658, 830, 915, 945], "523599": 1365, "527525": [1233, 1340], "53": [477, 1090, 1368], "533316061": 1349, "533_316_061": 1349, "54": [489, 830, 1143, 1340, 1362, 1371], "540": [430, 628, 830], "540302": 1365, "543": 9, "543081": [420, 830, 1030, 1340], "5432": 140, "54321": 9, "544": 1371, "544705": 760, "549306": [967, 1340], "55": [40, 53, 339, 511, 830, 1125, 1340, 1359, 1363, 1364], "5555": 951, "55550": 951, "56": [130, 699, 732, 830, 1281], "566371": [628, 830], "567": 27, "56789": [1024, 1113, 1236, 1340], "57": [655, 830, 1236, 1340, 1365, 1371], "570796": [356, 358, 830, 962, 964, 1340, 1365], "575050513": [165, 168], "58": [134, 263, 339], "581139": [1040, 1340], "584963": [572, 830], "587401": [416, 830, 1362], "59": [130, 207, 339, 440, 453, 461, 464, 468, 498, 771, 816, 817, 818, 830, 856, 945, 951, 1049, 1066, 1074, 1077], "59815": [489, 830, 1362], "5_000_555": 951, "5th": [40, 339], "6": [1, 8, 13, 35, 37, 39, 40, 41, 42, 43, 44, 45, 50, 52, 54, 59, 90, 91, 98, 123, 126, 127, 128, 129, 147, 148, 160, 197, 200, 203, 204, 208, 209, 210, 212, 213, 214, 216, 217, 220, 223, 224, 225, 226, 227, 229, 231, 233, 234, 235, 237, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 282, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 303, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 322, 332, 333, 339, 342, 343, 348, 352, 373, 374, 375, 377, 383, 391, 409, 410, 413, 414, 426, 427, 433, 436, 440, 444, 454, 458, 459, 460, 471, 472, 474, 477, 478, 481, 483, 492, 493, 498, 499, 502, 508, 510, 513, 531, 532, 533, 542, 545, 558, 559, 560, 561, 565, 577, 578, 614, 618, 625, 628, 629, 630, 635, 637, 639, 641, 643, 645, 647, 649, 652, 654, 655, 656, 661, 666, 672, 678, 683, 694, 695, 718, 729, 731, 736, 744, 746, 748, 755, 757, 764, 765, 766, 768, 771, 775, 778, 784, 791, 792, 796, 809, 813, 826, 830, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 866, 867, 868, 870, 871, 873, 874, 875, 877, 879, 880, 887, 889, 891, 892, 894, 895, 896, 898, 900, 901, 902, 903, 904, 907, 910, 911, 914, 915, 918, 919, 925, 935, 936, 945, 951, 977, 979, 980, 981, 983, 989, 1018, 1025, 1029, 1031, 1036, 1037, 1042, 1045, 1071, 1081, 1091, 1098, 1105, 1117, 1123, 1148, 1149, 1158, 1161, 1174, 1175, 1176, 1177, 1181, 1199, 1213, 1216, 1217, 1222, 1224, 1229, 1231, 1233, 1235, 1240, 1245, 1248, 1259, 1264, 1275, 1299, 1311, 1321, 1340, 1345, 1350, 1353, 1355, 1357, 1358, 1362, 1368, 1369, 1371], "60": [40, 217, 263, 339, 447, 452, 453, 464, 475, 498, 655, 713, 830, 1072, 1077, 1088, 1218, 1294, 1340, 1365], "600": [308, 339, 471, 472, 474, 912, 945, 951], "60000": 450, "600000": 951, "60000000": 457, "60206": [573, 830, 1362], "605551": 811, "605551275463989": 811, "609438": 1362, "60_000": [442, 443, 447, 450, 452, 453, 457, 464, 466], "61": [263, 339], "625": [649, 830], "626172": [680, 1261], "63": [655, 830], "63204": 1371, "6331e16": [1313, 1340, 1365], "636253": 1365, "64": [1, 53, 55, 66, 68, 72, 76, 83, 86, 159, 196, 301, 339, 421, 600, 624, 830, 1209, 1212, 1340, 1362], "64030": [718, 1299], "642093": 1365, "647961": 168, "64bit": [160, 631, 830, 1218, 1340], "65": [211, 339, 859, 945, 1095, 1340], "650": [506, 617, 830], "65280": [718, 1299], "654": [27, 809, 904, 945], "65432": 1366, "654321": 586, "65536": 1362, "65552": [396, 1001], "66": [244, 308, 339, 655, 744, 830, 875, 912, 945, 1143, 1231, 1340], "663053": 130, "666": 951, "666000": 951, "666667": [207, 235, 310, 327, 339, 484, 788, 789, 795, 830, 856, 873, 913, 930, 945, 1100, 1340], "666f6f": [680, 1261], "67500": 808, "676": [245, 339, 876, 945], "678": [678, 685, 1259, 1266], "6789": [28, 951], "67890": 28, "686241": 1357, "69": [655, 830, 1143, 1340], "693147": [574, 830, 1188, 1190, 1340, 1362], "6_000_000": 1349, "7": [1, 16, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 52, 54, 59, 147, 148, 160, 175, 197, 200, 203, 204, 205, 207, 209, 210, 213, 214, 216, 220, 223, 225, 229, 231, 233, 235, 243, 247, 249, 251, 253, 255, 256, 260, 263, 265, 268, 269, 271, 272, 274, 275, 276, 277, 279, 282, 284, 287, 288, 289, 290, 295, 297, 298, 299, 307, 309, 310, 311, 339, 342, 343, 348, 352, 374, 375, 377, 386, 427, 439, 440, 444, 451, 459, 462, 463, 468, 476, 478, 489, 502, 508, 513, 514, 531, 545, 558, 559, 560, 561, 618, 619, 629, 635, 639, 654, 655, 672, 688, 717, 731, 755, 764, 765, 768, 771, 772, 778, 783, 791, 792, 809, 813, 830, 848, 853, 854, 856, 858, 861, 863, 866, 868, 870, 871, 873, 874, 879, 885, 887, 890, 892, 894, 895, 896, 900, 904, 907, 945, 951, 967, 980, 981, 983, 992, 1048, 1049, 1053, 1058, 1063, 1075, 1076, 1081, 1089, 1091, 1104, 1127, 1142, 1161, 1174, 1175, 1176, 1177, 1221, 1222, 1234, 1240, 1269, 1298, 1340, 1345, 1350, 1355, 1357, 1358, 1359, 1362, 1364, 1368, 1371], "70": [207, 339, 744, 772, 830, 856, 945, 1143, 1340, 1357], "700": [308, 339, 912, 945], "702963": [40, 339], "7051579356916758811": 154, "707107": [385, 486, 652, 653, 751, 830, 991, 1102, 1340, 1365], "712389": 1365, "714": 1371, "714286": [514, 830, 1127, 1340], "718281828459045": [10, 481, 572, 830, 1095, 1188, 1340], "718282": [489, 830, 1104, 1340, 1362], "720": [430, 628, 830], "7264": 1371, "732051": [1254, 1340], "7415e16": 168, "742": [245, 339, 876, 945], "75": [40, 207, 211, 339, 352, 618, 626, 641, 643, 645, 647, 652, 654, 656, 788, 792, 830, 856, 859, 945, 951, 1040, 1123, 1143, 1214, 1280, 1340, 1357, 1365, 1371], "7500": [242, 339], "7508": 1371, "754": [737, 830], "754888": [481, 830], "761594": [733, 830, 1314, 1340], "7654": 951, "765431": 1077, "7654321": 27, "76933c": [40, 339], "77": 1081, "78": [9, 134, 699, 1281], "780": 9, "784": [244, 339, 875, 945], "785398": [360, 751, 752, 830, 966, 1340, 1365], "789": [10, 951], "79": [1143, 1340], "7d": 951, "8": [1, 11, 35, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 59, 77, 81, 87, 147, 148, 160, 197, 200, 203, 204, 205, 207, 209, 210, 212, 213, 214, 216, 220, 223, 225, 227, 231, 233, 240, 243, 244, 245, 247, 248, 249, 251, 253, 256, 265, 268, 269, 271, 272, 274, 275, 276, 277, 279, 282, 284, 286, 287, 288, 290, 295, 297, 298, 299, 307, 310, 311, 313, 339, 352, 354, 366, 374, 375, 377, 424, 427, 428, 440, 468, 502, 509, 513, 514, 539, 541, 545, 558, 559, 560, 561, 600, 618, 619, 624, 635, 636, 640, 664, 670, 672, 696, 697, 698, 713, 744, 749, 755, 760, 762, 765, 767, 775, 777, 782, 783, 786, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 809, 811, 814, 815, 819, 830, 848, 853, 854, 856, 858, 860, 861, 863, 866, 868, 871, 874, 875, 876, 879, 880, 889, 892, 895, 896, 900, 904, 907, 915, 945, 951, 980, 981, 983, 1031, 1038, 1058, 1123, 1127, 1142, 1155, 1157, 1161, 1174, 1175, 1176, 1177, 1209, 1212, 1222, 1225, 1226, 1229, 1231, 1233, 1235, 1278, 1279, 1294, 1340, 1349, 1350, 1355, 1357, 1358, 1359, 1362, 1363, 1364, 1368, 1371], "80": [40, 211, 339, 859, 945], "800": [471, 472, 474, 1081], "8000": 140, "803065983": 130, "81": 1362, "814697265625": [1099, 1340], "816497": [287, 339], "8192": 138, "82": [244, 339, 875, 945], "8257e14": 1371, "83": [244, 339, 875, 945], "833": [244, 339, 875, 945], "833333": [327, 930], "848062": 1365, "848808": 168, "85": [40, 134, 339, 1143, 1340, 1371], "850": [506, 617, 830], "8568409950394724": [1095, 1340], "8589934592": [664, 830], "86": 1371, "8601": 1363, "87": 1371, "876": 9, "88": [207, 339, 856, 945], "881374": [359, 830, 965, 1340], "888": [809, 904, 945], "8_000_000": 1349, "8a": [998, 999], "8nin": 1371, "9": [1, 9, 35, 37, 39, 40, 41, 42, 45, 51, 59, 197, 205, 207, 220, 222, 231, 235, 243, 245, 247, 248, 263, 271, 273, 274, 277, 289, 290, 307, 311, 313, 332, 339, 348, 352, 354, 366, 374, 375, 377, 382, 384, 424, 427, 430, 440, 468, 494, 502, 513, 519, 539, 545, 556, 564, 602, 618, 619, 628, 635, 639, 640, 651, 654, 655, 666, 670, 685, 717, 725, 728, 758, 764, 765, 768, 771, 783, 818, 830, 856, 866, 871, 873, 874, 876, 879, 894, 896, 907, 915, 935, 945, 951, 975, 976, 980, 981, 983, 988, 990, 1040, 1053, 1062, 1064, 1070, 1076, 1089, 1090, 1133, 1142, 1155, 1161, 1172, 1180, 1222, 1226, 1232, 1234, 1236, 1248, 1266, 1298, 1307, 1340, 1349, 1350, 1355, 1358, 1359, 1368], "90": [207, 245, 339, 717, 856, 876, 945, 1298, 1357, 1365], "90000": 808, "901234": [1024, 1113, 1236, 1340], "909": [244, 339, 875, 945], "910": [244, 339, 685, 875, 945, 1266], "910t": [678, 685, 1259, 1266], "914": [244, 339, 875, 945], "9223372036854775807": [740, 830], "9223372036854775808": [575, 830], "927295": 1365, "928571": [487, 830, 1103, 1340], "93": [1143, 1340], "94": [349, 830], "9477376373212048": [1143, 1340], "95": [17, 349, 830, 951], "95b3d7": [40, 339], "96": [17, 207, 339, 349, 830, 856, 945, 1143, 1340], "961": 55, "963624": [486, 830, 1102, 1340], "964028": [263, 339], "96_067_179": 1349, "97": [17, 234, 339, 349, 830, 1143, 1340], "9774092659964970114": [507, 830], "978307200": [446, 1055], "978307200000": 467, "978307200000000": [446, 467, 1055, 1080], "978307200000000000": 1080, "978393600": [446, 1055], "978393600000": 467, "978393600000000": [446, 467, 1055, 1080], "978393600000000000": 1080, "978480000": [446, 1055], "978480000000": 467, "978480000000000": [446, 467, 1055, 1080], "978480000000000000": 1080, "98": [17, 234, 263, 339, 408, 501, 504, 671, 717, 735, 830, 1298], "987": [27, 586], "987000": 951, "9876": 9, "987654": [27, 951], "987654321": 10, "9876543210": 130, "987m": 951, "988": 10, "99": [17, 40, 218, 219, 234, 237, 263, 308, 339, 349, 408, 491, 493, 501, 504, 671, 735, 820, 830, 864, 865, 912, 945, 1081, 1095, 1107, 1340, 1362], "9914e218": 168, "993": [1123, 1340], "998347": [263, 339], "999": [439, 451, 951, 1048, 1063, 1360, 1371], "999000": 951, "999954": [263, 339], "999999": [461, 723, 771, 816, 817, 818, 951, 1074, 1081, 1304], "999999\u00b5": 951, "9bbb59": [40, 339], "A": [13, 37, 40, 45, 46, 57, 58, 63, 69, 130, 133, 138, 139, 140, 141, 152, 154, 159, 174, 204, 213, 222, 229, 244, 250, 252, 257, 263, 289, 292, 307, 308, 309, 313, 314, 339, 347, 414, 434, 435, 440, 465, 468, 482, 483, 491, 503, 505, 517, 520, 522, 523, 529, 569, 576, 577, 590, 604, 613, 614, 636, 641, 643, 645, 647, 649, 652, 654, 656, 676, 677, 678, 684, 685, 686, 687, 688, 689, 690, 693, 695, 699, 700, 701, 703, 714, 723, 758, 774, 775, 779, 830, 854, 861, 870, 875, 892, 912, 915, 916, 945, 951, 1019, 1043, 1044, 1049, 1078, 1081, 1097, 1107, 1205, 1227, 1228, 1230, 1233, 1234, 1235, 1257, 1258, 1259, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1276, 1280, 1281, 1282, 1284, 1295, 1304, 1340, 1349, 1350, 1353, 1366, 1368], "AND": [745, 746, 809, 951, 1359], "ANDs": [399, 830, 1004, 1340], "AS": [286, 339, 809, 810, 904, 945, 1349, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1370], "And": [721, 1302], "As": [12, 50, 90, 91, 123, 125, 126, 127, 129, 143, 147, 148, 156, 220, 267, 296, 301, 339, 569, 820, 866, 891, 945], "At": [45, 263, 339], "BY": [809, 904, 945, 1349, 1352, 1358, 1367, 1368], "Be": 945, "By": [5, 12, 14, 30, 33, 51, 138, 139, 152, 229, 243, 244, 271, 273, 282, 287, 309, 310, 339, 383, 458, 463, 476, 562, 565, 571, 619, 634, 639, 642, 644, 646, 648, 650, 653, 655, 657, 663, 674, 742, 762, 769, 770, 772, 773, 774, 790, 811, 817, 818, 819, 830, 851, 870, 874, 875, 894, 900, 905, 913, 945, 989, 1071, 1076, 1089, 1178, 1221, 1244, 1255, 1330, 1340], "For": [14, 39, 40, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 211, 212, 215, 217, 243, 244, 263, 271, 296, 325, 339, 342, 455, 456, 468, 484, 486, 487, 498, 569, 578, 590, 631, 669, 676, 684, 685, 686, 688, 690, 714, 764, 774, 778, 779, 826, 830, 859, 860, 875, 894, 928, 945, 1081, 1099, 1100, 1102, 1103, 1106, 1193, 1218, 1251, 1257, 1265, 1266, 1267, 1269, 1271, 1295, 1319, 1340, 1345], "IF": 1361, "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 67, 123, 124, 125, 126, 127, 128, 129, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 169, 170, 171, 182, 196, 200, 212, 217, 220, 227, 229, 231, 239, 240, 241, 243, 244, 247, 248, 252, 259, 263, 267, 271, 273, 274, 275, 279, 282, 284, 286, 289, 290, 293, 294, 296, 297, 303, 304, 306, 307, 308, 339, 342, 351, 353, 376, 383, 388, 396, 410, 436, 440, 441, 455, 456, 465, 468, 494, 509, 515, 527, 548, 557, 562, 563, 569, 577, 578, 585, 586, 592, 594, 619, 624, 626, 629, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 663, 665, 669, 670, 675, 685, 686, 688, 690, 691, 692, 703, 704, 705, 706, 708, 709, 710, 713, 714, 715, 716, 720, 723, 741, 745, 747, 750, 754, 755, 759, 760, 764, 769, 770, 772, 773, 774, 777, 778, 784, 785, 786, 788, 789, 790, 792, 796, 802, 805, 806, 807, 812, 814, 817, 818, 820, 821, 830, 851, 852, 860, 862, 866, 870, 874, 875, 880, 884, 891, 892, 894, 898, 900, 902, 904, 909, 911, 912, 920, 928, 938, 945, 950, 951, 958, 959, 982, 989, 994, 1001, 1014, 1027, 1045, 1049, 1050, 1068, 1069, 1078, 1081, 1106, 1122, 1123, 1128, 1142, 1143, 1147, 1164, 1173, 1178, 1179, 1185, 1193, 1212, 1214, 1216, 1218, 1220, 1221, 1222, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1240, 1242, 1244, 1247, 1251, 1252, 1256, 1266, 1267, 1269, 1271, 1272, 1273, 1280, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1294, 1295, 1296, 1297, 1301, 1304, 1312, 1315, 1319, 1321, 1329, 1340, 1345, 1349, 1350, 1352, 1360, 1363, 1368], "In": [51, 58, 140, 142, 153, 154, 157, 168, 172, 192, 197, 215, 217, 220, 229, 244, 245, 248, 259, 263, 271, 297, 306, 339, 342, 577, 578, 619, 639, 699, 700, 830, 852, 870, 875, 876, 894, 911, 945, 1099, 1106, 1212, 1217, 1281, 1340, 1345], "It": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 50, 57, 58, 67, 69, 73, 91, 133, 134, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 194, 207, 245, 255, 262, 286, 296, 301, 308, 316, 325, 339, 342, 343, 428, 429, 509, 569, 578, 589, 626, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 757, 788, 789, 826, 830, 847, 851, 852, 856, 862, 876, 880, 885, 904, 912, 919, 928, 945, 953, 1022, 1038, 1039, 1123, 1214, 1226, 1229, 1231, 1232, 1239, 1241, 1319, 1324, 1340, 1345], "Its": [230, 339, 507, 830, 1121, 1340], "NO": 951, "NOT": [126, 240, 280, 339, 569, 588, 662, 830, 899, 945, 1368], "No": [20, 243, 255, 339, 874, 885, 945], "Not": [218, 243, 339, 492, 522, 523, 830, 851, 864, 874, 945, 1108, 1340], "ON": 1368, "OR": [747, 748, 866, 945, 951, 1359], "ORs": [404, 830, 1009, 1340], "On": [737, 830, 878, 945], "One": [51, 207, 259, 296, 301, 339, 352, 618, 749, 761, 777, 783, 786, 795, 797, 800, 801, 810, 830, 856, 945, 951, 1040, 1340], "Or": [228, 229, 244, 271, 285, 309, 318, 339, 342, 485, 639, 672, 769, 770, 772, 773, 817, 818, 820, 826, 830, 869, 870, 875, 894, 903, 921, 945, 1101, 1340], "That": [144, 880, 945], "The": [20, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 56, 57, 59, 60, 65, 66, 68, 69, 70, 78, 82, 83, 91, 92, 94, 123, 125, 126, 127, 129, 133, 135, 138, 139, 140, 141, 142, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 168, 169, 170, 172, 174, 182, 199, 207, 208, 210, 211, 212, 213, 216, 217, 220, 227, 228, 229, 230, 235, 241, 243, 244, 245, 248, 255, 261, 263, 267, 271, 272, 273, 274, 277, 278, 279, 286, 296, 297, 302, 305, 309, 313, 314, 316, 317, 318, 325, 339, 350, 391, 392, 393, 394, 408, 409, 429, 431, 434, 435, 436, 444, 454, 458, 459, 463, 465, 468, 476, 477, 488, 491, 494, 498, 499, 507, 540, 544, 577, 578, 592, 619, 626, 629, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 666, 669, 675, 679, 680, 684, 689, 690, 691, 692, 697, 698, 699, 700, 708, 709, 710, 711, 712, 713, 714, 724, 728, 734, 735, 736, 755, 758, 776, 780, 789, 790, 792, 806, 807, 808, 809, 812, 820, 822, 823, 825, 826, 830, 831, 832, 835, 837, 838, 839, 846, 851, 856, 857, 859, 860, 862, 863, 866, 869, 870, 873, 874, 875, 876, 880, 885, 889, 891, 894, 896, 897, 898, 904, 908, 910, 915, 916, 919, 921, 928, 945, 949, 950, 951, 957, 960, 997, 998, 999, 1013, 1026, 1039, 1040, 1043, 1044, 1045, 1053, 1067, 1071, 1072, 1076, 1078, 1081, 1089, 1090, 1106, 1107, 1110, 1121, 1156, 1160, 1193, 1212, 1214, 1216, 1220, 1221, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1248, 1251, 1256, 1260, 1261, 1270, 1271, 1272, 1273, 1278, 1279, 1280, 1281, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1321, 1323, 1325, 1332, 1334, 1336, 1340, 1341, 1346, 1347, 1348, 1349, 1354, 1368, 1369, 1371], "Then": 157, "There": 1368, "These": [1, 32, 40, 132, 135, 140, 141, 192, 303, 339, 476, 829, 830, 1076, 1089], "To": [39, 58, 218, 339, 418, 434, 435, 492, 493, 676, 683, 684, 685, 688, 699, 700, 709, 710, 711, 712, 721, 830, 864, 945, 1027, 1043, 1044, 1108, 1257, 1264, 1265, 1266, 1269, 1280, 1281, 1302, 1321, 1340, 1368], "Will": [57, 58, 851, 852, 862, 889, 901, 945, 1340], "With": [147, 239, 282, 339, 383, 562, 663, 830, 851, 900, 945, 989, 1142, 1178, 1244, 1340], "_": [1, 51, 55, 192, 263, 294, 298, 339, 376, 413, 414, 548, 677, 685, 687, 689, 694, 695, 701, 704, 705, 1018, 1019, 1021, 1258, 1266, 1270, 1275, 1276, 1282, 1286, 1316, 1340], "__array_ufunc__": 953, "__call__": 826, "__enter__": 1368, "__exit__": 1368, "__getattr__": 826, "__getitem__": 724, "__init__": [1, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 165, 177, 183, 184, 186, 187, 920, 1368], "__name__": [242, 339], "_bar_": 779, "_btm_by_a": [409, 830], "_btm_by_b": [409, 830], "_by_ca": [409, 736, 830], "_by_cb": [409, 736, 830], "_check_ord": [57, 58, 851, 852, 862, 889, 901, 945], "_df": [1, 52], "_diff": [313, 339, 915, 945], "_eager": [569, 851, 945], "_expr": [1, 53], "_foo": 583, "_geventdataframeresult": [58, 852, 945], "_is_not_nan": [523, 830], "_is_odd": [277, 339, 896, 945], "_isnan": [522, 830], "_isnul": [525, 830], "_kwarg": [851, 945], "_ldf": 1, "_lf": 54, "_lower_boundari": [229, 339, 870, 945], "_mean_squar": [318, 921], "_not_nul": [524, 830], "_o": [413, 414, 694, 695, 1018, 1019, 1275, 1276], "_revers": [603, 607, 636, 830], "_right": [243, 244, 245, 339, 874, 875, 876, 945], "_storage_account": 33, "_suffix": 608, "_sum": [318, 921], "_top_by_a": [736, 830], "_top_by_b": [736, 830], "_train": [917, 945], "_type": 945, "_type_check": [46, 47, 48, 49, 57, 58, 851, 852, 862, 889, 901, 945], "_upper_boundari": [229, 339, 870, 945], "_world": 779, "a1": [40, 52, 54, 339], "a101": 1371, "a123": [40, 339], "a2": [40, 52, 54, 339], "a_1": [705, 1286, 1316, 1340], "a_2": [1316, 1340], "a_3": [1316, 1340], "a_a": 810, "a_agg_list": [229, 339, 870, 945], "a_b_doubl": 775, "a_btm_by_a": [409, 830], "a_btm_by_b": [409, 830], "a_by_ca": [409, 736, 830], "a_by_cb": [409, 736, 830], "a_div_2": 1362, "a_div_5": 1362, "a_interpol": [514, 830], "a_is_even": [286, 339, 809, 904, 945], "a_isnul": [525, 830], "a_lag_": 758, "a_log2": 1362, "a_mod_2": 1362, "a_not_nul": [524, 830], "a_revers": [603, 607, 636, 830], "a_rol": 758, "a_suffix": 608, "a_times_2": [578, 830], "a_times_b": [577, 830], "a_top_by_a": [736, 830], "a_top_by_b": [736, 830], "a_txt": 810, "aa": [488, 676, 688, 776, 830, 951, 1040, 1257, 1269, 1340, 1363], "aaa": [1, 40, 339, 676, 688, 724, 726, 727, 951, 1257, 1269], "aaaa": [998, 999], "aabcdef": 710, "aad": [998, 999], "aag": 26, "aazz": 1363, "ab": [231, 247, 290, 313, 339, 700, 724, 726, 727, 830, 915, 945, 951, 1122, 1147, 1312, 1340, 1361, 1363], "ab12": 700, "ab12cd34ef": 700, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 348, 682, 685, 699, 709, 830, 951, 1263, 1266, 1280, 1281], "abc123": 1363, "abc456": [699, 1280, 1281, 1363], "abcabc": 700, "abcd": 1363, "abcdeff": 709, "abf": [142, 153, 154], "abl": [98, 140, 569], "about": [98, 133, 135, 140, 669, 676, 684, 685, 688, 699, 700, 830, 1251, 1257, 1265, 1266, 1269, 1280, 1281, 1340, 1371], "abov": [40, 244, 263, 339, 342, 820, 875, 945], "abs_a": 1362, "absolut": [142, 153, 154, 161, 162, 163, 164, 347, 484, 486, 487, 830, 956, 1100, 1102, 1103, 1340, 1362], "acc": [764, 765, 778, 804], "accent": 951, "accept": [37, 41, 45, 46, 47, 48, 49, 133, 135, 136, 138, 139, 142, 144, 146, 148, 150, 152, 155, 156, 157, 168, 182, 199, 209, 228, 277, 278, 282, 285, 302, 313, 314, 318, 339, 348, 409, 418, 488, 515, 619, 633, 634, 672, 701, 728, 736, 744, 746, 748, 753, 756, 757, 758, 759, 767, 776, 794, 796, 799, 808, 812, 814, 820, 826, 830, 846, 858, 869, 896, 897, 900, 903, 908, 915, 916, 921, 945, 950, 1027, 1128, 1212, 1220, 1221, 1244, 1282, 1340], "access": [37, 41, 45, 46, 47, 48, 49, 52, 53, 54, 55, 144, 148, 150, 152, 154, 155, 156, 157, 182, 196, 203, 241, 272, 273, 286, 339, 686, 724, 853, 904, 917, 945, 950, 1267, 1371], "accord": [272, 339, 626, 769, 770, 772, 773, 817, 818, 830, 1058, 1214, 1340], "accordingli": [133, 136, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151], "account": [40, 130, 141, 154, 339, 458, 484, 486, 487, 830, 1071, 1100, 1102, 1103, 1340], "accumul": [764, 765, 778, 804], "acg": 26, "achiev": [248, 263, 325, 339, 414, 578, 695, 830, 1019, 1193, 1276, 1340], "aco": 1361, "acosd": 1361, "across": [40, 51, 141, 143, 208, 230, 243, 250, 252, 257, 279, 289, 339, 431, 507, 592, 746, 748, 764, 765, 767, 794, 796, 799, 814, 830, 857, 874, 898, 945, 1121, 1340], "action": [39, 339], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 541, 685, 1157, 1266], "actual": [40, 126, 168, 172, 274, 339, 1246, 1340, 1363, 1370], "ad": [38, 40, 126, 143, 229, 286, 296, 301, 303, 308, 313, 314, 339, 354, 468, 491, 585, 586, 728, 764, 765, 809, 830, 870, 904, 912, 915, 916, 945, 951, 1081, 1107, 1319, 1324, 1340], "adbc": [38, 140, 141, 339], "adbc_driver_manag": 160, "adbc_ingest": [38, 339], "add": [39, 40, 139, 217, 229, 248, 313, 314, 315, 316, 339, 342, 429, 605, 606, 607, 608, 626, 728, 774, 778, 820, 830, 870, 874, 915, 916, 917, 918, 919, 945, 1106, 1340, 1345], "add_calendar_dai": 774, "add_calendar_month": 774, "add_calendar_year": 774, "add_chart": [40, 339], "add_dai": 774, "add_format": [40, 339], "add_hour": 774, "add_milli": 774, "add_second": 774, "add_seri": [40, 339], "add_week": 774, "add_worksheet": [40, 339], "addit": [29, 36, 38, 39, 40, 126, 137, 142, 143, 153, 154, 166, 168, 170, 172, 182, 212, 216, 228, 246, 261, 277, 278, 285, 298, 305, 313, 314, 318, 339, 348, 445, 488, 491, 619, 672, 676, 684, 685, 688, 699, 700, 724, 728, 753, 756, 757, 758, 759, 776, 808, 809, 812, 826, 830, 863, 869, 896, 897, 903, 910, 915, 916, 921, 945, 951, 1046, 1054, 1107, 1257, 1265, 1266, 1269, 1280, 1281, 1322, 1340, 1350, 1368], "addition": [59, 143, 272, 339, 951], "address": 685, "adjac": [40, 339], "adjust": [484, 486, 487, 669, 830, 1100, 1102, 1103, 1251, 1340], "adl": [142, 153, 154], "adlf": 154, "advanc": [40, 263, 339, 388, 569, 602, 605, 607, 609, 610, 994, 1185, 1371], "advantag": [40, 192, 262, 339], "advis": [40, 50, 91, 339], "aedt": 771, "aeiuo": [688, 1269], "af1": 51, "af2": 51, "af3": 51, "affect": [38, 161, 162, 163, 164, 339], "afm": 154, "afoo": [917, 945], "after": [40, 126, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 199, 200, 217, 302, 305, 339, 408, 409, 410, 488, 619, 629, 723, 735, 736, 830, 846, 908, 910, 945, 1013, 1106, 1216, 1304, 1325, 1340, 1355], "afterward": [50, 820], "ag": [255, 339, 885, 945, 1369], "again": [578, 830], "against": [38, 100, 138, 140, 220, 267, 286, 339, 541, 688, 809, 866, 891, 904, 945, 1157, 1269, 1349, 1368, 1370, 1371], "agg": [228, 229, 263, 271, 339, 349, 399, 404, 407, 409, 494, 496, 501, 504, 577, 578, 619, 671, 672, 736, 743, 769, 772, 792, 830, 851, 852, 862, 869, 870, 889, 894, 901, 945, 951], "agg_group": [781, 830], "agg_list": [577, 830], "aggreg": [135, 138, 139, 142, 150, 153, 222, 228, 229, 249, 251, 253, 256, 259, 263, 264, 265, 271, 287, 288, 307, 310, 318, 319, 321, 323, 339, 349, 399, 404, 407, 494, 510, 577, 578, 619, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 745, 746, 747, 748, 764, 765, 766, 767, 778, 783, 793, 794, 796, 798, 799, 804, 813, 814, 830, 870, 880, 881, 882, 883, 886, 887, 890, 894, 905, 906, 913, 921, 922, 924, 926, 945, 1004, 1009, 1012, 1124, 1226, 1227, 1228, 1230, 1233, 1234, 1235, 1340, 1356, 1358, 1361, 1367], "aggregate_funct": [263, 339, 951], "aho": [677, 687, 689, 701, 1258, 1268, 1270, 1282], "aiosqlit": 140, "alchemy_conn": 140, "algorithm": [198, 339, 355, 677, 687, 689, 701, 749, 830, 845, 945, 961, 1258, 1268, 1270, 1282, 1340], "alia": [1, 12, 51, 53, 55, 59, 89, 185, 189, 203, 229, 247, 263, 271, 305, 313, 316, 339, 342, 348, 352, 392, 393, 394, 395, 398, 408, 411, 413, 414, 415, 423, 424, 425, 426, 427, 429, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 475, 476, 477, 478, 479, 482, 483, 496, 498, 503, 505, 511, 512, 515, 518, 521, 529, 531, 553, 565, 571, 576, 578, 582, 585, 586, 588, 590, 595, 598, 600, 602, 613, 614, 618, 620, 624, 626, 629, 631, 659, 661, 676, 677, 678, 679, 681, 682, 684, 685, 687, 688, 689, 690, 694, 695, 701, 702, 703, 704, 705, 706, 707, 711, 712, 714, 724, 725, 726, 727, 729, 734, 735, 737, 743, 744, 750, 751, 752, 756, 757, 758, 759, 769, 772, 774, 775, 778, 779, 784, 787, 788, 791, 792, 804, 808, 812, 817, 820, 830, 870, 872, 879, 894, 910, 915, 919, 945, 1039, 1046, 1047, 1050, 1053, 1054, 1055, 1056, 1061, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1078, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1147, 1214, 1219, 1265, 1266, 1270, 1281, 1286, 1287, 1340], "alias": [286, 339, 585, 586, 904, 945], "alic": [138, 1369], "align": [10, 15, 16, 40, 51, 59, 339, 1369], "align_fram": 59, "align_ful": 59, "align_inn": 59, "align_left": 59, "align_right": 59, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 37, 39, 40, 45, 46, 49, 51, 57, 64, 92, 109, 111, 123, 124, 128, 134, 138, 139, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 165, 166, 169, 172, 192, 197, 198, 200, 207, 209, 211, 212, 219, 231, 236, 238, 240, 241, 242, 243, 245, 246, 247, 252, 254, 258, 259, 263, 266, 268, 272, 273, 274, 278, 284, 285, 289, 290, 294, 296, 297, 301, 304, 306, 307, 308, 309, 314, 316, 339, 342, 352, 354, 376, 391, 409, 422, 428, 434, 435, 436, 437, 468, 488, 493, 499, 506, 507, 510, 513, 517, 520, 524, 525, 530, 540, 541, 548, 566, 569, 577, 599, 602, 603, 605, 606, 607, 608, 609, 610, 617, 619, 629, 634, 636, 640, 664, 670, 672, 678, 682, 685, 686, 690, 693, 696, 700, 708, 709, 710, 714, 736, 746, 755, 757, 764, 765, 766, 767, 776, 778, 783, 784, 787, 796, 804, 812, 813, 814, 820, 826, 830, 836, 842, 845, 848, 851, 852, 856, 858, 859, 860, 862, 865, 874, 876, 880, 884, 889, 892, 897, 901, 902, 903, 909, 911, 912, 916, 917, 919, 945, 951, 982, 1038, 1040, 1043, 1044, 1045, 1046, 1081, 1122, 1129, 1141, 1147, 1156, 1157, 1164, 1182, 1185, 1216, 1221, 1226, 1252, 1259, 1263, 1266, 1267, 1270, 1271, 1274, 1281, 1289, 1290, 1291, 1295, 1312, 1321, 1340, 1344, 1345, 1350, 1352, 1357, 1358, 1363, 1367, 1368, 1370, 1371], "all_compat": 1352, "all_data": 1368, "all_horizont": [211, 212, 339, 745, 859, 860, 945], "all_stat": 30, "alloc": [135, 138, 139, 215, 266, 339, 830, 920, 1099, 1340], "allow": [1, 8, 39, 40, 46, 47, 48, 49, 50, 59, 91, 100, 124, 140, 143, 152, 155, 156, 157, 158, 165, 168, 169, 172, 192, 196, 241, 244, 246, 272, 273, 275, 297, 298, 301, 304, 317, 339, 411, 415, 458, 465, 468, 557, 577, 578, 585, 586, 631, 660, 713, 715, 716, 830, 874, 875, 880, 884, 909, 917, 945, 949, 951, 1071, 1078, 1081, 1173, 1193, 1218, 1238, 1294, 1296, 1297, 1321, 1322, 1340, 1363, 1371], "allow_alias": [585, 586], "allow_chunk": [168, 172], "allow_copi": [124, 196, 297, 339, 1321, 1340], "allow_dupl": [626, 830, 1214, 1340], "allow_exact_match": [244, 339, 875, 945], "allow_infin": [168, 172], "allow_masked_out": [168, 172], "allow_missing_column": [150, 157], "allow_nul": [165, 168, 172, 1371], "allow_object": 790, "allow_parallel": [244, 339, 874, 875, 945], "allow_pyarrow_filt": 158, "allow_time_zon": [168, 169, 172], "allowed_dtyp": [168, 169, 172, 1371], "almost": [58, 248, 325, 339, 713, 715, 716, 852, 945, 949, 1193, 1294, 1296, 1297, 1340], "along": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 339, 945], "alpha": [484, 486, 487, 830, 862, 889, 901, 945, 951, 1100, 1102, 1103, 1340], "alpha_i": [485, 830, 1101, 1340], "alphabet": [951, 1371], "alphanumer": [721, 951, 1302], "alreadi": [38, 39, 99, 296, 339, 428, 541, 593, 741, 830, 901, 945, 1038, 1157, 1329, 1340], "also": [27, 37, 40, 46, 50, 126, 140, 143, 144, 149, 150, 152, 157, 167, 168, 171, 172, 177, 186, 192, 213, 228, 229, 255, 259, 263, 271, 273, 277, 285, 296, 308, 313, 316, 339, 424, 427, 436, 458, 462, 468, 494, 515, 578, 585, 586, 619, 629, 633, 634, 672, 699, 700, 701, 708, 709, 724, 755, 764, 765, 768, 771, 778, 780, 804, 820, 829, 830, 836, 869, 870, 885, 894, 896, 903, 912, 915, 917, 919, 945, 951, 1045, 1075, 1128, 1216, 1220, 1221, 1259, 1280, 1281, 1282, 1289, 1340, 1344, 1350, 1352, 1355, 1359, 1363, 1366, 1368, 1369], "alt": [339, 342, 1340, 1345], "altair": [160, 339, 342, 1340, 1345], "altern": [40, 177, 339, 826, 1360], "although": [286, 339, 904, 945], "alwai": [13, 37, 39, 46, 67, 69, 73, 138, 199, 228, 243, 244, 248, 302, 325, 339, 408, 409, 577, 589, 713, 735, 736, 820, 830, 846, 874, 875, 880, 908, 945, 951, 1013, 1193, 1294, 1325, 1340, 1349, 1350, 1368, 1371], "am": [702, 1283], "amarillo": 1363, "amaz": [339, 342, 1340, 1345], "amazonaw": 32, "ambigu": [461, 462, 463, 476, 713, 716, 771, 1074, 1075, 1076, 1089, 1294, 1297], "america": 772, "amount": [50, 68, 91, 148, 152, 155, 156, 578, 774, 830, 1357], "amsterdam": [462, 1075], "an": [1, 30, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 55, 59, 67, 68, 69, 96, 100, 103, 106, 113, 115, 123, 125, 126, 129, 133, 135, 138, 139, 140, 141, 142, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 166, 168, 172, 182, 201, 202, 203, 209, 215, 218, 222, 224, 229, 240, 241, 242, 244, 245, 248, 259, 263, 268, 269, 271, 272, 276, 286, 291, 297, 301, 303, 307, 308, 313, 316, 325, 339, 342, 350, 372, 375, 387, 393, 399, 402, 404, 405, 407, 424, 425, 426, 427, 428, 429, 436, 440, 441, 458, 462, 465, 479, 485, 493, 494, 500, 501, 504, 538, 541, 544, 546, 568, 569, 577, 578, 590, 592, 602, 603, 624, 625, 626, 634, 635, 639, 640, 641, 643, 645, 647, 649, 652, 654, 656, 675, 676, 679, 685, 688, 692, 713, 715, 716, 718, 720, 734, 737, 745, 750, 754, 769, 770, 772, 773, 775, 777, 780, 784, 785, 786, 787, 788, 789, 790, 802, 804, 805, 808, 812, 817, 818, 820, 821, 826, 830, 848, 849, 850, 852, 856, 858, 862, 866, 870, 875, 876, 880, 889, 892, 894, 895, 901, 904, 912, 915, 917, 919, 920, 928, 942, 945, 949, 950, 951, 978, 981, 993, 998, 1004, 1007, 1009, 1010, 1012, 1026, 1028, 1034, 1035, 1036, 1037, 1038, 1045, 1049, 1078, 1092, 1099, 1101, 1142, 1154, 1157, 1160, 1162, 1184, 1193, 1221, 1222, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1239, 1241, 1256, 1257, 1260, 1266, 1269, 1273, 1294, 1296, 1297, 1299, 1301, 1321, 1323, 1340, 1358, 1360, 1363, 1367, 1368, 1370], "ana": [702, 1283], "anan": [702, 1283], "ananab": 1363, "and_": 830, "ang": 1363, "angl": [751, 752], "ani": [4, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 67, 69, 73, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 192, 194, 197, 199, 205, 209, 211, 212, 217, 219, 220, 222, 224, 239, 241, 242, 243, 244, 245, 248, 252, 262, 267, 268, 272, 273, 274, 286, 289, 292, 293, 296, 297, 298, 301, 302, 304, 307, 308, 316, 339, 342, 343, 348, 351, 352, 376, 408, 409, 410, 428, 429, 464, 482, 483, 493, 494, 498, 501, 503, 505, 509, 519, 529, 536, 541, 548, 576, 577, 578, 585, 595, 598, 600, 602, 603, 605, 607, 609, 610, 613, 614, 618, 623, 626, 633, 634, 635, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 661, 665, 675, 677, 691, 709, 710, 711, 712, 713, 715, 716, 718, 720, 729, 735, 736, 737, 744, 745, 746, 748, 757, 759, 760, 761, 788, 789, 790, 792, 796, 814, 820, 830, 846, 851, 852, 858, 859, 860, 862, 865, 866, 874, 875, 876, 888, 891, 892, 904, 908, 909, 912, 919, 920, 945, 949, 951, 953, 955, 958, 982, 1013, 1022, 1038, 1039, 1077, 1096, 1097, 1106, 1109, 1114, 1116, 1118, 1123, 1133, 1142, 1145, 1152, 1157, 1164, 1192, 1193, 1204, 1205, 1214, 1220, 1221, 1222, 1226, 1229, 1231, 1232, 1239, 1240, 1256, 1258, 1272, 1294, 1296, 1297, 1299, 1301, 1319, 1320, 1321, 1322, 1324, 1325, 1340, 1345, 1368, 1371], "anna": [255, 339, 885, 945], "annex": [696, 1277], "announc": 945, "anoth": [93, 167, 200, 208, 214, 228, 244, 279, 339, 428, 431, 438, 514, 544, 582, 588, 592, 633, 642, 644, 646, 648, 650, 653, 655, 657, 688, 830, 848, 857, 869, 875, 898, 917, 945, 1038, 1047, 1098, 1106, 1127, 1160, 1220, 1221, 1269, 1340, 1362, 1363], "anti": [243, 339, 874, 928, 945, 1239, 1241, 1340, 1356], "any_horizont": 747, "anyth": [39, 272, 339], "anywher": [395, 398, 713, 715, 716, 1294, 1296, 1297], "ap": 1363, "apach": [35, 41, 42, 45, 124, 136, 140, 141, 144, 146, 154, 195, 339, 954], "apaya": [714, 1295], "api": [0, 32, 37, 41, 45, 46, 47, 48, 49, 124, 148, 150, 152, 155, 156, 157, 158, 177, 182, 196, 248, 325, 339, 578, 792, 830, 928, 945, 1193, 1340, 1367], "apia": [437, 1046], "app": [415, 707, 1020, 1288], "appear": [40, 63, 126, 163, 164, 339, 700, 739, 830, 951, 1327, 1340, 1369], "append": [38, 39, 168, 217, 243, 244, 245, 339, 630, 820, 830, 874, 875, 876, 945, 1106, 1340], "appl": [204, 233, 243, 268, 269, 292, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 339, 409, 411, 415, 636, 681, 707, 736, 830, 874, 892, 923, 924, 926, 927, 929, 930, 931, 932, 933, 934, 935, 945, 1015, 1020, 1262, 1288, 1356, 1363], "appli": [10, 20, 37, 40, 46, 59, 133, 140, 152, 165, 168, 172, 192, 207, 222, 245, 248, 262, 285, 286, 296, 325, 339, 364, 439, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 464, 466, 477, 478, 480, 486, 487, 577, 578, 623, 641, 642, 643, 644, 647, 648, 654, 655, 672, 699, 700, 713, 715, 716, 720, 753, 764, 765, 778, 791, 792, 804, 809, 820, 830, 856, 876, 880, 888, 903, 904, 928, 945, 1027, 1048, 1051, 1052, 1053, 1056, 1057, 1058, 1062, 1063, 1064, 1066, 1067, 1070, 1072, 1073, 1077, 1079, 1090, 1091, 1093, 1102, 1103, 1193, 1227, 1228, 1230, 1234, 1280, 1281, 1294, 1296, 1297, 1301, 1340, 1349], "applic": [297, 339, 578, 830], "apply_on_context_ent": 192, "appropri": [40, 158, 220, 267, 297, 339, 468, 629, 830, 866, 891, 945, 1081, 1216, 1340], "approx": [355, 830], "approx_n_uniqu": [339, 830, 945, 1340], "approxim": [45, 198, 339, 355, 485, 749, 830, 845, 945, 961, 1101, 1340, 1362, 1371], "april": [465, 1078, 1363, 1364], "ar": [1, 10, 11, 17, 20, 30, 32, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 58, 59, 90, 91, 98, 104, 120, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 166, 168, 169, 170, 172, 182, 192, 196, 199, 200, 205, 207, 211, 212, 215, 218, 220, 221, 222, 227, 228, 229, 241, 243, 244, 245, 246, 248, 254, 255, 261, 263, 267, 271, 272, 273, 274, 277, 278, 282, 285, 292, 296, 297, 298, 301, 302, 306, 308, 309, 313, 314, 317, 318, 339, 351, 353, 367, 383, 388, 408, 409, 410, 418, 424, 426, 427, 436, 463, 468, 476, 481, 483, 484, 485, 486, 487, 492, 494, 515, 517, 519, 520, 522, 523, 524, 525, 527, 532, 562, 569, 577, 614, 619, 626, 629, 632, 633, 634, 635, 639, 642, 644, 646, 648, 650, 651, 653, 655, 657, 663, 666, 669, 671, 672, 677, 686, 690, 692, 693, 697, 698, 699, 700, 701, 703, 714, 716, 718, 723, 728, 730, 734, 735, 736, 745, 746, 748, 753, 756, 757, 758, 759, 760, 767, 769, 770, 772, 773, 788, 789, 794, 796, 799, 808, 812, 814, 817, 818, 820, 822, 823, 825, 829, 830, 831, 832, 835, 836, 837, 838, 839, 842, 846, 851, 852, 856, 859, 860, 864, 866, 869, 870, 874, 875, 876, 880, 884, 885, 889, 891, 892, 894, 896, 897, 900, 903, 908, 911, 912, 915, 916, 917, 921, 945, 949, 951, 958, 959, 973, 989, 994, 1013, 1017, 1027, 1036, 1037, 1045, 1076, 1081, 1089, 1095, 1097, 1099, 1100, 1101, 1102, 1103, 1108, 1110, 1112, 1128, 1131, 1133, 1134, 1136, 1137, 1138, 1139, 1143, 1148, 1178, 1185, 1205, 1214, 1216, 1220, 1221, 1222, 1232, 1244, 1248, 1251, 1258, 1267, 1271, 1273, 1278, 1279, 1280, 1281, 1284, 1295, 1297, 1299, 1304, 1311, 1319, 1321, 1322, 1323, 1325, 1332, 1334, 1336, 1340, 1341, 1344, 1346, 1347, 1348, 1350, 1352, 1355, 1360, 1368, 1371], "arbitrari": [80, 224, 339, 431, 830, 857, 945, 951], "arbitrarili": [248, 339], "arcco": [830, 1340], "arccosh": [830, 1340], "arcsin": [830, 1340], "arcsinh": [830, 1340], "arctan": [751, 752, 830, 1340], "arctan2": 752, "arctanh": [830, 1340], "aren": [37, 46, 339, 945], "arg": [31, 50, 61, 62, 64, 65, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 135, 185, 189, 220, 262, 267, 339, 364, 623, 753, 779, 830, 866, 888, 891, 945, 1193, 1340, 1353], "arg_max": [830, 1340], "arg_min": [830, 1340], "arg_sort": [830, 1340], "arg_tru": [754, 830, 1340], "arg_uniqu": [830, 1340], "arg_wher": [365, 830], "argmax": [577, 830], "argument": [36, 39, 45, 133, 135, 137, 138, 142, 150, 152, 153, 168, 170, 172, 182, 205, 209, 216, 228, 229, 244, 261, 262, 271, 277, 278, 285, 298, 305, 309, 313, 314, 318, 339, 463, 476, 488, 494, 515, 577, 619, 623, 639, 672, 708, 709, 710, 728, 745, 751, 752, 753, 756, 757, 758, 759, 761, 776, 808, 812, 820, 826, 830, 858, 863, 869, 870, 875, 888, 894, 896, 897, 903, 910, 915, 916, 921, 942, 945, 951, 1076, 1089, 1128, 1289, 1290, 1291, 1322, 1340, 1362, 1363], "aris": 140, "arithmet": [222, 339], "arm": 160, "arm64": 160, "around": [37, 46, 339, 945], "arr": [297, 339, 822, 1321, 1332, 1340], "arr_bar": 1358, "arr_foo": 1358, "arrai": [123, 127, 138, 139, 142, 150, 153, 194, 215, 216, 291, 296, 297, 298, 339, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 396, 424, 425, 426, 427, 536, 551, 552, 553, 554, 556, 565, 566, 568, 571, 573, 577, 635, 641, 643, 645, 647, 649, 652, 654, 656, 662, 734, 757, 775, 789, 809, 830, 863, 945, 950, 953, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 1001, 1034, 1035, 1036, 1037, 1042, 1099, 1152, 1167, 1168, 1169, 1170, 1172, 1180, 1181, 1182, 1184, 1187, 1189, 1190, 1222, 1227, 1228, 1230, 1233, 1234, 1235, 1242, 1246, 1315, 1319, 1321, 1322, 1323, 1340, 1361, 1367, 1370], "array_agg": 1361, "array_contain": 1361, "array_get": 1361, "array_length": 1361, "array_low": 1361, "array_mean": 1361, "array_revers": 1361, "array_sum": 1361, "array_to_str": 1361, "array_uniqu": 1361, "array_upp": 1361, "arraylik": [1042, 1340], "arrow": [41, 42, 47, 123, 124, 140, 141, 144, 146, 155, 195, 241, 273, 274, 291, 293, 297, 339, 945, 954, 1315, 1321, 1340], "arrowarrayexport": [123, 124], "arrowinvaliderror": [39, 339], "arrowstreamexport": [123, 124], "as_": [1340, 1345], "as_arrai": 789, "as_dict": [139, 261, 339], "as_expr": 951, "as_seri": [200, 292, 339, 848, 945, 951], "asarrai": [194, 953], "ascend": [229, 255, 271, 339, 619, 639, 830, 870, 885, 894, 945], "ascii": [7, 20, 413, 414, 677, 687, 689, 690, 694, 695, 701, 703, 714, 723, 951, 1018, 1019, 1258, 1268, 1270, 1271, 1275, 1276, 1282, 1284, 1295, 1304], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [677, 687, 689, 701, 1258, 1268, 1270, 1282], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1371, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 951, "ascii_t": 192, "ascii_uppercas": [307, 339], "asd": [678, 685, 1259, 1266], "asia": [130, 951, 1051, 1052, 1079], "asid": 468, "asin": 1361, "asind": 1361, "asof": [244, 339, 875, 945], "asofjoinstrategi": [244, 339, 875, 945], "assert": [161, 162, 163, 164, 168, 172, 271, 339, 842, 951], "assert_frame_equ": [162, 163, 214, 339, 1371], "assert_frame_not_equ": [161, 164], "assert_series_equ": [161, 164, 1098, 1340, 1371], "assert_series_not_equ": [162, 163], "assert_someth": 166, "assertionerror": [161, 162, 163, 164], "assign": [166, 229, 324, 339, 388, 569, 619, 629, 705, 706, 830, 870, 927, 945, 994, 1185, 1216, 1286, 1287, 1340], "associ": [38, 40, 51, 141, 143, 167, 170, 274, 339, 950, 1351, 1353, 1357], "assum": [32, 274, 339, 880, 928, 945, 1363], "assume_rol": 32, "assumpt": [577, 830], "async": [140, 852, 945], "async_engin": 140, "asynchron": [58, 140, 852, 945], "asyncio": [58, 140, 852, 945], "asyncresult": [58, 852, 945], "asyncsurrealdb": 140, "ata": 26, "atan": 1361, "atan2": [751, 752, 1361], "atan2_ab": 1365, "atan2d": [752, 1361], "atan2d_ab": 1365, "atand": 1361, "atg": 26, "atgataaaggag": 26, "atol": [161, 162, 163, 164], "attain": [672, 830], "attempt": [1, 431, 830, 857, 945], "attr": [339, 342, 1340, 1345], "attribut": [60, 63, 66, 67, 68, 69, 70, 78, 82, 165, 183, 184, 186, 187, 339, 342, 822, 823, 825, 826, 831, 832, 835, 837, 838, 839, 920, 945, 1332, 1334, 1336, 1340, 1341, 1345, 1346, 1347, 1348], "attributeerror": 1, "audi": [292, 339, 636, 830], "august": 468, "australia": 771, "auth": 34, "authent": [39, 142, 150, 152, 153, 154, 155, 157, 177, 339], "author": 1, "auto": [37, 39, 41, 45, 46, 47, 48, 49, 59, 123, 125, 126, 127, 129, 142, 147, 148, 150, 152, 153, 155, 156, 157, 177, 182, 303, 339, 945, 1371], "auto_structifi": [277, 313, 339, 896, 915, 945], "autofilt": [40, 339], "autofit": [40, 339], "autogener": [138, 139, 143, 149, 152], "automat": [8, 37, 46, 59, 123, 125, 126, 127, 129, 130, 135, 138, 139, 140, 141, 147, 148, 150, 152, 155, 156, 168, 172, 174, 177, 277, 286, 313, 339, 577, 634, 708, 709, 710, 809, 830, 896, 904, 915, 945, 1220, 1221, 1289, 1290, 1291, 1324, 1340, 1350, 1352, 1355, 1368], "autumn": [699, 700], "avail": [40, 45, 49, 132, 140, 141, 142, 153, 154, 166, 179, 180, 181, 192, 263, 286, 338, 339, 468, 629, 809, 822, 823, 825, 829, 830, 831, 832, 835, 836, 837, 838, 839, 842, 904, 943, 944, 945, 951, 1040, 1216, 1332, 1334, 1336, 1340, 1341, 1344, 1346, 1347, 1348, 1359], "available_timezon": [66, 951], "averag": [40, 339, 484, 485, 486, 487, 629, 830, 1100, 1101, 1102, 1103, 1216, 1340, 1357], "avg": 1361, "avocado": 1363, "avoid": [168, 172, 220, 267, 273, 339, 350, 830, 866, 891, 945], "avro": [35, 136, 185, 339, 842], "avrocompress": [35, 339], "aw": [32, 37, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 339, 945], "awai": 1362, "await": [58, 140, 852, 939, 945], "await_result": 945, "awar": [10, 140, 241, 273, 274, 293, 339, 485, 677, 687, 689, 701, 716, 830, 945, 1101, 1258, 1268, 1270, 1282, 1297, 1340], "aws_access_key_id": [39, 142, 153, 157, 339], "aws_region": [39, 153, 157, 339], "aws_secret_access_kei": [39, 142, 153, 157, 339], "awsassumerolekwarg": 32, "axi": [254, 306, 339, 342, 751, 752, 884, 911, 945, 1340, 1345], "aya": [703, 1284, 1295], "az": [142, 153, 154], "azur": [33, 37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 154, 155, 156, 157, 182, 339, 945], "azure_storage_account_kei": [142, 153, 154], "azure_storage_account_nam": [142, 153, 154], "b": [1, 10, 35, 37, 39, 41, 42, 45, 54, 59, 82, 95, 98, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 140, 143, 196, 197, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 246, 247, 249, 251, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 282, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 348, 350, 351, 353, 354, 364, 366, 371, 376, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 407, 409, 410, 422, 429, 433, 465, 468, 488, 490, 492, 493, 494, 496, 499, 506, 507, 510, 513, 514, 515, 517, 520, 522, 523, 524, 525, 530, 536, 541, 548, 558, 559, 560, 561, 577, 578, 583, 599, 602, 603, 604, 605, 606, 607, 608, 616, 617, 619, 623, 626, 629, 633, 634, 636, 638, 664, 670, 672, 679, 683, 688, 692, 699, 700, 724, 725, 736, 739, 743, 745, 746, 747, 748, 749, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 809, 811, 812, 813, 814, 815, 819, 826, 830, 845, 846, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 945, 951, 957, 960, 982, 997, 998, 999, 1000, 1001, 1002, 1003, 1017, 1021, 1022, 1039, 1042, 1078, 1081, 1095, 1098, 1099, 1106, 1109, 1128, 1133, 1152, 1174, 1175, 1176, 1177, 1214, 1219, 1260, 1264, 1269, 1273, 1280, 1281, 1305, 1307, 1308, 1310, 1322, 1327, 1340, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1363, 1364, 1365, 1368], "b1": [52, 54], "b2": [52, 54], "b345": [40, 339], "b4": [40, 339], "b_b": [286, 339], "b_btm_by_a": [409, 830], "b_btm_by_b": [409, 830], "b_by_ca": [409, 736, 830], "b_by_cb": [409, 736, 830], "b_is_not_nan": [523, 830], "b_isnan": [522, 830], "b_isnul": [525, 830], "b_not_nul": [524, 830], "b_revers": [603, 607, 636, 830], "b_suffix": 608, "b_sum": [318, 921], "b_top_by_a": [736, 830], "b_top_by_b": [736, 830], "ba": [431, 488, 592, 707, 776, 830, 951], "back": [4, 51, 157, 217, 229, 279, 297, 298, 339, 592, 619, 700, 830, 851, 870, 898, 920, 945, 1106, 1322, 1340], "backend": [39, 140, 141, 142, 153, 154, 339, 342, 1340, 1345], "background": [339, 343, 851, 944, 945], "backward": [45, 49, 219, 244, 339, 391, 436, 456, 493, 830, 865, 875, 945, 1045, 1069, 1109, 1340], "backward_fil": [499, 663, 830], "bad": [699, 700, 1280, 1281], "balanc": [171, 173, 1371], "ballon_dor": [684, 686, 1265, 1267], "banana": [204, 292, 321, 323, 326, 327, 328, 329, 330, 331, 332, 339, 409, 636, 681, 707, 736, 830, 924, 926, 929, 930, 931, 932, 933, 934, 935, 1363], "banded_column": [40, 339], "banded_row": [40, 339], "bar": [35, 37, 39, 41, 42, 43, 44, 45, 134, 147, 148, 200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 217, 220, 222, 224, 225, 226, 231, 233, 234, 235, 237, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 263, 265, 267, 268, 269, 272, 275, 276, 277, 279, 284, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 304, 305, 310, 311, 312, 317, 339, 342, 412, 431, 512, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 669, 678, 680, 683, 685, 686, 702, 704, 706, 711, 712, 749, 760, 761, 762, 777, 782, 783, 786, 787, 793, 795, 797, 798, 800, 801, 808, 811, 815, 819, 820, 826, 830, 848, 853, 854, 858, 859, 860, 861, 866, 872, 873, 874, 887, 891, 892, 895, 896, 909, 910, 914, 945, 950, 951, 1016, 1164, 1251, 1259, 1261, 1264, 1266, 1267, 1283, 1287, 1292, 1293, 1340, 1354, 1356, 1357, 1358, 1360, 1363, 1366], "bar2": 1363, "bar22": [222, 339], "bar_": 704, "bar_3": [294, 339], "bar_4": [294, 339], "bar_a": [263, 339], "bar_at_2": 1358, "bar_avg": 1357, "bar_b": [263, 339], "bar_color": [40, 339], "bar_max": 1357, "bar_median": 1357, "bar_min": 1357, "bar_negative_border_color_sam": [40, 339], "bar_negative_color_sam": [40, 339], "bar_std": 1357, "bar_sum": 1357, "bar_var": 1357, "bare": [585, 586, 951], "base": [31, 40, 64, 109, 111, 143, 170, 212, 220, 229, 245, 267, 271, 339, 437, 445, 481, 484, 485, 486, 487, 494, 509, 514, 572, 573, 577, 578, 624, 626, 634, 639, 642, 644, 646, 648, 650, 653, 655, 657, 718, 830, 866, 870, 876, 891, 894, 945, 951, 1046, 1054, 1095, 1100, 1101, 1102, 1103, 1123, 1127, 1188, 1189, 1193, 1212, 1214, 1220, 1221, 1299, 1331, 1340, 1356, 1362, 1371], "base64": [393, 394, 679, 680, 998, 999, 1260, 1261], "base_nam": [303, 339], "base_utc_offset": [445, 1054], "baseexcept": 1368, "basi": [40, 143, 168, 339], "basic": [40, 194, 339, 584, 953, 1371], "basic_chart": [40, 339], "batch": [42, 57, 58, 132, 133, 139, 140, 146, 148, 156, 158, 273, 301, 339, 851, 852, 880, 945], "batch_siz": [37, 46, 133, 138, 139, 140, 148, 156, 158, 301, 339, 945], "batchedcsvread": 139, "baz": [224, 234, 235, 305, 339, 686, 704, 706, 777, 786, 801, 826, 873, 910, 945, 950, 951, 1267, 1287, 1354, 1360, 1363], "bb": [951, 1040, 1340, 1363, 1368], "bbb": [1, 40, 339, 724, 726, 727, 951], "bc": [688, 700, 813, 1269], "bcbc45": 1363, "bea": 12, "bear": 951, "bearer": 177, "bearer_token": 177, "beauti": 12, "becaus": [148, 156, 215, 229, 246, 248, 307, 325, 339, 498, 541, 569, 830, 870, 928, 945, 1099, 1157, 1193, 1340], "becom": [170, 244, 338, 339, 875, 943, 944, 945], "bed3": [40, 339], "been": [5, 30, 40, 175, 196, 320, 339, 500, 578, 596, 629, 830, 923, 1216, 1340], "beetl": [292, 339, 636, 830], "befor": [40, 65, 66, 133, 135, 138, 140, 143, 152, 158, 161, 162, 163, 164, 174, 192, 217, 229, 244, 286, 296, 301, 305, 339, 402, 403, 405, 406, 426, 427, 428, 577, 619, 620, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 683, 723, 730, 758, 806, 807, 830, 870, 872, 875, 910, 945, 1007, 1008, 1010, 1011, 1036, 1037, 1038, 1106, 1209, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1264, 1304, 1311, 1340, 1356], "beforehand": [713, 715, 716, 1294, 1296, 1297], "begin": [12, 40, 339, 484, 486, 487, 684, 714, 830, 1100, 1102, 1103, 1265, 1295, 1340], "behav": [220, 267, 339, 494, 578, 709, 710, 830, 866, 891, 945], "behavior": [45, 49, 150, 157, 211, 212, 220, 243, 244, 339, 375, 500, 544, 546, 683, 777, 786, 830, 859, 860, 874, 875, 942, 945, 981, 1160, 1162, 1264], "behaviour": [10, 51, 211, 212, 220, 267, 286, 339, 676, 684, 685, 688, 699, 700, 737, 809, 830, 859, 860, 866, 891, 904, 945, 1257, 1265, 1266, 1269, 1280, 1281], "behind": 174, "being": [13, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 133, 134, 138, 139, 140, 142, 143, 148, 149, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 200, 216, 245, 286, 294, 296, 301, 308, 339, 342, 343, 428, 429, 509, 578, 626, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 683, 755, 757, 775, 788, 789, 830, 848, 851, 852, 862, 863, 876, 904, 912, 945, 1022, 1038, 1039, 1123, 1214, 1226, 1229, 1231, 1232, 1264, 1316, 1319, 1324, 1340, 1345, 1371], "belong": [1, 229, 339, 870, 945], "below": [19, 39, 142, 143, 153, 154, 212, 220, 263, 267, 339, 468, 493, 690, 699, 700, 714, 769, 770, 772, 773, 817, 818, 820, 826, 830, 866, 891, 945, 1081, 1271, 1280, 1281, 1295], "benchmark": 138, "best": [248, 325, 339, 578, 830, 1193, 1340], "better": [248, 296, 297, 325, 339, 414, 578, 695, 830, 847, 928, 945, 1019, 1239, 1241, 1276, 1340], "between": [24, 59, 94, 165, 166, 168, 172, 197, 205, 243, 255, 265, 273, 331, 339, 376, 410, 432, 433, 468, 515, 539, 548, 558, 559, 560, 561, 620, 626, 627, 649, 650, 675, 691, 751, 752, 755, 760, 762, 789, 803, 806, 807, 830, 874, 885, 890, 934, 945, 982, 1014, 1021, 1041, 1042, 1081, 1128, 1155, 1164, 1174, 1175, 1176, 1177, 1209, 1214, 1215, 1231, 1256, 1272, 1340, 1357, 1365], "between_ab": [515, 830], "beyond": [721, 1302], "bia": [486, 487, 527, 651, 669, 830, 1102, 1103, 1143, 1232, 1251, 1340], "bias": [527, 669, 830, 1143, 1251, 1340], "big": [139, 396, 1001], "big_fil": 139, "bigidx": 131, "bigqueri": 141, "bigquery_format": 185, "bin": [429, 509, 626, 718, 744, 823, 830, 1039, 1123, 1214, 1299, 1334, 1340, 1345], "bin2int": 396, "bin_count": [509, 830, 1123, 1340], "bin_i": [744, 830], "bin_x": [744, 830], "bin_xor_xi": [744, 830], "binari": [40, 41, 134, 140, 208, 279, 339, 392, 393, 394, 395, 396, 397, 398, 431, 592, 679, 830, 857, 898, 945, 951, 997, 998, 1000, 1001, 1002, 1003, 1260, 1359], "binary_str": [744, 830], "bind": 143, "birthdai": 138, "bit": [65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 400, 401, 402, 403, 405, 406, 631, 676, 830, 1005, 1007, 1008, 1010, 1011, 1218, 1257, 1340, 1359, 1363], "bit_and": 1361, "bit_count": 1361, "bit_length": 1361, "bit_or": 1361, "bit_xor": 1361, "bitmap": [215, 339, 1099, 1340], "bitwis": [352, 399, 404, 407, 618, 744, 745, 746, 747, 748, 830, 1004, 1009, 1012, 1340, 1361, 1367], "bitwise_and": [830, 1340], "bitwise_count_on": [830, 1340], "bitwise_count_zero": [830, 1340], "bitwise_leading_on": [830, 1340], "bitwise_leading_zero": [830, 1340], "bitwise_or": [830, 1340], "bitwise_trailing_on": [830, 1340], "bitwise_trailing_zero": [830, 1340], "bitwise_xor": [830, 1340], "bla": [678, 685, 1259, 1266], "black": [248, 339, 392, 393, 394, 395, 398], "blindli": [541, 1157], "block": [20, 58, 228, 304, 339, 820, 852, 869, 892, 909, 918, 919, 928, 945, 1239, 1241, 1340], "blue": [50, 90, 91, 392, 393, 394, 395, 398, 741, 830, 1329, 1340], "bob": [138, 255, 339, 885, 945, 1369], "bodi": [40, 339, 343], "bold": [40, 339], "bom": [37, 46, 339, 945], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 90, 123, 124, 125, 126, 128, 129, 130, 134, 135, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 194, 196, 199, 200, 201, 202, 207, 209, 214, 219, 220, 221, 222, 226, 227, 228, 229, 233, 234, 236, 237, 238, 241, 243, 244, 252, 261, 263, 267, 268, 272, 273, 274, 275, 280, 283, 285, 286, 289, 292, 294, 297, 298, 302, 303, 304, 305, 308, 309, 311, 313, 321, 323, 326, 329, 339, 350, 351, 352, 353, 354, 364, 367, 368, 371, 375, 376, 384, 389, 392, 393, 395, 398, 409, 410, 411, 415, 423, 424, 425, 426, 427, 428, 429, 436, 448, 464, 481, 482, 483, 484, 486, 487, 503, 505, 506, 509, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 537, 541, 544, 546, 548, 557, 564, 569, 570, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 613, 614, 616, 618, 619, 621, 622, 626, 629, 631, 640, 641, 643, 645, 647, 649, 651, 652, 654, 656, 660, 662, 664, 669, 671, 672, 675, 676, 677, 678, 679, 681, 687, 688, 689, 691, 699, 700, 701, 704, 705, 707, 713, 715, 716, 718, 720, 724, 726, 727, 736, 738, 741, 744, 745, 746, 747, 748, 750, 753, 754, 755, 759, 760, 763, 764, 769, 770, 772, 773, 784, 785, 788, 789, 790, 792, 796, 802, 805, 808, 809, 812, 814, 817, 818, 820, 821, 830, 846, 848, 849, 851, 852, 856, 858, 862, 865, 866, 869, 870, 874, 875, 880, 884, 889, 891, 892, 899, 901, 903, 904, 908, 909, 910, 911, 912, 915, 920, 924, 926, 929, 932, 945, 950, 951, 953, 958, 959, 970, 973, 974, 977, 981, 982, 990, 995, 997, 998, 1000, 1003, 1014, 1015, 1017, 1020, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045, 1057, 1077, 1095, 1097, 1098, 1100, 1102, 1103, 1110, 1112, 1119, 1120, 1123, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1148, 1149, 1153, 1157, 1160, 1162, 1164, 1173, 1180, 1186, 1193, 1205, 1207, 1210, 1211, 1214, 1216, 1217, 1218, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1241, 1242, 1246, 1251, 1253, 1256, 1257, 1258, 1259, 1260, 1262, 1268, 1269, 1270, 1272, 1280, 1281, 1282, 1285, 1286, 1288, 1294, 1296, 1297, 1299, 1301, 1316, 1321, 1322, 1326, 1329, 1340, 1349, 1350, 1352, 1358, 1363, 1368], "boolean": [51, 168, 199, 220, 222, 267, 285, 302, 339, 351, 352, 353, 367, 368, 371, 392, 395, 398, 409, 448, 494, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 532, 533, 537, 616, 618, 621, 622, 672, 692, 736, 743, 744, 753, 754, 812, 820, 830, 846, 866, 891, 903, 908, 945, 951, 958, 959, 971, 973, 974, 977, 997, 1057, 1110, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1148, 1149, 1153, 1207, 1210, 1211, 1241, 1257, 1331, 1340, 1360], "border": 20, "both": [10, 25, 37, 46, 50, 90, 91, 140, 143, 157, 203, 229, 243, 244, 245, 255, 271, 272, 298, 308, 339, 354, 418, 429, 468, 488, 515, 626, 639, 642, 644, 646, 648, 650, 653, 655, 657, 703, 769, 770, 772, 773, 788, 789, 817, 818, 826, 830, 841, 870, 874, 875, 876, 885, 894, 912, 945, 951, 1027, 1081, 1128, 1284, 1322, 1340, 1368, 1369], "boto3": 32, "bottom": [199, 339, 409, 830, 846, 945], "bottom_k": [302, 339, 409, 735, 736, 830, 908, 945, 1325, 1340], "bottom_k_bi": [408, 735, 736, 830], "bound": [105, 138, 139, 215, 229, 339, 375, 418, 515, 544, 546, 569, 575, 740, 750, 769, 770, 772, 773, 788, 789, 817, 818, 830, 870, 945, 981, 1027, 1099, 1128, 1160, 1162, 1191, 1328, 1340, 1358], "boundari": [229, 339, 418, 509, 721, 830, 870, 945, 1027, 1123, 1302, 1340], "box": [20, 248, 339], "box_draw": 20, "branch": [57, 58, 851, 852, 862, 889, 901, 945], "break": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 133, 134, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 243, 245, 286, 296, 301, 308, 339, 342, 343, 428, 429, 509, 578, 626, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 757, 788, 789, 830, 851, 852, 862, 874, 876, 904, 912, 945, 1022, 1038, 1039, 1123, 1214, 1226, 1229, 1231, 1232, 1319, 1324, 1340, 1345], "breakpoint": [429, 509, 626, 830, 1039, 1123, 1214, 1340], "breezah": 152, "breviti": 192, "broadcast": [701, 757, 951, 1282], "broader": 951, "brotli": [45, 49, 339, 945], "brussel": [462, 1075], "bst": [441, 445, 462, 1050, 1054, 1075], "bucket": [39, 142, 153, 154, 157, 339, 463, 476, 509, 830, 1076, 1089, 1123, 1340], "bud": [699, 700, 1280, 1281], "budget": 1349, "buffer": [138, 139, 140, 215, 241, 339, 396, 1001, 1099, 1340], "buffer_s": [241, 339], "bug": [577, 578, 830, 880, 928, 945, 1193, 1340], "build": [56, 124, 951, 1371], "built": 94, "builtin": [136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 339, 431, 830, 857, 945], "bundl": 192, "busi": [436, 755, 1045], "business_day_count": [436, 1045], "by_alternate_row": 1, "by_dtyp": 951, "by_first_letter_of_column_nam": 52, "by_first_letter_of_column_valu": 52, "by_index": 951, "by_left": [244, 339, 875, 945], "by_nam": 951, "by_pred": [272, 339], "by_right": [244, 339, 875, 945], "bye": 1, "byi": 1363, "bys": [229, 339, 870, 945], "byte": [35, 37, 40, 41, 42, 45, 46, 49, 134, 136, 137, 138, 139, 144, 145, 146, 147, 148, 151, 152, 155, 156, 208, 215, 279, 339, 396, 413, 414, 431, 592, 688, 689, 690, 694, 695, 703, 714, 830, 857, 898, 945, 1001, 1018, 1019, 1099, 1269, 1270, 1271, 1275, 1276, 1284, 1295, 1340, 1363], "bytesio": [40, 41, 42, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 279, 339, 431, 592, 830, 857, 898, 945], "c": [1, 10, 35, 37, 39, 41, 42, 45, 52, 54, 59, 98, 124, 126, 128, 130, 135, 143, 152, 196, 197, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 212, 213, 214, 216, 220, 222, 225, 226, 227, 228, 229, 231, 233, 234, 242, 243, 246, 247, 249, 251, 253, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 272, 275, 276, 277, 284, 285, 286, 287, 288, 290, 291, 294, 295, 296, 297, 298, 299, 302, 306, 307, 308, 310, 311, 313, 318, 321, 322, 323, 326, 327, 329, 332, 333, 339, 343, 348, 350, 351, 353, 371, 391, 409, 429, 468, 506, 515, 536, 548, 578, 585, 602, 603, 617, 619, 623, 626, 664, 705, 713, 736, 739, 746, 748, 749, 751, 752, 753, 756, 757, 759, 760, 761, 762, 764, 765, 767, 777, 778, 779, 782, 783, 786, 787, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 809, 811, 813, 814, 815, 819, 826, 830, 846, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 866, 869, 870, 874, 878, 887, 889, 891, 892, 893, 895, 896, 901, 902, 903, 904, 908, 911, 912, 915, 917, 921, 924, 925, 926, 929, 930, 932, 935, 936, 945, 951, 1021, 1039, 1128, 1152, 1214, 1286, 1294, 1308, 1327, 1340, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1363, 1368], "c00": 951, "c01": 951, "c02": 951, "c03": 951, "c05": 951, "c1": 388, "c123": 1363, "c2": 388, "c20": 951, "c25": 951, "c3": 388, "c40": 951, "c45": 1363, "c4d79b": [40, 339], "c50": 951, "c567": [40, 339], "c60": 951, "c75": 951, "c80": 951, "c8ae6d2b276": [40, 339], "c93": 951, "c95": 951, "c96": 951, "c97": 951, "c98": 951, "c99": 951, "c_btm_by_a": [409, 830], "c_btm_by_b": [409, 830], "c_by_ca": [409, 736, 830], "c_by_cb": [409, 736, 830], "c_c_c": [809, 904, 945], "c_contigu": [297, 339], "c_max": [619, 830], "c_mean_squar": [318, 921], "c_min": [619, 830], "c_top_by_a": [736, 830], "c_top_by_b": [736, 830], "c_total": 1368, "cach": [50, 57, 58, 90, 91, 118, 144, 152, 155, 157, 161, 162, 163, 164, 176, 633, 634, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 713, 715, 716, 720, 830, 841, 851, 852, 862, 889, 901, 945, 1017, 1220, 1221, 1294, 1296, 1297, 1301, 1340], "cadi": [263, 339], "cafe": [718, 1299], "caf\u00e9": [413, 414, 694, 695, 951, 1018, 1019, 1275, 1276], "calamin": 143, "calcul": [40, 45, 49, 51, 207, 229, 287, 310, 339, 432, 484, 485, 486, 487, 527, 539, 558, 565, 571, 575, 651, 669, 674, 740, 742, 762, 806, 807, 811, 819, 830, 856, 870, 905, 913, 945, 1040, 1041, 1100, 1101, 1102, 1103, 1143, 1155, 1174, 1232, 1251, 1255, 1330, 1340], "calendar": [65, 66, 229, 244, 271, 309, 339, 439, 449, 451, 458, 463, 476, 480, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 774, 817, 818, 830, 870, 875, 894, 945, 1048, 1058, 1063, 1071, 1076, 1089, 1093, 1101, 1340], "calendar_year": [449, 480], "call": [37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 57, 58, 128, 133, 135, 139, 140, 142, 143, 148, 150, 152, 153, 155, 156, 157, 161, 162, 163, 164, 168, 172, 182, 192, 199, 228, 229, 246, 248, 271, 286, 297, 302, 338, 339, 408, 409, 424, 427, 436, 577, 578, 602, 603, 605, 607, 609, 610, 633, 634, 665, 735, 736, 755, 761, 826, 830, 846, 851, 852, 862, 869, 870, 889, 894, 901, 904, 908, 942, 943, 944, 945, 951, 1013, 1045, 1193, 1221, 1247, 1321, 1325, 1340, 1350, 1354, 1368], "callabl": [52, 53, 54, 55, 133, 152, 222, 248, 262, 268, 325, 339, 388, 569, 577, 578, 603, 604, 623, 640, 764, 765, 778, 791, 792, 804, 830, 880, 888, 892, 928, 945, 994, 1185, 1193, 1226, 1340], "caller": [141, 255, 339, 569, 880, 885, 928, 945], "cam": [268, 339, 892, 945], "can": [1, 14, 27, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 65, 66, 68, 82, 90, 91, 126, 133, 138, 139, 140, 142, 143, 144, 148, 149, 150, 152, 153, 155, 156, 157, 158, 166, 167, 168, 172, 174, 177, 182, 192, 194, 199, 201, 211, 212, 213, 222, 224, 228, 229, 236, 238, 240, 243, 244, 248, 259, 263, 271, 273, 274, 277, 279, 280, 285, 296, 297, 301, 302, 303, 307, 313, 316, 325, 339, 342, 351, 388, 409, 424, 427, 428, 431, 436, 455, 456, 458, 462, 465, 468, 476, 485, 491, 494, 515, 541, 569, 577, 578, 585, 589, 592, 593, 599, 602, 603, 605, 607, 609, 610, 619, 624, 626, 631, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 662, 664, 669, 672, 677, 686, 693, 699, 700, 701, 708, 709, 710, 713, 724, 736, 753, 755, 768, 771, 778, 780, 784, 785, 788, 792, 809, 820, 826, 829, 830, 841, 846, 847, 851, 852, 857, 859, 860, 862, 870, 874, 875, 894, 896, 898, 899, 901, 903, 904, 908, 915, 918, 919, 945, 951, 953, 994, 1038, 1045, 1068, 1069, 1071, 1075, 1076, 1078, 1081, 1089, 1101, 1107, 1128, 1157, 1185, 1193, 1198, 1212, 1214, 1218, 1221, 1239, 1241, 1242, 1245, 1251, 1258, 1259, 1267, 1274, 1280, 1281, 1282, 1289, 1290, 1291, 1294, 1319, 1321, 1340, 1345, 1355, 1368], "cancel": [851, 945], "candid": [684, 686, 1265, 1267], "cannot": [1, 45, 49, 100, 103, 138, 139, 143, 144, 146, 149, 150, 157, 174, 192, 248, 274, 275, 297, 316, 325, 339, 393, 468, 488, 557, 578, 593, 660, 679, 705, 726, 792, 830, 901, 919, 920, 928, 945, 951, 998, 1081, 1173, 1193, 1238, 1260, 1286, 1321, 1340], "capabl": [1, 40, 339], "capac": [215, 283, 339, 1099, 1246, 1340], "capit": [721, 1302, 1363], "captur": [684, 686, 699, 700, 1265, 1267, 1280, 1281], "car": [268, 292, 339, 636, 830, 892, 945], "cardin": [198, 339, 355, 749, 830, 845, 945, 961, 1340], "care": [40, 280, 339, 578, 619, 662, 830, 899, 945, 1242, 1340], "cars_revers": [636, 830], "cartesian": [243, 339, 874, 945], "case": [40, 50, 51, 58, 98, 123, 125, 126, 127, 129, 135, 140, 147, 148, 156, 157, 174, 217, 229, 241, 244, 248, 263, 271, 273, 274, 293, 296, 297, 339, 437, 485, 577, 589, 590, 603, 619, 639, 676, 677, 685, 687, 688, 689, 699, 700, 701, 721, 830, 852, 870, 875, 891, 894, 945, 951, 1046, 1101, 1106, 1257, 1258, 1266, 1268, 1269, 1270, 1280, 1281, 1282, 1302, 1319, 1340], "cast": [1, 39, 53, 54, 123, 125, 126, 129, 135, 161, 162, 163, 164, 222, 229, 262, 271, 296, 297, 301, 313, 339, 354, 426, 427, 438, 465, 468, 479, 618, 623, 624, 631, 633, 639, 692, 693, 723, 730, 734, 758, 759, 810, 830, 870, 888, 894, 915, 945, 951, 1022, 1036, 1037, 1047, 1078, 1081, 1092, 1212, 1218, 1273, 1274, 1304, 1311, 1317, 1321, 1323, 1324, 1340, 1361], "cast_str_to_int": [262, 339, 888, 945], "cast_to_supertyp": [135, 830], "cat": [26, 50, 90, 91, 429, 626, 676, 678, 719, 722, 734, 759, 825, 830, 951, 1039, 1123, 1214, 1257, 1259, 1300, 1303, 1336, 1340], "catalog": [0, 842], "catalog_nam": [178, 180, 181, 182], "cataloginfo": [179, 190], "categor": [39, 50, 69, 90, 91, 93, 161, 162, 163, 164, 243, 294, 339, 411, 412, 413, 414, 415, 429, 626, 633, 634, 734, 830, 951, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1039, 1214, 1220, 1221, 1323, 1340], "categori": [40, 50, 69, 91, 294, 339, 412, 429, 509, 626, 830, 1016, 1039, 1123, 1214, 1316, 1340], "categorical_as_str": [161, 162, 163, 164], "categoricalord": 63, "categoricaltyp": [291, 339], "caus": [106, 115, 124, 138, 139, 140, 152, 196, 217, 297, 339, 577, 830, 1106, 1321, 1340], "cba": 710, "cbrt": [830, 1340, 1361], "cbrt_a": 1362, "cc": [488, 776, 830, 951, 1040, 1340, 1363], "ccc": [1, 40, 339, 724, 726, 727, 951, 1363], "ccy": 1371, "cd": [700, 724, 726, 727, 951], "cd34": 700, "cdatainterfac": [124, 195, 954], "cde": [951, 1363], "cdt": [463, 476, 1076, 1089], "ceil": [53, 830, 1340, 1361], "ceil_a": 1362, "cell": [15, 16, 40, 263, 339], "cent": [439, 1280], "center": [15, 16, 40, 339, 484, 486, 487, 640, 641, 643, 645, 647, 649, 652, 654, 656, 830, 1100, 1102, 1103, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1340], "central": [153, 154, 192, 527, 669, 830, 1143, 1251, 1340], "centuri": 1364, "certain": [46, 47, 48, 49, 58, 234, 309, 339, 709, 710, 826, 851, 852, 889, 945, 1340], "certainli": [713, 715, 716, 1294, 1296, 1297], "cest": [462, 1075], "cet": [462, 1075], "cfg": [2, 4, 17, 192], "cfg_ascii_fram": 192, "cfg_markdown": 192, "cfg_verbos": 192, "cfoo": [917, 945], "chain": [602, 603, 605, 607, 609, 610, 820], "chanc": [165, 168, 172, 1371], "chang": [30, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 51, 57, 58, 67, 69, 73, 124, 133, 134, 135, 138, 139, 140, 142, 143, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 245, 286, 296, 301, 308, 315, 339, 342, 343, 428, 429, 432, 468, 509, 578, 619, 620, 626, 633, 638, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 757, 788, 789, 830, 851, 852, 862, 876, 904, 912, 918, 945, 951, 1021, 1022, 1038, 1039, 1081, 1123, 1209, 1214, 1220, 1225, 1226, 1229, 1231, 1232, 1246, 1319, 1324, 1340, 1345], "changes_length": [135, 830], "char": [27, 138, 152, 685, 1266], "char_length": 1363, "charact": [7, 9, 12, 20, 26, 27, 28, 37, 38, 46, 92, 137, 138, 139, 141, 152, 339, 413, 414, 458, 682, 683, 685, 690, 694, 695, 697, 698, 699, 700, 703, 704, 705, 708, 709, 710, 711, 712, 714, 721, 723, 889, 945, 951, 1018, 1019, 1071, 1263, 1264, 1266, 1271, 1275, 1276, 1278, 1279, 1280, 1281, 1284, 1285, 1286, 1289, 1290, 1291, 1295, 1302, 1304, 1363], "character_length": 1363, "characterist": [168, 172], "charli": [138, 1369], "chart": [40, 339, 342, 889, 945, 1340, 1345], "cheap": [201, 202, 278, 314, 339, 849, 850, 897, 916, 945, 1026, 1028, 1340], "cheaper": [544, 1160], "check": [39, 66, 100, 138, 139, 152, 161, 162, 163, 164, 176, 214, 239, 243, 244, 339, 371, 392, 395, 398, 411, 415, 506, 515, 519, 537, 676, 681, 688, 707, 830, 874, 875, 880, 945, 977, 997, 1000, 1003, 1015, 1020, 1098, 1119, 1120, 1130, 1133, 1140, 1142, 1153, 1257, 1262, 1269, 1288, 1340], "check_column_ord": [161, 162], "check_dtyp": [161, 162, 163, 164, 950, 1098, 1340], "check_exact": [161, 162, 163, 164], "check_nam": [163, 164, 1098, 1340], "check_ord": [163, 164], "check_row_ord": [161, 162], "check_sorted": [244, 339, 875, 945], "choos": [45, 47, 49, 229, 263, 339, 468, 870, 945, 1081], "chrono": [37, 46, 94, 339, 465, 468, 713, 715, 716, 720, 945, 1078, 1081, 1294, 1296, 1297, 1301, 1363, 1364], "chunk": [14, 49, 132, 138, 139, 142, 148, 150, 152, 153, 155, 156, 157, 168, 172, 217, 242, 258, 297, 339, 354, 630, 830, 945, 960, 1025, 1106, 1117, 1199, 1217, 1315, 1321, 1340], "chunk_length": 1340, "chunkedarrai": [123, 258, 339], "citi": [699, 700], "clang": 160, "clariti": [272, 339], "class": [1, 17, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 109, 111, 165, 166, 177, 183, 184, 186, 187, 274, 279, 339, 592, 788, 817, 826, 830, 836, 842, 854, 861, 895, 914, 920, 945, 950, 1320, 1340, 1344, 1352, 1368], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 208, 339, 431, 500, 830, 857, 945, 1350, 1368], "claus": [842, 1358, 1367], "clean": [713, 715, 716, 1294, 1296, 1297], "cleaner": 192, "cleanli": [10, 227, 339, 1368], "clear": [50, 90, 202, 339, 850, 945, 1028, 1340], "clearer": 126, "clickhous": 141, "client": [32, 140, 177], "clip": [830, 1340], "clipboard": [36, 137, 339, 842], "clone": [125, 126, 127, 128, 129, 201, 297, 339, 849, 945, 1026, 1340], "close": [40, 140, 229, 271, 286, 339, 429, 515, 574, 626, 639, 642, 644, 646, 648, 650, 653, 655, 657, 669, 769, 770, 772, 773, 788, 789, 817, 818, 830, 870, 894, 904, 945, 1039, 1128, 1214, 1251, 1340], "closedinterv": [229, 271, 339, 515, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 788, 789, 817, 818, 830, 870, 894, 945, 1128, 1340], "closest": [123, 244, 339, 875, 945, 1357, 1362], "closur": [642, 644, 653, 655, 657, 830], "cloud": [34, 37, 39, 41, 45, 46, 47, 48, 49, 140, 142, 148, 150, 152, 153, 154, 155, 156, 157, 158, 182, 339, 842, 945], "cloudi": [699, 700], "cloudpickl": 160, "cluster": 157, "cluster_with_column": [57, 58, 851, 852, 862, 889, 901, 945], "co": [685, 830, 1266, 1340, 1361], "coalesc": [59, 243, 244, 308, 339, 513, 687, 689, 713, 830, 874, 875, 912, 945, 1270, 1294, 1356, 1361], "code": [192, 203, 243, 339, 392, 393, 394, 395, 398, 431, 578, 662, 830, 857, 874, 878, 945, 1242, 1340, 1350], "codebas": 192, "coeffici": [205, 339, 669, 830, 1251, 1340], "coerc": [59, 632, 830], "coercion": [46, 47, 48, 49, 57, 58, 632, 830, 851, 852, 862, 889, 901, 945], "col": [1, 12, 37, 40, 46, 51, 52, 53, 54, 127, 129, 152, 166, 168, 220, 228, 229, 237, 239, 243, 244, 245, 248, 259, 262, 263, 267, 271, 272, 277, 285, 296, 301, 305, 307, 313, 318, 339, 343, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 514, 515, 516, 518, 519, 521, 522, 523, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 601, 602, 604, 606, 608, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 753, 754, 756, 757, 758, 759, 761, 763, 766, 768, 769, 771, 772, 774, 778, 779, 780, 781, 782, 783, 793, 795, 797, 798, 800, 803, 804, 808, 809, 811, 813, 815, 816, 819, 820, 830, 866, 869, 870, 872, 874, 875, 876, 888, 891, 894, 896, 903, 904, 910, 915, 917, 921, 945, 951, 1071, 1075, 1157, 1239, 1241, 1270, 1274, 1294, 1340, 1371], "col0": [168, 1371], "col1": [168, 263, 339, 945, 1371], "col2": [168, 263, 339, 945, 1371], "col3": [263, 339, 1371], "col4": 1371, "col_nam": [262, 339, 578, 820, 830, 888, 945], "cole": 134, "coli": [40, 339, 609, 610, 951, 1371], "collaps": [46, 47, 48, 49, 57, 58, 851, 852, 862, 889, 901, 945], "collapse_join": [46, 47, 48, 49, 57, 58, 851, 852, 862, 889, 901, 945], "collect": [54, 57, 58, 152, 153, 154, 158, 168, 169, 172, 211, 212, 246, 263, 286, 291, 304, 305, 339, 488, 519, 578, 758, 776, 780, 808, 809, 812, 830, 845, 846, 848, 849, 852, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 942, 944, 945, 951, 1133, 1340, 1350, 1351, 1352, 1355, 1356, 1368, 1369, 1371], "collect_al": [54, 58, 851, 852, 945], "collect_all_async": [852, 945], "collect_async": [58, 945], "collect_schema": [54, 246, 339, 854, 861, 888, 895, 914, 945], "collis": 59, "colnam": [24, 40, 152, 339], "color": [50, 90, 91, 325, 339, 342, 392, 393, 394, 395, 398, 679, 741, 830, 928, 997, 998, 999, 1000, 1003, 1260, 1329, 1340, 1363], "column": [10, 16, 17, 18, 21, 22, 24, 39, 40, 45, 49, 50, 51, 52, 59, 66, 82, 91, 95, 99, 123, 125, 126, 127, 128, 129, 130, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 168, 184, 187, 197, 199, 200, 203, 205, 206, 209, 210, 211, 212, 213, 216, 220, 221, 224, 225, 227, 228, 229, 233, 234, 239, 240, 241, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 285, 287, 288, 289, 292, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 324, 339, 342, 343, 350, 351, 353, 364, 373, 382, 384, 387, 396, 409, 418, 422, 423, 429, 439, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 464, 465, 466, 468, 477, 478, 480, 488, 490, 494, 496, 509, 514, 515, 530, 536, 542, 544, 564, 568, 569, 578, 584, 585, 587, 589, 591, 602, 604, 605, 606, 607, 608, 609, 610, 619, 626, 630, 632, 633, 634, 635, 637, 638, 639, 642, 644, 646, 648, 650, 653, 655, 657, 664, 665, 671, 672, 675, 683, 688, 690, 691, 701, 705, 706, 713, 714, 715, 716, 717, 718, 720, 725, 728, 736, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 830, 846, 848, 855, 858, 859, 860, 861, 863, 866, 869, 870, 874, 875, 876, 880, 881, 882, 883, 884, 886, 887, 890, 891, 892, 894, 895, 896, 897, 899, 903, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 927, 928, 945, 950, 951, 958, 959, 979, 988, 990, 993, 1001, 1017, 1021, 1027, 1032, 1033, 1039, 1048, 1051, 1052, 1053, 1056, 1057, 1058, 1062, 1063, 1064, 1066, 1067, 1070, 1072, 1073, 1077, 1078, 1079, 1081, 1090, 1091, 1093, 1105, 1123, 1127, 1152, 1158, 1160, 1180, 1184, 1214, 1221, 1222, 1225, 1245, 1256, 1264, 1269, 1272, 1286, 1287, 1294, 1296, 1297, 1298, 1299, 1301, 1307, 1310, 1316, 1317, 1329, 1340, 1356, 1358, 1360, 1362, 1363, 1365, 1366, 1369, 1370, 1371], "column_0": [1, 248, 303, 339, 945], "column_1": [248, 303, 339, 1365], "column_2": [303, 339, 1365], "column_abc": 15, "column_format": [40, 339], "column_nam": [268, 303, 339, 892, 945], "column_tot": [40, 339], "column_width": [40, 339], "column_x": [138, 139, 143, 149, 152], "column_xyz": 15, "columnar": [127, 129, 241, 273, 339], "columnformatdict": [40, 339], "columninfo": [187, 190], "columnnameorselector": [200, 209, 211, 212, 254, 261, 263, 274, 294, 304, 305, 306, 307, 339, 848, 858, 859, 860, 884, 909, 910, 911, 945], "columnnotfounderror": [224, 225, 339], "columntotalsdefinit": [40, 339], "columnwidthsdefinit": [40, 339], "colx": [40, 339, 609, 610, 951, 1355, 1371], "colz": [951, 1371], "com": [32, 40, 141, 339, 484, 486, 487, 684, 685, 686, 830, 1100, 1102, 1103, 1265, 1266, 1267, 1340], "combin": [45, 49, 57, 58, 59, 220, 229, 230, 244, 263, 267, 271, 309, 339, 352, 365, 476, 485, 498, 593, 618, 634, 639, 708, 709, 710, 769, 770, 772, 773, 817, 818, 820, 830, 851, 852, 862, 870, 875, 889, 891, 894, 901, 945, 1076, 1089, 1101, 1221, 1289, 1290, 1291, 1340, 1356, 1369], "come": [118, 141, 229, 304, 306, 339, 436, 455, 456, 527, 569, 755, 830, 870, 909, 911, 945, 1045, 1068, 1069, 1143, 1340], "comm_subexpr_elim": [57, 58, 851, 852, 862, 889, 901, 945], "comm_subplan_elim": [57, 58, 851, 852, 862, 889, 901, 945], "comma": [36, 37, 138, 139, 152, 339], "comment": [138, 139, 152, 183, 184, 186, 187], "comment_prefix": [138, 139, 152], "common": [51, 57, 58, 59, 98, 138, 139, 152, 308, 339, 603, 836, 851, 852, 862, 889, 901, 912, 945, 1344], "compact": 1366, "compani": 141, "compar": [157, 161, 162, 163, 164, 214, 220, 267, 339, 482, 483, 503, 505, 515, 529, 576, 613, 614, 830, 866, 891, 945, 1021, 1097, 1098, 1205, 1340], "comparison": [158, 220, 267, 339, 866, 891, 945], "compat": [20, 40, 41, 42, 45, 49, 93, 291, 339, 676, 678, 684, 685, 686, 688, 699, 700, 945, 951, 1081, 1257, 1259, 1265, 1266, 1267, 1269, 1280, 1281, 1315, 1340, 1350, 1363, 1364, 1368], "compat_level": [41, 42, 291, 339, 1315, 1340], "compatibleframetyp": [1351, 1353, 1368], "compatlevel": [41, 42, 291, 339, 1315, 1340], "competit": [629, 830, 1216, 1340], "compil": [56, 369, 370, 534, 535, 949, 975, 976, 1150, 1151], "complement": 951, "complet": [138, 140, 152, 1369], "complex": [169, 408, 409, 428, 735, 736, 830, 1013, 1038, 1325, 1340], "compliant": [40, 339, 468, 1081], "compon": [440, 464, 468, 713, 716, 774, 1049, 1077, 1081, 1294, 1297], "compos": 1369, "composit": [82, 1371], "compound": [130, 274, 339, 951], "comprehens": 166, "compress": [35, 39, 41, 42, 45, 47, 49, 339, 637, 830, 945, 1224, 1340], "compression_level": [45, 49, 339, 945], "comput": [57, 59, 96, 215, 228, 244, 263, 298, 304, 318, 331, 339, 347, 356, 357, 358, 359, 360, 361, 378, 379, 380, 385, 386, 390, 416, 419, 420, 421, 424, 425, 426, 427, 433, 481, 484, 485, 486, 487, 489, 527, 551, 552, 553, 554, 558, 559, 560, 561, 565, 571, 572, 573, 574, 599, 619, 620, 625, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 666, 667, 668, 669, 673, 732, 733, 741, 746, 748, 751, 752, 753, 760, 762, 775, 796, 806, 807, 820, 830, 851, 869, 872, 874, 875, 909, 917, 921, 934, 945, 956, 962, 963, 964, 965, 966, 967, 984, 985, 986, 991, 992, 996, 1023, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1042, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1143, 1167, 1168, 1169, 1170, 1174, 1175, 1176, 1177, 1181, 1187, 1188, 1189, 1190, 1198, 1209, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1248, 1249, 1250, 1251, 1254, 1313, 1314, 1322, 1329, 1340, 1362, 1365], "computecontext": 945, "computeerror": [589, 718, 1299], "concat": [50, 90, 91, 99, 139, 244, 339, 875, 917, 945, 1025, 1117, 1199, 1217, 1340, 1361], "concat_list": [541, 775], "concat_w": [286, 339, 809, 904, 945, 1361, 1368], "concaten": [50, 59, 90, 91, 222, 262, 339, 623, 675, 691, 757, 758, 759, 830, 888, 945, 1025, 1199, 1256, 1272, 1340, 1363], "concatmethod": 59, "conclus": [127, 129, 339, 945], "concret": [168, 172], "condit": [40, 212, 220, 245, 267, 272, 339, 411, 415, 494, 515, 681, 707, 754, 778, 820, 830, 866, 876, 891, 945, 1128, 1340, 1356, 1361, 1367], "conditional_format": [40, 339], "conditionalformatdict": [40, 339], "config": [0, 51, 207, 277, 296, 313, 339, 677, 687, 689, 701, 769, 770, 772, 773, 774, 842, 851, 856, 896, 915, 945, 1258, 1270, 1282], "configur": [5, 32, 39, 142, 153, 154, 192, 339, 342, 843, 851, 920, 945, 1340, 1345], "configure_axisx": [339, 342, 1340, 1345], "configure_point": [339, 342, 1340, 1345], "conflat": [515, 830], "conform": 1371, "confus": [98, 351, 522, 523, 701, 830], "conjunct": [40, 90, 140, 143, 149, 166, 339, 784, 787, 945], "conn": 140, "connect": [37, 38, 41, 45, 46, 47, 48, 49, 69, 138, 140, 141, 144, 146, 148, 150, 152, 155, 156, 157, 158, 182, 339, 843, 945], "connectionorcursor": [38, 140, 339], "connector": 141, "connectorx": [140, 141, 160], "consecut": [219, 339, 391, 493, 499, 675, 691, 699, 830, 865, 945, 1109, 1256, 1272, 1281, 1340], "consid": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 90, 91, 133, 134, 138, 139, 140, 142, 148, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 199, 211, 212, 214, 240, 245, 248, 254, 273, 286, 296, 301, 302, 304, 306, 308, 339, 342, 343, 409, 418, 428, 429, 498, 509, 577, 578, 585, 601, 602, 605, 607, 609, 610, 626, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 736, 757, 764, 778, 788, 789, 826, 830, 846, 851, 852, 859, 860, 862, 876, 884, 904, 908, 909, 911, 912, 928, 945, 951, 1017, 1022, 1027, 1038, 1039, 1098, 1123, 1193, 1214, 1226, 1229, 1231, 1232, 1239, 1241, 1319, 1324, 1340, 1345, 1350], "consider": 134, "consist": [228, 261, 297, 339, 713, 769, 770, 788, 869, 945, 951, 960, 1106, 1294, 1321, 1340], "consola": [40, 339], "const": 10, "constant": [215, 271, 339, 437, 485, 491, 789, 830, 894, 945, 1046, 1099, 1101, 1107, 1340], "constrain": [51, 152, 211, 212, 339, 859, 860, 945, 951], "constraint": [220, 267, 339, 494, 602, 603, 605, 607, 609, 610, 820, 830, 866, 891, 945, 951, 1370], "construct": [50, 90, 91, 98, 123, 125, 126, 127, 128, 129, 130, 134, 140, 339, 500, 802, 805, 821, 826, 830, 857, 945, 1017, 1340, 1355], "construct_categor": 50, "constructor": [134, 143, 172], "contain": [5, 37, 38, 39, 40, 46, 51, 56, 94, 125, 128, 130, 135, 140, 141, 142, 150, 153, 154, 157, 167, 168, 170, 172, 199, 204, 211, 212, 213, 229, 237, 242, 259, 296, 297, 301, 302, 308, 320, 339, 351, 353, 376, 395, 398, 411, 415, 431, 506, 519, 548, 578, 675, 677, 681, 684, 686, 688, 691, 693, 706, 707, 723, 745, 746, 747, 748, 759, 792, 830, 846, 854, 857, 859, 860, 861, 870, 889, 908, 912, 923, 945, 951, 958, 959, 982, 1015, 1020, 1119, 1120, 1164, 1199, 1256, 1258, 1262, 1265, 1267, 1269, 1272, 1274, 1287, 1288, 1304, 1315, 1321, 1340, 1358], "contains_with_expr": 392, "contains_with_lit": 392, "content": [13, 665, 830, 949, 1247, 1340], "context": [50, 90, 91, 174, 259, 286, 339, 349, 494, 541, 577, 578, 589, 671, 672, 741, 761, 777, 780, 786, 787, 792, 801, 805, 808, 829, 830, 841, 842, 904, 917, 945, 1157, 1329, 1340, 1355, 1368, 1370], "contigu": [59, 123, 124, 128, 138, 139, 142, 144, 146, 148, 150, 152, 153, 155, 156, 157, 266, 297, 339], "continu": [138, 429, 626, 669, 830, 1039, 1214, 1251, 1340, 1357], "contrast": 774, "control": [10, 11, 40, 58, 59, 143, 166, 168, 285, 286, 296, 339, 634, 672, 809, 830, 851, 852, 862, 903, 904, 920, 942, 945, 1221, 1319, 1340, 1352, 1355, 1368], "conveni": [217, 301, 339, 937, 960, 1106, 1340, 1350], "convers": [124, 196, 241, 242, 273, 274, 293, 297, 298, 339, 441, 713, 715, 716, 720, 842, 1050, 1294, 1296, 1297, 1301, 1321, 1322, 1340, 1366, 1368], "convert": [39, 94, 124, 128, 135, 142, 143, 149, 153, 196, 274, 292, 293, 294, 295, 296, 297, 298, 300, 301, 339, 387, 388, 430, 441, 465, 468, 568, 569, 577, 603, 628, 686, 713, 715, 716, 717, 718, 720, 725, 830, 945, 993, 994, 1021, 1050, 1078, 1081, 1184, 1185, 1267, 1294, 1296, 1297, 1298, 1299, 1301, 1307, 1310, 1318, 1319, 1320, 1321, 1322, 1324, 1340, 1363, 1365, 1366, 1368], "convert_time_zon": [462, 1075], "coo": [268, 339, 892, 945], "coord": 728, "coordin": [40, 339], "copi": [36, 123, 124, 137, 194, 196, 201, 202, 242, 291, 297, 298, 313, 339, 491, 830, 849, 850, 915, 945, 953, 1026, 1028, 1107, 1315, 1320, 1321, 1322, 1340, 1368], "corasick": [677, 687, 689, 701, 1258, 1268, 1270, 1282], "core": [1, 245, 339, 876, 945, 1368, 1371], "cores_right": [245, 339, 876, 945], "corner": [20, 40, 130, 339], "corr": 339, "corrcoef": [205, 339], "correct": [135, 143, 149, 486, 487, 527, 569, 651, 669, 830, 880, 945, 1102, 1103, 1143, 1232, 1251, 1340], "correctli": [40, 339, 577, 830], "correl": [205, 339, 760, 806], "correlationmethod": 760, "correspond": [229, 244, 271, 297, 309, 339, 409, 449, 458, 463, 476, 578, 629, 639, 642, 644, 646, 648, 650, 653, 655, 657, 736, 769, 770, 772, 773, 817, 818, 830, 851, 870, 875, 894, 945, 1058, 1071, 1076, 1089, 1216, 1340, 1357], "cosd": 1361, "cosh": [830, 1340], "cosin": [356, 357, 419, 420, 577, 830, 962, 963, 1029, 1030, 1340, 1365], "cost": [245, 274, 339, 699, 876, 945, 1281], "cost_usd": [699, 1281], "cot": [830, 1340, 1361], "cotang": [421, 830, 1031, 1340, 1365], "cotd": 1361, "could": [39, 88, 96, 339, 666, 764, 774, 778, 830, 848, 856, 945, 1248, 1340], "count": [40, 158, 198, 207, 229, 259, 260, 271, 303, 309, 315, 330, 339, 355, 372, 381, 423, 436, 485, 509, 530, 538, 550, 555, 578, 601, 617, 639, 642, 644, 646, 648, 650, 653, 655, 657, 678, 739, 741, 749, 755, 763, 787, 800, 830, 845, 856, 870, 887, 894, 918, 933, 945, 951, 961, 978, 987, 1033, 1040, 1045, 1101, 1123, 1146, 1154, 1166, 1171, 1200, 1208, 1259, 1327, 1329, 1340, 1345, 1349, 1361], "count_digit": 678, "count_num": [40, 339], "counterpart": 134, "countri": [244, 339, 437, 875, 945, 1046], "country_holidai": [436, 755, 1045], "covari": [135, 762, 807, 830], "cover": 10, "cow": [697, 698, 1278, 1279], "cpu": [138, 139, 160, 296, 339, 851, 920, 945, 1319, 1340], "crab": [676, 688, 1257, 1269], "crate": [37, 46, 94, 339, 676, 678, 684, 685, 686, 688, 699, 700, 713, 715, 716, 720, 945, 951, 1257, 1259, 1265, 1266, 1267, 1269, 1280, 1281, 1294, 1296, 1297, 1301], "creat": [38, 40, 50, 91, 123, 127, 129, 138, 139, 140, 141, 144, 146, 150, 153, 154, 166, 167, 168, 169, 170, 171, 172, 173, 192, 201, 202, 229, 260, 263, 271, 296, 297, 309, 313, 316, 339, 342, 343, 440, 463, 476, 485, 569, 577, 630, 639, 642, 644, 646, 648, 650, 653, 655, 657, 758, 768, 769, 770, 771, 772, 773, 774, 788, 816, 817, 818, 826, 830, 849, 850, 856, 862, 870, 894, 915, 919, 945, 949, 950, 1026, 1028, 1039, 1049, 1076, 1089, 1101, 1206, 1214, 1217, 1319, 1321, 1340, 1345, 1367, 1368, 1371], "create_async_engin": 140, "create_engin": [38, 339], "created_at": [183, 186, 187], "created_bi": [183, 186, 187], "creation": 139, "credenti": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 339, 842, 945], "credential_provid": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 339, 945], "credentialproviderfunct": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 339, 945], "cross": [243, 339, 874, 945, 1356], "crustacean": [688, 1269], "cst": [463, 476, 1076, 1089], "csv": [36, 37, 46, 47, 48, 49, 137, 138, 139, 143, 152, 185, 339, 842, 945], "csvencod": [138, 139, 152], "csvquotestyl": [37, 46, 339, 945], "ctx": [1349, 1351, 1352, 1353, 1354, 1355, 1368], "cube": [1, 55, 416, 624, 830, 1023, 1340, 1362], "cuda": 920, "cum_count": [830, 1340], "cum_count_revers": [423, 830], "cum_max": [830, 1340], "cum_max_all_fil": [424, 830], "cum_max_revers": [424, 830], "cum_min": [830, 1340], "cum_min_revers": [425, 830], "cum_prod": [348, 830, 1340], "cum_prod_revers": [426, 830], "cum_reduc": 764, "cum_sum": [512, 619, 729, 767, 830, 872, 945, 1142, 1340], "cum_sum_revers": [427, 830], "cumsum_horizont": 766, "cumul": [423, 424, 425, 426, 427, 763, 764, 765, 766, 767, 830, 1033, 1034, 1035, 1036, 1037, 1340], "cumulative_ev": [830, 1340], "cumulative_sal": [619, 830], "current": [2, 3, 5, 6, 30, 37, 38, 41, 45, 46, 47, 48, 49, 130, 140, 141, 148, 150, 152, 155, 156, 157, 165, 166, 168, 169, 170, 171, 172, 173, 182, 201, 202, 209, 243, 244, 268, 286, 296, 301, 339, 342, 343, 445, 569, 620, 830, 849, 850, 858, 874, 875, 892, 904, 920, 945, 951, 1026, 1028, 1046, 1054, 1209, 1319, 1324, 1340, 1345, 1352, 1368], "cursor": [38, 140, 339], "custom": [1, 27, 39, 40, 52, 53, 54, 55, 97, 134, 171, 173, 207, 248, 263, 325, 339, 388, 436, 465, 468, 569, 577, 578, 640, 741, 755, 791, 792, 830, 856, 880, 928, 945, 994, 1045, 1078, 1081, 1185, 1193, 1226, 1329, 1340, 1371], "customis": [40, 339], "cut": [626, 830, 1214, 1340], "cxx": 1363, "cypher": 140, "d": [28, 35, 37, 39, 40, 41, 42, 45, 126, 158, 197, 220, 227, 229, 230, 231, 234, 243, 247, 267, 290, 291, 301, 307, 311, 321, 323, 326, 327, 328, 329, 330, 331, 332, 339, 348, 350, 423, 446, 465, 468, 515, 584, 623, 664, 678, 685, 699, 700, 705, 713, 715, 716, 756, 757, 774, 780, 809, 830, 866, 870, 874, 891, 904, 924, 926, 929, 930, 931, 932, 933, 934, 935, 945, 951, 1021, 1033, 1055, 1078, 1081, 1128, 1152, 1259, 1266, 1280, 1281, 1286, 1294, 1296, 1297, 1308, 1340, 1356, 1358, 1360, 1363, 1364], "d1": [40, 339, 440], "d2": 440, "d3": 440, "d789": [40, 339], "d_4": [705, 1286], "dai": [65, 66, 83, 229, 242, 244, 271, 309, 339, 342, 436, 455, 456, 458, 459, 461, 463, 465, 468, 469, 476, 478, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 755, 768, 769, 770, 771, 772, 773, 774, 817, 818, 830, 870, 875, 894, 945, 951, 1045, 1068, 1069, 1071, 1072, 1074, 1076, 1078, 1081, 1082, 1089, 1091, 1101, 1340, 1364], "dark": 1349, "data": [0, 1, 10, 18, 19, 21, 24, 28, 35, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 64, 65, 66, 68, 79, 80, 82, 83, 91, 94, 98, 100, 103, 117, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 190, 194, 196, 202, 203, 213, 215, 216, 217, 227, 228, 229, 241, 242, 243, 246, 248, 261, 262, 266, 272, 273, 274, 276, 280, 283, 291, 296, 297, 298, 301, 303, 313, 317, 337, 339, 343, 351, 352, 353, 356, 357, 358, 359, 360, 361, 364, 367, 368, 369, 370, 371, 373, 376, 378, 379, 380, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 410, 412, 413, 414, 418, 419, 420, 421, 422, 429, 430, 431, 436, 437, 438, 439, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 490, 501, 503, 504, 505, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 529, 530, 534, 535, 537, 542, 548, 550, 557, 568, 570, 576, 578, 613, 614, 618, 619, 626, 628, 629, 632, 633, 634, 635, 637, 638, 642, 644, 646, 648, 650, 653, 655, 657, 658, 660, 662, 667, 668, 669, 675, 678, 679, 680, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 703, 704, 705, 706, 713, 714, 715, 716, 718, 720, 723, 732, 733, 734, 737, 738, 741, 744, 750, 758, 761, 768, 769, 770, 771, 772, 773, 774, 784, 785, 787, 788, 789, 790, 791, 792, 802, 805, 816, 817, 818, 821, 826, 830, 842, 849, 850, 851, 852, 857, 861, 863, 869, 870, 895, 899, 915, 945, 950, 953, 958, 959, 971, 973, 974, 975, 976, 977, 979, 981, 982, 993, 995, 997, 998, 999, 1001, 1002, 1014, 1016, 1018, 1019, 1026, 1027, 1028, 1039, 1040, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1098, 1099, 1101, 1105, 1106, 1123, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1148, 1149, 1150, 1151, 1153, 1158, 1164, 1166, 1173, 1184, 1186, 1193, 1207, 1214, 1216, 1220, 1221, 1222, 1224, 1225, 1236, 1238, 1246, 1251, 1256, 1257, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1271, 1272, 1273, 1274, 1275, 1276, 1284, 1285, 1286, 1287, 1294, 1295, 1296, 1297, 1299, 1301, 1304, 1315, 1320, 1321, 1322, 1323, 1326, 1339, 1340, 1349, 1356, 1363, 1368, 1370], "data_bar": [40, 339], "data_bar_2010": [40, 339], "data_label": [40, 339], "data_page_s": [45, 49, 339, 945], "data_source_format": 187, "databas": [38, 122, 140, 141, 339, 842], "databrick": 177, "databricks_format": 185, "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 78, 95, 98, 99, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 161, 162, 165, 166, 192, 337, 338, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 826, 830, 842, 851, 852, 854, 856, 858, 861, 863, 867, 870, 874, 875, 876, 877, 878, 880, 884, 885, 889, 893, 895, 902, 904, 909, 910, 911, 912, 914, 917, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 945, 950, 951, 1039, 1040, 1075, 1101, 1123, 1193, 1214, 1270, 1274, 1286, 1287, 1310, 1316, 1317, 1329, 1340, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1371], "dataframeplot": [339, 342], "dataload": [301, 339], "datapoint": [229, 339, 870, 945], "dataset": [14, 45, 69, 138, 139, 142, 143, 149, 152, 153, 158, 243, 301, 339, 527, 830, 842, 874, 880, 945, 1143, 1340, 1369], "datasourceformat": [187, 190], "datat": [40, 339], "datatyp": [37, 46, 123, 125, 126, 127, 129, 131, 145, 147, 148, 150, 151, 156, 157, 169, 170, 172, 213, 222, 339, 410, 488, 664, 734, 757, 776, 790, 826, 830, 842, 861, 945, 950, 951, 1014, 1040, 1094, 1193, 1245, 1323, 1340, 1366], "date": [16, 40, 51, 66, 138, 139, 141, 143, 149, 150, 152, 155, 157, 158, 200, 207, 227, 229, 242, 244, 271, 286, 339, 342, 371, 436, 438, 439, 440, 441, 444, 446, 448, 449, 451, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 537, 619, 639, 642, 644, 646, 648, 650, 653, 655, 657, 713, 715, 734, 755, 769, 770, 772, 773, 780, 788, 790, 816, 830, 848, 856, 870, 875, 894, 945, 951, 977, 1045, 1047, 1048, 1049, 1050, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1101, 1153, 1202, 1203, 1294, 1296, 1323, 1340, 1361, 1364, 1366], "date32": [242, 339], "date_format": [37, 46, 339, 945], "date_min": 458, "date_minus_1y_2mon": 1071, "date_part": 1361, "date_plus_1i": [458, 1071], "date_rang": [244, 309, 339, 444, 446, 459, 467, 478, 772, 773, 875, 945, 1053, 1067, 1072, 1073, 1090, 1091], "date_right": [244, 339, 875, 945], "datetim": [16, 37, 40, 46, 51, 94, 130, 142, 150, 153, 155, 157, 168, 169, 170, 172, 182, 183, 186, 187, 200, 207, 227, 229, 242, 244, 271, 286, 309, 339, 342, 371, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 537, 586, 619, 639, 642, 644, 646, 648, 650, 653, 655, 657, 713, 716, 734, 755, 768, 769, 770, 772, 773, 774, 780, 788, 790, 817, 818, 830, 848, 856, 870, 875, 894, 945, 950, 951, 977, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1101, 1153, 1202, 1203, 1294, 1297, 1321, 1323, 1340, 1363, 1364], "datetime_format": [37, 46, 339, 945], "datetime_rang": [229, 339, 438, 441, 455, 456, 458, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 479, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 830, 870, 945, 1046, 1047, 1050, 1054, 1055, 1056, 1061, 1062, 1064, 1066, 1068, 1069, 1070, 1071, 1075, 1076, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089], "datetime_str": 465, "datetimeindex": 128, "david": 1369, "day_nam": [465, 468], "day_of_month": [444, 459, 478], "day_of_year": [444, 459, 478], "daylight": [229, 244, 271, 309, 339, 437, 445, 458, 463, 476, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 774, 817, 818, 830, 870, 875, 894, 945, 1054, 1071, 1076, 1089], "dayofweek": 1364, "dayofyear": 1364, "days_diff": 469, "db": [38, 140, 141, 339], "dbapi2": 140, "dbc": [678, 1259], "dbreadengin": 141, "dbwriteengin": [38, 339], "dbwritemod": [38, 339], "dd": [40, 339, 1363], "ddd": [1, 40, 339, 724, 726, 727], "dddd": 1363, "ddof": [287, 310, 339, 385, 390, 565, 571, 652, 653, 656, 657, 674, 742, 760, 762, 806, 807, 811, 819, 830, 905, 913, 945, 991, 996, 1181, 1187, 1233, 1235, 1255, 1330, 1340], "ddww": 1363, "de": 1363, "deal": [45, 49, 241, 339, 351, 353, 461, 462, 629, 713, 716, 745, 746, 747, 748, 771, 830, 945, 958, 959, 1074, 1075, 1216, 1294, 1297, 1340], "debug": [29, 880, 945, 1371], "decad": [1349, 1364], "decai": [484, 485, 486, 487, 830, 1100, 1101, 1102, 1103, 1340], "decemb": [468, 1081], "decim": [9, 10, 11, 27, 28, 37, 40, 46, 138, 139, 152, 339, 343, 658, 717, 830, 945, 951, 1236, 1298, 1340, 1362], "decimal_comma": [138, 139, 152], "decimal_separ": [9, 27], "declar": [123, 125, 126, 127, 129, 140, 147, 148, 156, 296, 301, 339, 945, 951, 1349], "decod": [138, 139, 692], "decompos": [305, 339, 910, 945], "decompress": [45, 47, 49, 339, 945], "decor": [50, 52, 53, 54, 55, 168, 172, 248, 339, 578, 830, 841, 842, 1193, 1340], "dedic": [1, 124, 241, 273, 339, 951, 1368], "deem": [207, 339, 856, 945], "deepcopi": [201, 339, 849, 945, 1026, 1340], "def": [1, 50, 52, 53, 54, 55, 140, 166, 168, 172, 192, 262, 303, 339, 348, 623, 682, 685, 710, 744, 791, 830, 852, 888, 945, 951, 1263, 1266, 1371], "default": [4, 5, 9, 10, 14, 27, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 57, 58, 59, 63, 66, 67, 68, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 192, 207, 208, 211, 212, 215, 224, 228, 229, 230, 241, 243, 244, 252, 254, 261, 263, 271, 272, 273, 274, 275, 279, 282, 286, 287, 289, 294, 296, 297, 301, 304, 306, 307, 308, 310, 315, 324, 339, 350, 351, 353, 376, 383, 388, 396, 429, 431, 436, 461, 462, 468, 481, 483, 484, 486, 487, 507, 544, 548, 557, 562, 563, 565, 569, 571, 572, 577, 585, 586, 589, 592, 611, 612, 614, 619, 620, 626, 629, 633, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 660, 663, 665, 674, 675, 684, 691, 703, 708, 709, 710, 713, 715, 716, 718, 720, 741, 742, 745, 747, 750, 754, 755, 759, 760, 762, 769, 770, 771, 772, 773, 774, 777, 780, 784, 785, 786, 788, 789, 790, 796, 802, 805, 808, 811, 812, 814, 817, 818, 819, 821, 830, 851, 852, 856, 857, 859, 860, 862, 869, 870, 874, 875, 884, 894, 898, 900, 904, 905, 909, 911, 912, 913, 918, 920, 927, 945, 949, 951, 958, 959, 982, 989, 994, 1001, 1027, 1039, 1040, 1045, 1074, 1075, 1081, 1095, 1099, 1100, 1102, 1103, 1121, 1160, 1164, 1173, 1178, 1179, 1185, 1202, 1203, 1209, 1214, 1216, 1220, 1221, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1238, 1244, 1247, 1255, 1256, 1257, 1265, 1269, 1272, 1284, 1289, 1290, 1291, 1294, 1296, 1297, 1299, 1301, 1319, 1321, 1329, 1330, 1340, 1362, 1363, 1371], "default_match": [676, 688], "default_scop": 34, "defaultazurecredenti": 33, "defaultdict": [274, 339], "defer": [192, 339, 342, 343, 1340, 1345], "defin": [37, 40, 46, 66, 69, 140, 147, 165, 166, 168, 200, 211, 212, 216, 229, 248, 259, 262, 271, 308, 325, 339, 414, 515, 544, 578, 623, 626, 638, 639, 642, 644, 646, 648, 650, 653, 655, 657, 690, 695, 703, 714, 721, 769, 770, 772, 773, 788, 789, 792, 812, 817, 818, 830, 848, 859, 860, 863, 870, 888, 894, 912, 928, 945, 949, 950, 951, 1019, 1128, 1160, 1193, 1214, 1225, 1271, 1276, 1284, 1295, 1302, 1340], "definit": [40, 70, 339, 527, 830, 950, 951, 1143, 1340], "deflat": [35, 339], "deg": 1365, "degre": [287, 310, 339, 565, 571, 628, 652, 653, 656, 657, 674, 742, 752, 762, 806, 807, 811, 819, 830, 905, 913, 945, 1233, 1235, 1255, 1330, 1340, 1361], "delet": [69, 1356, 1367], "delimit": [44, 46, 148, 156, 263, 294, 339, 675, 691, 945, 1256, 1272, 1316, 1340], "delta": [39, 142, 153, 185, 287, 310, 339, 565, 571, 652, 653, 656, 657, 674, 742, 762, 806, 807, 811, 819, 830, 842, 905, 913, 945, 1233, 1235, 1255, 1330, 1340], "delta_merge_opt": [39, 339], "delta_table_opt": [142, 153, 182], "delta_table_vers": 182, "delta_write_opt": [39, 339], "deltalak": [39, 142, 153, 160, 182, 339], "deltashar": 185, "deltat": [39, 142, 153, 339], "demo": [40, 339], "demonstr": [138, 498, 830, 951], "dens": [20, 227, 339, 629, 830, 1216, 1340], "densiti": [1340, 1345], "depend": [45, 50, 56, 91, 140, 143, 149, 160, 197, 339, 369, 370, 534, 535, 578, 589, 626, 629, 774, 777, 780, 786, 830, 955, 975, 976, 1150, 1151, 1214, 1216, 1340, 1371], "deploi": [168, 172], "deprec": [39, 60, 138, 139, 165, 166, 167, 168, 172, 175, 198, 254, 297, 315, 320, 339, 443, 479, 500, 596, 633, 675, 683, 743, 752, 760, 761, 830, 845, 862, 884, 898, 911, 917, 918, 923, 945, 1052, 1060, 1061, 1092, 1120, 1220, 1256, 1264, 1321, 1340], "depth": 134, "desc": [951, 1349, 1352, 1356, 1358], "descend": [51, 280, 285, 339, 364, 384, 564, 619, 629, 662, 671, 672, 741, 753, 830, 899, 903, 945, 970, 990, 1140, 1180, 1216, 1242, 1253, 1329, 1340], "describ": [168, 227, 339, 696, 945, 1277, 1340], "descript": [229, 339, 870, 945, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1366, 1369, 1370], "deseri": [134, 279, 339, 500, 592, 830, 898, 945], "deserializ": [208, 279, 339, 431, 592, 830, 857, 898, 945], "design": [296, 301, 339], "desir": [168, 243, 339, 388, 479, 569, 874, 945, 994, 1092, 1185], "destin": 141, "detail": [56, 124, 140, 141, 161, 163, 196, 229, 339, 468, 734, 830, 870, 920, 945, 1081, 1323, 1340, 1371], "determin": [14, 37, 40, 46, 51, 59, 88, 134, 138, 139, 140, 143, 149, 150, 152, 157, 159, 199, 203, 222, 229, 241, 242, 248, 271, 302, 303, 309, 339, 409, 448, 461, 462, 509, 569, 589, 626, 632, 634, 669, 677, 690, 713, 714, 716, 717, 736, 771, 789, 802, 805, 821, 830, 846, 853, 854, 861, 870, 894, 908, 914, 945, 1057, 1074, 1075, 1123, 1185, 1214, 1220, 1221, 1251, 1258, 1294, 1297, 1298, 1340], "dev": [195, 954, 1233, 1340], "develop": [141, 168, 172], "deviat": [287, 339, 486, 652, 653, 674, 811, 830, 905, 945, 1102, 1255, 1340, 1357], "devic": [296, 339, 851, 920, 945, 1319, 1340], "devicememoryresourc": 920, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 78, 95, 99, 124, 125, 126, 127, 128, 129, 130, 139, 140, 141, 152, 165, 166, 168, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 399, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 808, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 826, 830, 870, 894, 910, 912, 925, 928, 936, 945, 951, 1075, 1101, 1270, 1274, 1286, 1287, 1317, 1340, 1345, 1349, 1350, 1351, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1371], "df0": [255, 339, 885, 945, 1355], "df1": [51, 59, 161, 162, 214, 217, 255, 286, 311, 339, 885, 945, 1352, 1354, 1355, 1356, 1368], "df2": [51, 59, 161, 162, 214, 217, 311, 339, 1352, 1354, 1355, 1356, 1368], "df3": [51, 339], "df4": 339, "df5": 339, "df6": 339, "df_a": 1368, "df_a1": 59, "df_a2": 59, "df_a3": 59, "df_agg_nuniqu": [259, 339], "df_b": 1368, "df_current_batch": 139, "df_d1": 59, "df_d2": 59, "df_from_str_repr": [295, 339], "df_h1": 59, "df_h2": 59, "df_new_grid": [513, 830], "df_nuniqu": [259, 339], "df_original_grid": [513, 830], "df_panda": 1350, "df_pd": 124, "df_tempor": [642, 644, 646, 648, 650, 653, 655, 657, 830], "dfi": 196, "diagon": [59, 303, 339], "diagonal_relax": 59, "diagram": 945, "dict": [30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 56, 123, 125, 126, 127, 128, 129, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 168, 182, 183, 186, 187, 221, 241, 261, 268, 272, 273, 274, 292, 293, 296, 301, 303, 339, 830, 892, 945, 950, 951, 1112, 1340, 1353], "dictat": [135, 458, 830, 1071], "dictionari": [30, 37, 39, 40, 41, 45, 46, 47, 48, 49, 56, 82, 123, 125, 126, 127, 129, 134, 138, 139, 140, 141, 142, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 182, 241, 261, 272, 273, 274, 292, 293, 296, 301, 339, 945, 950], "did": [437, 1046], "diff": [313, 339, 469, 470, 471, 472, 473, 474, 475, 558, 830, 915, 945, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1174, 1340], "differ": [40, 45, 94, 97, 118, 138, 143, 158, 161, 163, 192, 211, 217, 229, 230, 241, 243, 263, 271, 273, 274, 293, 296, 297, 303, 339, 432, 444, 458, 459, 462, 468, 477, 483, 498, 507, 539, 558, 560, 569, 578, 611, 612, 614, 619, 633, 634, 713, 739, 777, 780, 786, 830, 859, 860, 862, 870, 874, 894, 945, 949, 951, 1021, 1041, 1053, 1071, 1072, 1075, 1081, 1090, 1097, 1106, 1121, 1155, 1174, 1176, 1193, 1202, 1203, 1205, 1220, 1221, 1294, 1340, 1364, 1366, 1368], "digit": [67, 623, 658, 659, 685, 830, 951, 1236, 1237, 1259, 1266, 1340, 1371], "dimens": [123, 125, 127, 129, 147, 148, 156, 339, 635, 830, 945, 1222, 1321, 1340], "dimension": [125, 127, 129, 297, 339, 945, 1340], "direct": [40, 141, 150, 154, 157, 282, 296, 307, 339, 383, 562, 663, 830, 900, 945, 989, 1178, 1244, 1340], "directli": [6, 30, 40, 58, 59, 140, 168, 172, 192, 274, 296, 339, 484, 486, 487, 634, 805, 830, 852, 945, 1100, 1102, 1103, 1221, 1319, 1340, 1352, 1368, 1371], "directori": [40, 45, 135, 150, 152, 155, 157, 339], "dirpath": [35, 37, 41, 42, 45, 152, 339], "disabl": [45, 49, 50, 90, 91, 150, 155, 169, 241, 339, 851, 945], "disable_string_cach": 91, "disallow": 168, "discard": [220, 267, 339, 494, 830, 866, 891, 945, 1110, 1340], "disco": [687, 689, 1268, 1270], "discont": [687, 689, 1268, 1270], "discourag": [578, 830], "discoveri": [263, 339], "discret": [429, 432, 481, 509, 539, 558, 626, 830, 1039, 1041, 1095, 1123, 1155, 1174, 1214, 1340], "disk": [45, 46, 47, 48, 49, 144, 339, 593, 901, 945], "dispatch": 951, "displai": [7, 10, 11, 12, 13, 17, 18, 19, 23, 24, 25, 26, 40, 207, 227, 339, 856, 862, 945], "distanc": [244, 339, 509, 830, 875, 945, 1123, 1340], "distinct": [40, 172, 261, 263, 317, 339, 389, 518, 521, 570, 629, 638, 774, 830, 995, 1132, 1135, 1186, 1216, 1225, 1340, 1357, 1367, 1369, 1371], "distinct_count": [45, 49, 339, 945], "distinguish": [468, 1081], "distribut": [527, 669, 830, 945, 1143, 1251, 1340], "div": 1361, "divid": [20, 429, 463, 476, 484, 486, 487, 498, 527, 626, 830, 1039, 1076, 1089, 1100, 1102, 1103, 1143, 1214, 1340, 1357, 1362], "divis": [498, 737, 830, 1362], "divisor": [287, 310, 339, 565, 571, 652, 653, 656, 657, 674, 742, 762, 806, 807, 811, 819, 830, 905, 913, 945, 1233, 1235, 1255, 1330, 1340], "dl": [301, 339], "do": [1, 40, 46, 47, 48, 49, 51, 57, 58, 125, 126, 129, 138, 150, 152, 157, 161, 162, 163, 164, 197, 207, 209, 217, 240, 243, 244, 263, 268, 291, 303, 307, 339, 342, 428, 436, 541, 577, 699, 700, 708, 709, 710, 760, 802, 805, 821, 830, 847, 851, 852, 856, 858, 862, 874, 875, 880, 889, 892, 901, 920, 945, 951, 1038, 1045, 1106, 1157, 1280, 1281, 1289, 1290, 1291, 1324, 1340, 1345], "do_polars_oper": 29, "do_someth": 140, "do_various_th": 192, "doc": [39, 41, 42, 124, 141, 144, 146, 161, 163, 194, 195, 205, 339, 953, 954], "document": [32, 94, 141, 194, 339, 343, 465, 468, 693, 713, 715, 716, 720, 826, 920, 953, 1021, 1078, 1081, 1274, 1294, 1296, 1297, 1301], "doe": [10, 37, 39, 46, 51, 112, 123, 125, 126, 127, 129, 130, 138, 139, 140, 141, 142, 143, 147, 148, 152, 153, 156, 158, 202, 217, 224, 229, 230, 242, 243, 267, 272, 273, 274, 304, 313, 316, 339, 342, 343, 479, 494, 498, 507, 569, 578, 677, 687, 689, 701, 709, 710, 739, 826, 830, 850, 851, 856, 866, 870, 874, 880, 891, 909, 915, 919, 945, 1028, 1092, 1106, 1110, 1121, 1246, 1258, 1268, 1270, 1282, 1340, 1345, 1363], "doesn": [39, 138, 152, 229, 244, 339, 481, 830, 870, 875, 945, 1095, 1340], "dog": [676, 719, 722, 759, 1257, 1300, 1303], "doi": 1364, "dollar": [699, 700, 1280, 1281], "domain": [1, 685, 1266], "don": [59, 229, 244, 248, 304, 307, 339, 428, 541, 578, 619, 830, 870, 875, 909, 945, 951, 1038, 1157, 1193, 1340], "done": [139, 158, 192, 198, 244, 339, 354, 355, 619, 830, 845, 848, 875, 945, 961, 1340], "dot": [51, 593, 826, 830, 901, 945, 1340], "doubl": [298, 339, 699, 700, 1280, 1281], "dow": 1364, "down": [152, 155, 156, 157, 158, 200, 339, 410, 497, 830, 1113, 1340], "download": [148, 152, 155, 156, 593, 901, 945], "downstream": [297, 339, 662, 830, 1242, 1340], "dr": 154, "drago": [690, 1271], "dragon": 690, "dragonfr": 1271, "dragonfruit": [690, 703, 714, 1271, 1284, 1295], "dramat": 143, "draw": [20, 25, 168, 172, 1371], "drawback": 826, "drawfn": 1371, "drawing_charact": 20, "dremio": 140, "driver": [38, 140, 141, 339], "drop": [1, 126, 210, 211, 212, 248, 267, 304, 313, 339, 432, 434, 435, 539, 540, 626, 830, 859, 860, 891, 909, 915, 945, 1041, 1043, 1044, 1155, 1156, 1214, 1340, 1367], "drop_dupl": [304, 339, 909, 945], "drop_empty_col": [143, 149], "drop_empty_row": [143, 149], "drop_first": [294, 339, 1316, 1340], "drop_in_plac": 339, "drop_nan": [339, 435, 830, 945, 1044, 1340], "drop_nul": [339, 434, 830, 945, 1043, 1340], "dset": 158, "dst": [463, 476, 1076, 1089], "dst_offset": [437, 1046], "dt": [1, 40, 51, 143, 149, 271, 339, 639, 774, 830, 839, 894, 945, 951, 1348, 1363, 1364], "dt1": 1363, "dt2": 1363, "dtm": [40, 339, 440, 468, 951, 1049, 1081, 1363], "dtm_iso": 468, "dtm_iso_strict": 468, "dtype": [10, 40, 50, 54, 60, 66, 70, 82, 90, 91, 101, 123, 125, 127, 129, 130, 138, 139, 140, 141, 143, 147, 148, 149, 152, 156, 165, 166, 167, 168, 172, 194, 196, 200, 203, 215, 229, 244, 271, 295, 296, 297, 298, 301, 307, 316, 339, 396, 410, 411, 412, 413, 414, 415, 426, 427, 468, 479, 488, 501, 536, 544, 575, 577, 578, 585, 624, 631, 632, 639, 664, 666, 692, 713, 730, 734, 740, 750, 757, 776, 780, 784, 785, 787, 788, 789, 790, 791, 792, 802, 805, 812, 821, 830, 848, 853, 870, 875, 894, 919, 945, 950, 951, 953, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 1001, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1036, 1037, 1040, 1041, 1081, 1092, 1099, 1130, 1148, 1149, 1152, 1160, 1184, 1191, 1193, 1212, 1223, 1245, 1248, 1273, 1294, 1311, 1318, 1319, 1321, 1322, 1323, 1324, 1328, 1340, 1368, 1371], "dtype_format": [40, 339], "dtypekind": 196, "dtypelik": [194, 953], "dtypeoper": [1, 54], "dubiou": 94, "due": [229, 244, 271, 274, 309, 339, 350, 445, 458, 463, 476, 602, 603, 605, 607, 609, 610, 639, 642, 644, 646, 648, 650, 653, 655, 657, 755, 769, 770, 772, 773, 817, 818, 830, 848, 870, 875, 894, 945, 1054, 1071, 1076, 1089], "dummi": [294, 339, 1316, 1340], "dump": 134, "duplic": [51, 99, 236, 243, 244, 245, 304, 308, 339, 350, 516, 602, 626, 830, 874, 875, 876, 909, 912, 945, 1129, 1214, 1340, 1369], "duplicateerror": [626, 830, 1214, 1340], "dur": [245, 339, 876, 945], "durat": [192, 244, 309, 339, 437, 445, 468, 469, 470, 471, 472, 473, 474, 475, 479, 485, 734, 769, 770, 772, 773, 817, 818, 830, 875, 945, 950, 951, 1046, 1054, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1101, 1321, 1323, 1340], "dure": [50, 98, 138, 139, 152, 192, 217, 339, 1106, 1340], "dutch": [436, 755, 1045], "dynam": [135, 229, 339, 388, 569, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 830, 870, 945, 949, 994, 1185], "dynamicgroupbi": [229, 339], "e": [10, 33, 35, 37, 39, 41, 42, 45, 46, 134, 138, 144, 146, 150, 155, 157, 158, 170, 208, 220, 227, 231, 240, 244, 247, 290, 291, 297, 307, 339, 348, 431, 481, 485, 488, 515, 572, 578, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 664, 669, 688, 709, 710, 721, 776, 792, 809, 820, 830, 857, 866, 875, 878, 892, 945, 949, 951, 1095, 1101, 1128, 1251, 1269, 1302, 1340, 1358, 1363, 1371], "e101": [40, 339], "e_filt": [589, 591], "e_sum_ov": [589, 591], "e_sum_slic": [589, 591], "each": [37, 40, 46, 51, 60, 67, 78, 139, 140, 143, 148, 156, 161, 162, 163, 164, 166, 204, 206, 213, 220, 227, 228, 229, 242, 244, 248, 261, 263, 267, 271, 273, 275, 296, 301, 305, 308, 309, 317, 318, 320, 322, 324, 325, 333, 339, 364, 409, 413, 414, 429, 463, 476, 494, 518, 521, 547, 550, 557, 567, 574, 578, 626, 629, 637, 638, 645, 649, 660, 665, 672, 685, 689, 690, 694, 695, 703, 705, 706, 714, 721, 736, 750, 753, 759, 784, 785, 789, 812, 820, 830, 851, 854, 855, 861, 866, 870, 875, 889, 891, 894, 910, 912, 921, 923, 925, 927, 928, 936, 945, 970, 1018, 1019, 1025, 1039, 1076, 1089, 1132, 1135, 1163, 1166, 1173, 1183, 1214, 1216, 1224, 1225, 1238, 1247, 1266, 1270, 1271, 1275, 1276, 1284, 1286, 1287, 1295, 1302, 1310, 1340, 1357, 1368, 1369, 1371], "eager": [229, 244, 263, 307, 339, 438, 441, 444, 446, 455, 456, 458, 459, 462, 463, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 642, 644, 646, 648, 650, 653, 655, 657, 750, 754, 769, 770, 772, 773, 780, 784, 785, 788, 789, 802, 805, 808, 809, 812, 817, 818, 821, 829, 830, 870, 875, 880, 945, 950, 1046, 1047, 1050, 1053, 1054, 1055, 1056, 1061, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1368], "eagerli": [569, 1349], "ear": [703, 714, 1284], "earlier": [244, 339, 875, 945], "earliest": [229, 339, 461, 462, 713, 716, 771, 870, 937, 945, 1074, 1075, 1294, 1297], "easi": 192, "easiest": 197, "easili": [51, 277, 301, 313, 318, 339, 812, 826, 896, 915, 921, 945], "east": [69, 157, 245, 339, 876, 945], "ebf1d": [40, 339], "eee": [1, 40, 339, 951], "ef": 700, "effect": [40, 222, 229, 339, 445, 498, 578, 604, 606, 608, 760, 830, 870, 918, 919, 945, 1046, 1054], "effici": [124, 140, 240, 242, 339, 577, 830], "efgh": 1363, "eg": [17, 25, 26, 40, 59, 141, 192, 296, 339, 463, 713, 716, 737, 830, 951, 1294, 1297], "egnaro": 1363, "either": [82, 135, 168, 239, 243, 244, 245, 261, 271, 272, 296, 297, 339, 485, 577, 624, 626, 639, 713, 745, 753, 757, 812, 830, 851, 874, 875, 876, 878, 894, 945, 949, 951, 1101, 1212, 1214, 1294, 1340, 1353, 1371], "element": [13, 14, 25, 163, 164, 167, 168, 170, 172, 197, 199, 206, 239, 263, 272, 285, 287, 302, 310, 339, 356, 357, 358, 359, 360, 361, 372, 373, 408, 409, 416, 419, 420, 421, 422, 424, 425, 426, 427, 428, 434, 435, 489, 490, 494, 507, 511, 519, 530, 538, 540, 541, 542, 545, 550, 558, 559, 560, 561, 565, 571, 573, 574, 577, 578, 619, 620, 629, 632, 640, 641, 643, 645, 647, 649, 651, 652, 654, 656, 661, 666, 667, 668, 672, 673, 674, 705, 706, 717, 732, 733, 735, 736, 742, 753, 762, 788, 806, 807, 811, 819, 830, 846, 855, 903, 905, 908, 913, 945, 962, 963, 964, 965, 966, 967, 978, 979, 1013, 1023, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1043, 1044, 1104, 1105, 1110, 1111, 1122, 1125, 1133, 1142, 1144, 1146, 1147, 1154, 1156, 1157, 1158, 1161, 1166, 1174, 1175, 1176, 1177, 1189, 1190, 1193, 1209, 1216, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1240, 1248, 1249, 1250, 1254, 1255, 1286, 1287, 1298, 1312, 1313, 1314, 1318, 1325, 1326, 1330, 1340, 1357, 1358], "elementwis": [577, 619, 640, 641, 643, 645, 647, 649, 652, 654, 656, 830, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1340], "elif": 820, "elig": [880, 945], "elimin": [527, 830, 1143, 1340], "elis": [255, 339, 885, 945], "ellips": 20, "ellipsi": [227, 339], "elppa": 1363, "els": [139, 820], "email": [685, 1266], "email_part": [685, 1266], "emphas": [339, 343], "emploi": 951, "empti": [13, 35, 37, 46, 103, 126, 138, 139, 143, 149, 152, 201, 202, 229, 254, 306, 339, 675, 683, 790, 808, 849, 850, 870, 884, 911, 945, 950, 951, 1026, 1028, 1111, 1130, 1144, 1256, 1264, 1340], "en": [20, 40, 339], "enabl": [28, 29, 45, 49, 50, 90, 91, 142, 150, 153, 155, 157, 161, 162, 163, 164, 176, 194, 277, 298, 313, 339, 351, 353, 633, 634, 662, 677, 687, 689, 701, 741, 826, 830, 851, 896, 915, 945, 953, 958, 959, 1220, 1221, 1242, 1258, 1268, 1270, 1282, 1322, 1329, 1340], "enable_string_cach": 90, "enclos": [500, 830], "encod": [63, 69, 81, 134, 138, 139, 152, 294, 339, 342, 393, 500, 637, 679, 725, 830, 998, 1224, 1260, 1316, 1340, 1345], "encount": [114, 138, 139, 152, 229, 339, 611, 612, 692, 693, 760, 764, 778, 830, 870, 945, 1202, 1203, 1273, 1274, 1340], "end": [37, 40, 46, 138, 139, 152, 229, 263, 339, 392, 395, 398, 411, 415, 437, 463, 488, 563, 676, 681, 685, 690, 697, 703, 707, 708, 709, 712, 750, 755, 768, 769, 770, 771, 772, 773, 776, 784, 785, 788, 789, 817, 818, 820, 826, 830, 870, 889, 945, 951, 1000, 1015, 1020, 1046, 1076, 1140, 1179, 1262, 1266, 1271, 1278, 1284, 1288, 1289, 1290, 1295, 1340, 1363], "endian": [396, 1001], "endpoint": [177, 429, 626, 788, 830, 1039, 1214, 1340], "ends_a": 1363, "ends_in_digit": 1363, "ends_with": [392, 398, 415, 676, 707, 951, 1020, 1288, 1361], "ends_with_expr": 395, "ends_with_lit": 395, "engin": [14, 38, 140, 141, 143, 149, 174, 228, 243, 248, 297, 304, 325, 339, 577, 809, 830, 851, 869, 874, 880, 884, 909, 920, 928, 942, 945, 949, 1193, 1321, 1340, 1352, 1368], "engine_opt": [38, 143, 339], "enginetyp": [851, 945], "enough": [541, 669, 830, 1157, 1251, 1340], "ensur": [10, 40, 135, 141, 167, 170, 194, 220, 228, 261, 263, 267, 272, 297, 339, 515, 577, 830, 866, 869, 880, 891, 920, 945, 951, 953, 1321, 1340], "enter": 192, "entir": [40, 57, 58, 143, 149, 339, 851, 852, 945], "entri": [192, 339, 945, 950, 1368], "entropi": [830, 1340], "enumer": [69, 128, 138, 139, 143, 149, 152, 242, 339], "env": [4, 173], "env_onli": 30, "environ": [4, 30, 37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 171, 174, 177, 182, 296, 339, 945], "eol_char": [138, 139, 152], "eparg": 1363, "epoch": [65, 66, 780, 1364], "epoch_": [446, 1055], "epoch_n": [446, 1055], "epochtimeunit": [446, 780, 1055], "eq": [220, 267, 339, 483, 494, 830, 866, 891, 945, 1097, 1340], "eq_miss": [830, 1205, 1340], "equal": [50, 91, 138, 139, 152, 161, 162, 163, 164, 229, 244, 245, 255, 285, 339, 429, 476, 482, 483, 503, 529, 569, 614, 626, 632, 640, 641, 643, 645, 647, 649, 652, 654, 656, 672, 697, 698, 701, 723, 753, 788, 806, 807, 820, 826, 830, 866, 870, 875, 876, 885, 891, 903, 945, 1039, 1076, 1097, 1185, 1205, 1214, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1278, 1279, 1282, 1304, 1340, 1357, 1360, 1371], "equival": [40, 59, 123, 125, 126, 127, 129, 147, 148, 156, 229, 239, 259, 339, 348, 352, 414, 482, 483, 485, 498, 503, 505, 529, 576, 598, 600, 613, 614, 615, 618, 624, 695, 719, 721, 722, 729, 737, 744, 830, 870, 945, 1019, 1096, 1097, 1101, 1116, 1118, 1142, 1145, 1192, 1204, 1205, 1276, 1300, 1302, 1303, 1340, 1350, 1358, 1370], "err": 686, "error": [14, 39, 58, 59, 109, 113, 115, 125, 126, 129, 138, 139, 143, 150, 152, 157, 244, 263, 272, 297, 339, 350, 375, 376, 393, 436, 544, 546, 548, 569, 602, 634, 676, 679, 684, 686, 688, 692, 693, 713, 715, 716, 720, 830, 848, 852, 875, 920, 928, 945, 981, 982, 998, 1045, 1160, 1162, 1164, 1221, 1257, 1260, 1265, 1267, 1269, 1273, 1274, 1294, 1296, 1297, 1301, 1321, 1340, 1366], "escap": [92, 138, 139, 141, 152, 682, 699, 700, 1263, 1280, 1281], "esp": 14, "especi": [166, 638, 830, 945, 1225, 1340], "espresso": 951, "est": 772, "establish": [140, 192], "estim": [138, 139, 198, 215, 339, 355, 486, 487, 527, 749, 830, 845, 945, 961, 1099, 1102, 1103, 1143, 1340], "estimated_s": [339, 1340], "etc": [21, 39, 40, 135, 138, 142, 143, 144, 146, 153, 154, 339, 578, 830, 951, 1239, 1241, 1340, 1364], "eu": [153, 154], "eur": [227, 339, 1371], "europ": [441, 445, 462, 1050, 1054, 1075], "eval": [295, 339, 577, 578, 775, 830, 1193, 1318, 1340], "evalu": [46, 47, 48, 49, 157, 218, 220, 244, 267, 339, 352, 365, 367, 368, 400, 401, 402, 403, 405, 406, 428, 494, 512, 532, 533, 569, 618, 619, 745, 747, 750, 754, 769, 770, 772, 773, 775, 784, 785, 788, 789, 802, 805, 808, 812, 817, 818, 820, 821, 830, 851, 866, 872, 874, 875, 891, 945, 971, 973, 974, 1005, 1006, 1007, 1008, 1010, 1011, 1038, 1110, 1148, 1149, 1331, 1340, 1360], "even": [37, 46, 138, 243, 339, 485, 623, 626, 830, 874, 945, 951, 1101, 1214, 1340], "evenli": [229, 339, 788, 789, 870, 945], "event": [58, 852, 945], "eventu": [38, 339], "ever": [619, 830], "everi": [14, 37, 46, 138, 139, 143, 149, 152, 223, 229, 293, 309, 339, 367, 368, 369, 370, 373, 375, 381, 424, 425, 426, 427, 428, 463, 476, 490, 502, 534, 535, 539, 542, 545, 546, 547, 555, 558, 563, 567, 638, 683, 764, 765, 830, 868, 870, 945, 973, 974, 975, 976, 979, 981, 987, 1034, 1035, 1036, 1037, 1038, 1076, 1089, 1105, 1115, 1150, 1151, 1155, 1158, 1161, 1162, 1163, 1171, 1174, 1179, 1183, 1225, 1264, 1340], "everybodi": [677, 701, 1258, 1282], "everyth": 951, "ew": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "ewm_mean": [830, 1340], "ewm_mean_bi": [830, 1340], "ewm_std": [830, 1340], "ewm_var": [830, 1340], "ewma": [485, 830, 1101, 1340], "exact": [163, 166, 168, 172, 244, 283, 339, 355, 498, 683, 711, 712, 713, 715, 716, 737, 830, 875, 945, 1264, 1294, 1296, 1297], "exactli": [125, 126, 129, 161, 162, 163, 164, 167, 168, 172, 339, 705, 706, 711, 712, 774, 945, 1246, 1286, 1287, 1292, 1293, 1340], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 78, 82, 90, 91, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 139, 140, 141, 142, 143, 147, 148, 149, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 830, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 950, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1117, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1340, 1345, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1369, 1370], "exc_tb": 1368, "exc_typ": 1368, "exc_val": 1368, "exce": [227, 339], "excel": [36, 40, 137, 143, 339, 842], "excelspreadsheetengin": 143, "except": [0, 209, 224, 231, 244, 247, 268, 290, 339, 634, 690, 714, 776, 830, 842, 858, 875, 892, 945, 951, 1014, 1122, 1147, 1221, 1271, 1295, 1312, 1321, 1340, 1367], "exclud": [168, 172, 229, 339, 409, 424, 427, 436, 515, 585, 736, 755, 826, 830, 870, 945, 951, 1045, 1128, 1340], "excluded_dtyp": [168, 169, 172], "exclus": [272, 339, 744, 750, 784, 785, 830], "execut": [39, 50, 59, 135, 140, 141, 246, 286, 339, 431, 541, 741, 809, 830, 847, 851, 857, 880, 889, 904, 920, 945, 1157, 1329, 1340, 1350, 1351, 1352, 1354, 1368, 1370], "execute_glob": 1368, "execute_opt": [140, 141], "exist": [1, 38, 39, 40, 51, 69, 99, 142, 150, 153, 157, 168, 209, 224, 263, 268, 303, 308, 313, 314, 339, 350, 392, 395, 398, 440, 462, 699, 700, 758, 830, 854, 858, 861, 892, 895, 912, 914, 915, 916, 945, 951, 1049, 1075, 1280, 1281, 1370], "existing_t": 1370, "existing_table_path": [39, 339], "exit": [50, 90, 192, 1355, 1368], "exp": [484, 485, 486, 487, 830, 1100, 1101, 1102, 1103, 1340, 1361], "exp_a": 1362, "expand": [135, 138, 150, 152, 157, 490, 583, 587, 632, 727, 830, 951, 1105, 1340], "expand_selector": 951, "expans": 724, "expect": [37, 39, 41, 45, 46, 47, 48, 49, 67, 69, 73, 104, 112, 120, 138, 140, 142, 148, 150, 152, 153, 155, 156, 157, 162, 164, 182, 339, 569, 578, 790, 830, 878, 880, 945], "expens": [138, 139, 148, 150, 152, 156, 157, 171, 173, 241, 248, 272, 273, 274, 303, 304, 339, 578, 830, 854, 856, 861, 895, 909, 914, 945, 1106, 1193, 1340, 1371], "experiment": [245, 301, 339, 788, 789, 876, 915, 945], "expiri": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 339, 945], "explain": [57, 58, 197, 246, 339, 851, 852, 945, 1367], "explainformat": [862, 945], "explicit": [40, 98, 140, 152, 166, 286, 308, 339, 468, 804, 904, 912, 945, 1081], "explicitli": [69, 98, 141, 166, 168, 192, 224, 243, 339, 633, 812, 830, 841, 874, 945, 1368], "explod": [135, 339, 409, 496, 619, 635, 736, 830, 945, 1222, 1340, 1358], "explor": [207, 339, 856, 945], "expon": [624, 830, 1212, 1340, 1362], "exponenti": [484, 485, 486, 487, 489, 624, 830, 1100, 1101, 1102, 1103, 1104, 1340, 1362], "export": [40, 41, 42, 195, 241, 242, 273, 274, 291, 293, 296, 339, 826, 951, 954, 1315, 1340], "expos": 842, "expr": [1, 51, 52, 53, 54, 55, 133, 135, 216, 218, 219, 243, 244, 245, 259, 263, 272, 277, 278, 296, 301, 313, 314, 339, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 826, 830, 831, 832, 835, 836, 837, 838, 839, 863, 864, 865, 874, 875, 876, 890, 896, 897, 915, 916, 945, 951, 1038, 1071, 1096, 1097, 1101, 1108, 1109, 1114, 1116, 1118, 1145, 1157, 1163, 1179, 1183, 1192, 1204, 1205, 1257, 1262, 1269, 1288, 1340, 1366], "expr1": [1360, 1368], "expr2": [1360, 1368], "expr_unique_subset": [259, 339], "express": [0, 8, 46, 47, 48, 49, 57, 58, 133, 135, 165, 168, 172, 199, 216, 218, 220, 228, 234, 243, 244, 248, 259, 263, 267, 272, 277, 278, 282, 285, 296, 301, 302, 313, 314, 316, 318, 325, 339, 348, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 364, 365, 369, 370, 371, 372, 373, 376, 387, 392, 393, 394, 395, 396, 397, 398, 409, 411, 413, 414, 415, 418, 419, 420, 421, 422, 428, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 488, 490, 491, 493, 494, 498, 500, 501, 503, 504, 505, 506, 512, 515, 516, 517, 518, 519, 520, 521, 529, 530, 534, 535, 537, 538, 541, 542, 548, 550, 568, 569, 575, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 598, 600, 602, 603, 605, 607, 609, 610, 613, 614, 616, 618, 619, 623, 624, 625, 626, 628, 632, 633, 634, 635, 637, 638, 660, 661, 662, 665, 667, 668, 670, 672, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 699, 700, 701, 703, 704, 705, 706, 714, 718, 728, 729, 732, 733, 736, 737, 738, 740, 741, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 799, 802, 804, 805, 806, 807, 808, 810, 812, 814, 816, 817, 818, 820, 821, 826, 829, 842, 846, 851, 852, 862, 863, 866, 869, 874, 875, 889, 891, 896, 897, 900, 901, 903, 908, 915, 916, 917, 919, 921, 928, 945, 951, 978, 1027, 1038, 1045, 1049, 1081, 1096, 1097, 1101, 1107, 1116, 1118, 1128, 1145, 1154, 1157, 1192, 1193, 1204, 1205, 1220, 1221, 1240, 1244, 1257, 1258, 1259, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1280, 1281, 1282, 1295, 1299, 1340, 1358, 1360, 1362, 1363, 1367], "exprmetanamespac": [582, 588], "ext": 140, "extend": [0, 126, 311, 339, 491, 830, 842, 949, 960, 1107, 1340], "extend_const": [830, 1340], "extens": [298, 339, 1322, 1340], "extern": [189, 917, 945], "external_shallow_clon": 189, "extra": [39, 135, 138, 139, 142, 144, 146, 150, 152, 153, 154, 157, 217, 229, 339, 830, 870, 945, 1106, 1340], "extract": [130, 197, 286, 339, 439, 442, 444, 447, 449, 450, 451, 452, 453, 454, 457, 459, 460, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 623, 685, 686, 687, 692, 693, 703, 705, 830, 1048, 1051, 1052, 1053, 1056, 1058, 1062, 1063, 1064, 1066, 1067, 1070, 1072, 1073, 1077, 1079, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1093, 1266, 1267, 1268, 1273, 1274, 1284, 1361], "extract_mani": [689, 1270], "extract_numb": [623, 830], "extracted_nr": 685, "extrem": [491, 640, 830, 1107, 1226, 1340], "extrema": [664, 830, 1245, 1340], "f": [52, 139, 140, 220, 227, 242, 291, 297, 303, 307, 339, 348, 388, 397, 569, 664, 683, 713, 716, 758, 830, 866, 945, 951, 994, 1185, 1264, 1294, 1297, 1340, 1345, 1358], "f32": [1, 54, 200, 286, 295, 301, 339, 664, 809, 830, 848, 904, 945, 951, 1191, 1340, 1366], "f4": [297, 339], "f5ed2452": [40, 339], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 51, 53, 55, 59, 78, 124, 126, 147, 158, 165, 168, 200, 201, 202, 205, 207, 208, 209, 211, 213, 218, 219, 222, 226, 227, 228, 229, 234, 235, 243, 244, 250, 251, 252, 253, 257, 263, 264, 265, 284, 285, 287, 289, 301, 310, 313, 318, 321, 323, 326, 327, 328, 329, 331, 332, 339, 347, 350, 356, 357, 358, 359, 360, 361, 379, 385, 390, 397, 410, 416, 417, 419, 420, 421, 429, 430, 434, 435, 464, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 497, 498, 503, 505, 513, 514, 522, 523, 524, 525, 527, 529, 541, 552, 553, 565, 571, 572, 573, 574, 576, 579, 580, 581, 597, 600, 602, 611, 612, 613, 614, 620, 624, 626, 627, 628, 629, 633, 634, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 666, 667, 668, 669, 673, 674, 728, 732, 733, 737, 742, 751, 752, 756, 758, 760, 762, 775, 776, 788, 789, 792, 795, 796, 797, 809, 811, 819, 826, 830, 848, 849, 856, 858, 859, 864, 865, 869, 870, 873, 874, 875, 882, 883, 890, 903, 905, 913, 915, 917, 921, 924, 926, 929, 930, 931, 932, 934, 935, 945, 951, 962, 963, 964, 965, 966, 967, 985, 991, 996, 1002, 1023, 1024, 1029, 1030, 1031, 1039, 1040, 1043, 1044, 1077, 1100, 1101, 1102, 1103, 1104, 1108, 1113, 1123, 1126, 1127, 1157, 1168, 1169, 1181, 1187, 1188, 1189, 1190, 1209, 1212, 1214, 1216, 1221, 1226, 1228, 1229, 1231, 1232, 1233, 1235, 1236, 1237, 1248, 1249, 1250, 1254, 1313, 1314, 1328, 1340, 1349, 1357, 1358, 1362, 1365, 1368, 1371], "f_string": 779, "fa1e": [718, 1299], "face": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 339, 945], "facil": 140, "facilit": [203, 339], "factor": [484, 486, 487, 734, 830, 1100, 1102, 1103, 1323, 1340], "fail": [37, 38, 39, 41, 45, 46, 47, 48, 49, 124, 142, 144, 148, 150, 152, 153, 155, 156, 157, 182, 196, 297, 304, 339, 365, 466, 569, 713, 715, 716, 720, 830, 909, 945, 1193, 1294, 1296, 1297, 1301, 1321, 1340, 1366], "fall": [157, 429, 626, 830, 851, 920, 945, 1039, 1214, 1340, 1357], "fallback": [124, 143], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 124, 125, 126, 128, 129, 130, 135, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 196, 199, 200, 201, 202, 207, 214, 220, 222, 226, 227, 228, 229, 233, 234, 236, 237, 238, 241, 243, 244, 246, 251, 252, 258, 259, 261, 263, 264, 267, 272, 273, 274, 275, 277, 280, 283, 285, 286, 289, 292, 294, 297, 298, 302, 303, 304, 308, 309, 311, 313, 321, 323, 326, 327, 329, 332, 339, 351, 352, 353, 364, 367, 368, 371, 375, 376, 384, 389, 392, 395, 398, 409, 410, 411, 415, 423, 424, 425, 426, 427, 428, 429, 436, 448, 464, 481, 482, 483, 484, 486, 487, 505, 506, 509, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 537, 541, 544, 546, 548, 557, 564, 569, 570, 576, 577, 578, 582, 584, 585, 586, 588, 590, 593, 594, 613, 614, 616, 618, 619, 621, 622, 626, 629, 640, 641, 643, 645, 647, 649, 651, 652, 654, 656, 660, 662, 664, 669, 671, 672, 675, 676, 677, 678, 681, 687, 688, 689, 691, 692, 699, 700, 701, 704, 705, 707, 713, 715, 716, 718, 736, 738, 741, 744, 745, 746, 747, 748, 750, 753, 754, 755, 759, 760, 763, 764, 769, 770, 772, 773, 784, 785, 788, 789, 790, 796, 802, 805, 808, 809, 812, 814, 817, 818, 820, 821, 830, 846, 848, 849, 850, 851, 852, 856, 862, 866, 869, 870, 874, 875, 878, 880, 889, 891, 896, 899, 901, 903, 904, 908, 909, 912, 915, 920, 924, 926, 929, 930, 932, 935, 945, 950, 951, 958, 959, 970, 973, 974, 977, 981, 982, 990, 995, 997, 998, 1000, 1003, 1014, 1015, 1017, 1020, 1022, 1025, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045, 1057, 1077, 1097, 1098, 1100, 1102, 1103, 1110, 1112, 1117, 1119, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1148, 1149, 1153, 1157, 1160, 1162, 1164, 1173, 1180, 1186, 1199, 1205, 1207, 1210, 1211, 1214, 1216, 1217, 1218, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1242, 1246, 1251, 1253, 1256, 1257, 1258, 1259, 1262, 1268, 1269, 1270, 1272, 1273, 1280, 1281, 1282, 1285, 1286, 1288, 1294, 1296, 1297, 1299, 1316, 1321, 1322, 1326, 1329, 1331, 1340, 1350, 1352, 1358, 1363, 1368], "far": [40, 339], "fashion": [243, 339, 862, 889, 901, 945], "fast": [45, 47, 49, 135, 171, 173, 339, 491, 662, 830, 945, 949, 1107, 1242, 1340, 1371], "fast_executemani": [38, 339], "faster": [46, 47, 48, 49, 57, 58, 140, 143, 217, 297, 307, 339, 578, 739, 830, 851, 852, 862, 889, 901, 945, 1106, 1193, 1340], "fastexcel": [143, 160], "favor": [38, 339], "fay": 134, "feat1": [296, 301, 339], "feat2": [296, 301, 339], "feather": [41, 144, 155, 339, 842], "featur": [1, 45, 56, 67, 69, 73, 296, 301, 339], "feature_0": [917, 945], "feature_0_train": [917, 945], "feature_1": [917, 945], "feature_nam": [301, 339], "feb": [160, 1363], "februari": 1363, "fed": 709, "feel": [677, 701, 1258, 1282], "fetch": [132, 851, 945], "fetch_california_h": [301, 339], "few": [227, 339], "fewer": [690, 714, 945, 1271, 1295], "ff": 1357, "ff00": [718, 1299], "fff": 1, "ffff00": [393, 394, 679, 998, 999, 1260], "ffffff": [40, 339], "ffi": [215, 339, 1099, 1340], "fgg": 951, "fghi": 1363, "fh": 139, "fiction": 1349, "field": [36, 37, 39, 46, 82, 116, 119, 126, 305, 339, 388, 569, 577, 578, 604, 606, 608, 637, 685, 686, 692, 705, 706, 726, 727, 728, 734, 741, 764, 765, 791, 812, 830, 910, 945, 994, 1185, 1193, 1224, 1267, 1286, 1287, 1308, 1310, 1323, 1340, 1364], "field_0": [388, 569, 994, 1185], "field_1": [388, 569, 994, 1185], "field_2": [994, 1185], "field_n": [388, 569, 994, 1185], "field_nam": [578, 830, 1193, 1340], "fiftyf": [511, 830], "figsiz": [593, 889, 901, 945], "figur": [593, 659, 830, 901, 945, 1237, 1340], "file": [2, 3, 5, 6, 32, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 208, 217, 279, 339, 431, 500, 592, 596, 830, 857, 898, 945, 949, 1106, 1340], "file_cache_ttl": [148, 152, 155, 156], "filenam": 144, "filesourc": [143, 149, 150, 157], "filesystem": [39, 142, 153, 154, 339], "fill": [51, 59, 201, 218, 219, 282, 307, 339, 343, 391, 424, 427, 492, 493, 499, 513, 514, 641, 643, 645, 647, 649, 652, 654, 656, 663, 779, 802, 805, 821, 830, 864, 865, 900, 917, 945, 1108, 1109, 1126, 1127, 1206, 1227, 1228, 1230, 1233, 1234, 1235, 1244, 1340], "fill_char": [697, 698, 1278, 1279], "fill_nan": [219, 339, 493, 830, 865, 945, 1109, 1340], "fill_nul": [51, 218, 339, 492, 830, 864, 917, 945, 1108, 1340], "fill_valu": [282, 307, 339, 663, 830, 900, 945, 1244, 1340], "fillnullstrategi": [219, 339, 493, 830, 865, 945, 1109, 1340], "film": 1349, "filter": [1, 46, 47, 48, 49, 52, 57, 58, 133, 152, 153, 157, 158, 211, 212, 236, 237, 238, 263, 267, 325, 339, 411, 415, 589, 591, 681, 707, 743, 768, 771, 778, 808, 809, 820, 830, 851, 852, 859, 860, 862, 872, 889, 891, 901, 904, 928, 945, 951, 1241, 1340, 1356], "final": [13, 40, 51, 135, 157, 244, 246, 339, 484, 486, 487, 830, 856, 875, 945, 1100, 1102, 1103, 1340, 1369], "find": [59, 225, 339, 511, 661, 676, 677, 689, 830, 1125, 1240, 1258, 1270, 1280, 1340], "find_pat": 688, "fine": [851, 942, 945], "finish": [217, 339, 1106, 1340], "finit": [517, 737, 760, 830, 1131, 1340], "first": [45, 51, 138, 139, 143, 144, 146, 149, 150, 152, 157, 161, 162, 163, 164, 197, 227, 229, 231, 243, 244, 247, 248, 258, 262, 263, 271, 290, 294, 295, 303, 304, 309, 316, 322, 339, 364, 366, 375, 428, 432, 456, 458, 463, 479, 498, 508, 511, 518, 531, 539, 541, 546, 547, 569, 577, 578, 590, 599, 623, 624, 639, 661, 672, 676, 683, 684, 688, 690, 692, 693, 699, 700, 714, 721, 756, 757, 764, 778, 782, 820, 826, 830, 870, 871, 874, 875, 879, 888, 894, 909, 917, 919, 925, 945, 951, 970, 981, 1038, 1040, 1041, 1069, 1071, 1076, 1092, 1122, 1125, 1132, 1147, 1155, 1157, 1162, 1163, 1185, 1193, 1240, 1253, 1264, 1265, 1267, 1269, 1271, 1273, 1274, 1280, 1281, 1295, 1302, 1312, 1316, 1318, 1321, 1340, 1360, 1361, 1363, 1369, 1371], "first_column": [40, 339], "first_non_nul": [569, 1185], "first_part": [705, 706, 1286, 1287], "fisher": [527, 669, 830, 1143, 1251, 1340], "fit": [134, 241, 283, 307, 339, 664, 805, 830, 1245, 1246, 1340], "five": [300, 339, 1371], "fix": [10, 60, 69, 166, 479, 774, 789, 1092], "flag": [56, 142, 153, 165, 280, 297, 339, 662, 676, 684, 685, 688, 699, 700, 830, 862, 880, 899, 945, 951, 1242, 1257, 1265, 1266, 1269, 1280, 1281, 1321, 1340, 1363], "flat": [134, 274, 339, 542, 635, 830, 1158, 1222, 1340], "flatten": 830, "flavour": [40, 140, 339], "flight": 140, "flight_sql": 140, "flightsql": 140, "float": [10, 11, 37, 40, 46, 71, 72, 138, 139, 152, 158, 161, 162, 163, 164, 165, 168, 172, 196, 207, 211, 215, 218, 244, 265, 275, 296, 297, 331, 339, 371, 417, 429, 434, 435, 464, 481, 482, 483, 484, 486, 487, 492, 497, 498, 503, 505, 513, 517, 520, 522, 523, 524, 525, 529, 537, 557, 572, 576, 579, 593, 597, 611, 612, 613, 614, 624, 626, 627, 640, 641, 643, 645, 647, 649, 650, 652, 654, 656, 658, 660, 666, 737, 803, 805, 830, 856, 859, 864, 875, 890, 901, 934, 945, 951, 977, 1014, 1024, 1039, 1040, 1042, 1043, 1044, 1077, 1095, 1099, 1100, 1102, 1103, 1108, 1113, 1123, 1143, 1153, 1173, 1188, 1202, 1203, 1212, 1213, 1214, 1215, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1238, 1241, 1248, 1251, 1255, 1311, 1321, 1330, 1340, 1368, 1371], "float16": [301, 339], "float32": [1, 10, 37, 46, 54, 200, 222, 295, 296, 297, 301, 339, 485, 830, 848, 945, 951, 1101, 1130, 1191, 1319, 1321, 1324, 1340], "float4": [286, 339, 809, 904, 945, 1366], "float64": [10, 37, 40, 46, 126, 138, 147, 165, 168, 203, 213, 215, 222, 276, 301, 313, 339, 356, 357, 358, 359, 360, 361, 397, 410, 419, 420, 421, 430, 464, 485, 488, 522, 523, 628, 667, 668, 732, 733, 776, 792, 802, 805, 821, 826, 830, 853, 861, 895, 915, 945, 950, 951, 1077, 1101, 1322, 1328, 1340], "float_list": 78, "float_precis": [9, 10, 27, 37, 40, 46, 339, 945], "float_scientif": [37, 46, 339, 945], "floatfmt": 11, "floor": [53, 498, 830, 1340, 1361], "floor_a": 1362, "floordiv": [737, 830], "fmt": [11, 244, 339, 512, 779, 830, 872, 875, 945], "fmt_number": [339, 343], "fmt_str_length": [12, 769, 770, 772, 773], "fmt_table_cell_list_len": 13, "fmt_titl": [40, 339], "fn": [764, 765, 778, 804], "foggi": [699, 700, 1280, 1281], "fold": [339, 590, 756, 764, 765, 804], "folder": 158, "follow": [40, 45, 56, 133, 138, 139, 140, 142, 143, 149, 152, 153, 154, 229, 244, 248, 262, 271, 297, 309, 339, 458, 463, 476, 485, 577, 623, 624, 629, 639, 642, 644, 646, 648, 650, 651, 653, 655, 657, 666, 726, 737, 752, 769, 770, 772, 773, 792, 817, 818, 820, 822, 823, 825, 830, 831, 832, 835, 837, 838, 839, 870, 875, 888, 894, 945, 951, 1071, 1076, 1089, 1101, 1212, 1216, 1239, 1241, 1248, 1321, 1332, 1334, 1336, 1340, 1341, 1346, 1347, 1348, 1366, 1371], "font": [40, 339], "font_color": [40, 339], "font_siz": [40, 339], "foo": [35, 37, 39, 41, 42, 43, 44, 45, 134, 147, 148, 200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 217, 220, 222, 224, 225, 226, 230, 231, 232, 233, 234, 235, 237, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 263, 265, 267, 268, 269, 272, 275, 276, 277, 279, 281, 284, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 303, 304, 305, 310, 311, 312, 317, 339, 412, 429, 431, 458, 502, 508, 512, 531, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 626, 635, 675, 678, 680, 683, 685, 686, 691, 702, 704, 706, 708, 709, 710, 711, 712, 719, 722, 731, 749, 760, 761, 762, 777, 781, 782, 783, 786, 787, 793, 795, 797, 798, 800, 801, 803, 808, 811, 815, 819, 820, 826, 830, 848, 853, 854, 858, 859, 860, 861, 866, 872, 873, 874, 887, 891, 892, 895, 896, 909, 910, 914, 917, 945, 950, 951, 1016, 1039, 1071, 1164, 1212, 1214, 1222, 1259, 1261, 1264, 1266, 1267, 1283, 1287, 1292, 1293, 1300, 1303, 1340, 1354, 1356, 1357, 1358, 1360, 1363, 1366], "foo1": 1363, "foo11": [222, 339], "foo_": [587, 704, 779], "foo_1": [294, 339], "foo_2": [294, 339], "foo_3_4": 1363, "foo_a": [263, 339], "foo_a_bar_1": 779, "foo_at_1": 1358, "foo_b": [263, 339], "foo_b_bar_2": 779, "foo_bar": [582, 588, 704, 790, 1354], "foo_bar2": [582, 588], "foo_bar_baz": 704, "foo_c_bar_3": 779, "foo_low": [719, 1363], "foo_mean": 1358, "foo_q25": 1357, "foo_q50": 1357, "foo_q75": 1357, "foo_std": 1357, "foo_strip": 708, "foo_strip_end": 709, "foo_strip_start": 710, "foo_sum": [1357, 1358], "foo_uniqu": 1358, "foo_upp": [722, 1363], "foo_var": 1357, "foobar": [711, 712, 1292, 1293, 1363], "foobarbar": [712, 1293], "foofoobar": [711, 1292], "foral": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "forc": [244, 248, 297, 325, 339, 569, 874, 875, 928, 945, 1193, 1321, 1340], "force_parallel": [244, 339, 874, 875, 945], "foreign": 189, "form": [37, 46, 123, 125, 126, 127, 129, 147, 148, 156, 241, 273, 307, 339, 468, 620, 696, 721, 830, 945, 1081, 1209, 1277, 1302, 1340, 1363], "format": [7, 11, 15, 16, 20, 36, 37, 40, 41, 42, 45, 46, 94, 124, 136, 138, 139, 140, 143, 144, 146, 149, 152, 158, 195, 208, 216, 227, 241, 254, 263, 273, 274, 279, 293, 306, 337, 339, 343, 431, 463, 465, 468, 592, 593, 594, 713, 715, 716, 720, 774, 830, 857, 862, 863, 884, 898, 911, 945, 949, 954, 1078, 1081, 1294, 1296, 1297, 1301, 1339, 1363, 1364], "formul": [211, 339, 859, 860, 945], "formula": [40, 339, 481, 830, 1095, 1340], "fortran": [296, 297, 339], "forward": [219, 244, 282, 339, 383, 436, 455, 493, 499, 562, 663, 830, 865, 875, 900, 945, 989, 1045, 1068, 1109, 1178, 1244, 1340], "forward_fil": [309, 339, 391, 424, 427, 663, 830], "found": [20, 37, 40, 46, 95, 116, 119, 126, 130, 143, 150, 157, 213, 286, 339, 511, 661, 688, 693, 711, 712, 713, 716, 830, 904, 945, 1125, 1240, 1269, 1274, 1292, 1293, 1294, 1297, 1340, 1352, 1368], "four": [300, 339, 1368], "fourth": [527, 830, 1143, 1340], "frac": [484, 485, 486, 487, 669, 830, 1100, 1101, 1102, 1103, 1251, 1340], "fraction": [37, 46, 161, 162, 163, 164, 275, 339, 464, 557, 620, 660, 713, 716, 830, 945, 1077, 1173, 1209, 1238, 1294, 1297, 1340], "fragment": 1368, "frame": [37, 38, 40, 46, 51, 58, 59, 126, 139, 143, 149, 161, 162, 200, 201, 207, 241, 242, 246, 248, 255, 259, 262, 272, 273, 274, 286, 301, 307, 308, 339, 468, 809, 848, 849, 856, 885, 888, 904, 912, 945, 951, 1026, 1081, 1340, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1367, 1371], "frame_data": [1351, 1354], "frameinittyp": [339, 945], "frametyp": [51, 1368], "framework": [263, 306, 339, 911, 945], "freedom": [287, 310, 339, 565, 571, 652, 653, 656, 657, 674, 742, 762, 806, 807, 811, 819, 830, 905, 913, 945, 1233, 1235, 1255, 1330, 1340], "freeli": [809, 904, 945, 951], "freez": [40, 339], "freeze_pan": [40, 339], "frequenc": [309, 339, 741, 830, 1329, 1340], "frequent": [1239, 1241, 1340], "fri": [339, 342], "fridai": [229, 339, 436, 465, 755, 870, 945, 1045, 1078, 1081], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 36, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 69, 82, 94, 98, 114, 118, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 177, 182, 197, 200, 207, 208, 209, 215, 217, 220, 221, 227, 229, 241, 242, 243, 244, 245, 246, 254, 263, 267, 268, 271, 272, 274, 275, 277, 278, 286, 294, 301, 303, 304, 306, 307, 308, 309, 315, 339, 342, 343, 388, 397, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 485, 488, 498, 500, 513, 527, 545, 557, 569, 578, 586, 611, 612, 614, 619, 620, 623, 626, 628, 639, 640, 642, 644, 646, 648, 650, 653, 655, 657, 660, 672, 684, 685, 690, 692, 693, 703, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 739, 751, 752, 755, 756, 768, 769, 770, 771, 772, 773, 774, 788, 790, 805, 809, 816, 817, 818, 826, 829, 830, 848, 856, 857, 858, 866, 870, 874, 875, 876, 884, 891, 892, 894, 896, 897, 904, 909, 911, 912, 917, 918, 945, 949, 950, 951, 994, 1002, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1097, 1099, 1101, 1106, 1143, 1161, 1173, 1185, 1202, 1203, 1205, 1206, 1209, 1214, 1226, 1238, 1265, 1266, 1271, 1273, 1284, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1301, 1316, 1331, 1340, 1349, 1350, 1351, 1352, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371], "from_arrai": 809, "from_arrow": 124, "from_json": 830, "from_panda": 124, "from_repr": [295, 339, 1318, 1340], "fromkei": [52, 54], "front": [229, 339, 870, 945], "fruit": [292, 339, 411, 415, 636, 681, 707, 714, 830, 1015, 1020, 1262, 1288, 1295], "fruits_revers": [636, 830], "fsspec": [138, 139, 144, 146, 153, 154, 160], "fsspecfileio": 154, "full": [11, 26, 45, 49, 51, 66, 94, 126, 129, 138, 139, 140, 142, 147, 148, 150, 152, 153, 154, 156, 157, 158, 243, 308, 339, 690, 692, 699, 700, 713, 714, 715, 716, 720, 769, 770, 874, 880, 912, 945, 949, 951, 1271, 1273, 1280, 1281, 1294, 1295, 1296, 1297, 1301, 1340, 1356, 1371], "full_sent": 759, "fulli": [170, 262, 275, 297, 339], "funcnam": [40, 339], "function": [0, 31, 32, 33, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 67, 69, 73, 90, 91, 121, 124, 128, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 188, 192, 194, 196, 199, 205, 208, 215, 222, 245, 248, 254, 262, 263, 268, 286, 296, 297, 298, 301, 302, 303, 306, 308, 325, 339, 342, 343, 351, 388, 408, 409, 428, 429, 431, 484, 486, 487, 509, 569, 577, 578, 603, 604, 619, 623, 626, 638, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 666, 669, 689, 734, 735, 736, 745, 749, 757, 761, 763, 764, 765, 777, 778, 780, 782, 783, 786, 788, 789, 791, 792, 795, 797, 800, 802, 804, 811, 815, 819, 821, 826, 830, 842, 846, 852, 857, 876, 880, 884, 888, 892, 904, 908, 911, 912, 919, 928, 945, 949, 953, 994, 1013, 1022, 1038, 1039, 1099, 1100, 1102, 1103, 1123, 1185, 1193, 1214, 1225, 1226, 1229, 1231, 1232, 1239, 1241, 1246, 1248, 1251, 1270, 1319, 1322, 1324, 1325, 1340, 1345, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1366, 1367, 1368, 1369, 1370, 1371], "function_nam": 135, "further": 826, "futur": [58, 196, 207, 243, 244, 280, 339, 852, 856, 874, 875, 899, 945], "g": [33, 37, 46, 134, 138, 142, 144, 146, 153, 158, 170, 196, 208, 240, 297, 307, 339, 348, 431, 485, 488, 578, 664, 776, 830, 857, 892, 945, 949, 1101, 1340, 1371], "g1": [494, 743, 830], "g2": [494, 743, 830], "g_1": [669, 830, 1251, 1340], "gag": 26, "gamma": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "gantt": [889, 945], "gather": [139, 223, 339, 364, 502, 545, 753, 830, 868, 945, 970, 1115, 1161, 1340], "gather_everi": [339, 830, 945, 1340], "gb": [215, 339, 397, 1099, 1340], "gbp": 1371, "gc": [39, 142, 153, 154, 339], "gca": 26, "gcaacgcatata": 26, "gcp": [34, 37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 154, 155, 156, 157, 182, 339, 945], "gdp": [244, 339, 875, 945], "gdp2": [244, 339, 875, 945], "gdp_date": [244, 339, 875, 945], "ge": [830, 1340], "gener": [1, 133, 134, 140, 141, 159, 165, 166, 167, 168, 169, 170, 172, 196, 203, 205, 263, 275, 294, 297, 303, 339, 557, 660, 665, 750, 769, 772, 784, 785, 787, 788, 789, 805, 817, 818, 830, 945, 1014, 1173, 1238, 1247, 1316, 1340, 1371], "geq": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "germani": [244, 339, 875, 945], "get": [51, 58, 69, 135, 145, 151, 158, 188, 197, 199, 203, 204, 213, 221, 224, 226, 229, 231, 232, 236, 238, 239, 247, 250, 257, 258, 263, 271, 272, 276, 281, 284, 290, 298, 302, 312, 322, 333, 339, 349, 362, 363, 364, 366, 374, 377, 389, 397, 409, 412, 424, 425, 426, 427, 436, 446, 495, 501, 508, 511, 526, 528, 531, 543, 549, 570, 579, 580, 581, 589, 591, 597, 611, 612, 621, 622, 627, 638, 639, 670, 674, 683, 730, 731, 735, 736, 738, 742, 753, 755, 777, 782, 786, 792, 793, 794, 795, 797, 798, 799, 801, 811, 815, 819, 830, 846, 851, 852, 854, 861, 866, 867, 870, 871, 877, 879, 894, 895, 902, 907, 908, 914, 925, 936, 945, 950, 955, 968, 969, 970, 971, 972, 980, 983, 995, 1002, 1016, 1025, 1034, 1035, 1036, 1037, 1045, 1055, 1094, 1111, 1112, 1117, 1122, 1125, 1128, 1129, 1141, 1144, 1147, 1159, 1165, 1186, 1194, 1196, 1197, 1199, 1201, 1202, 1203, 1210, 1211, 1215, 1225, 1252, 1255, 1264, 1312, 1316, 1322, 1326, 1330, 1340], "get_chunk": 1340, "get_column": [196, 299, 339], "get_column_index": 339, "get_polars_schema": 190, "get_table_info": 190, "get_token": 33, "get_worksheet_by_nam": [40, 339], "gevent": [58, 160, 852, 945], "gh": 700, "gh45": 700, "gh45ij67kl": 700, "ghi": [348, 685, 830, 951, 1266], "gil": [578, 830, 949], "git": 56, "github": [141, 339], "give": [148, 155, 156, 244, 254, 304, 306, 339, 446, 498, 527, 632, 737, 741, 830, 842, 875, 884, 909, 911, 945, 1055, 1143, 1329, 1340, 1367], "given": [40, 51, 100, 105, 122, 123, 125, 126, 127, 129, 134, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 163, 164, 165, 166, 168, 170, 171, 172, 173, 194, 215, 216, 218, 220, 229, 239, 248, 255, 261, 262, 267, 272, 273, 274, 282, 285, 301, 308, 339, 371, 383, 388, 397, 409, 418, 437, 441, 465, 467, 468, 481, 485, 509, 515, 537, 562, 569, 572, 578, 619, 623, 629, 632, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 661, 663, 685, 686, 697, 698, 713, 716, 723, 726, 736, 776, 777, 786, 791, 792, 805, 806, 807, 830, 863, 870, 880, 885, 888, 891, 900, 903, 912, 928, 945, 950, 951, 953, 977, 989, 994, 1002, 1027, 1046, 1050, 1078, 1080, 1081, 1095, 1099, 1101, 1123, 1128, 1142, 1153, 1178, 1185, 1188, 1191, 1193, 1206, 1212, 1216, 1222, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1240, 1244, 1266, 1267, 1278, 1279, 1294, 1297, 1304, 1328, 1331, 1340, 1349, 1351, 1356, 1358, 1359, 1362, 1363, 1368, 1370, 1371], "glimps": [207, 231, 339], "glob": [138, 139, 143, 150, 152, 155, 156, 157], "global": [50, 90, 91, 143, 159, 168, 176, 286, 339, 633, 634, 809, 830, 904, 945, 1017, 1021, 1220, 1221, 1340, 1350, 1352, 1367], "gmt": [441, 445, 462, 1050, 1054, 1075], "go": [12, 138, 139, 152, 411, 681, 1015, 1262], "godfath": 1349, "goe": 12, "gonfruit": 1295, "good": [45, 47, 49, 241, 339, 945, 1362], "goodby": 1, "googl": [34, 142, 153, 154], "gpu": [296, 339, 851, 920, 942, 945, 1319, 1340], "gpu_devic": [296, 339], "gpudevic": [296, 339], "gpuengin": [851, 945], "grade": [1143, 1340], "grain": [851, 942, 945], "granular": 1368, "grape": 1363, "graph": [57, 140, 246, 339, 593, 851, 872, 917, 945], "graphviz": [246, 339, 593, 901, 945], "great": [339, 343], "great_tabl": [339, 343], "greater": [201, 244, 339, 503, 505, 515, 669, 697, 698, 706, 723, 830, 875, 945, 1128, 1251, 1278, 1279, 1287, 1304, 1340], "greatest": [1357, 1361], "greatli": [144, 155], "green": [50, 90, 91, 325, 741, 830, 928, 1329, 1340], "greenlet": [58, 852, 945], "greet": 1, "grid": [513, 830], "grid_point": [513, 830], "gridlin": [40, 339], "gross": 1349, "group": [9, 27, 45, 49, 135, 139, 157, 200, 228, 229, 242, 244, 259, 261, 263, 271, 274, 307, 309, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 349, 409, 428, 490, 496, 501, 504, 541, 577, 578, 589, 591, 619, 629, 638, 639, 671, 672, 676, 684, 685, 686, 688, 699, 700, 736, 741, 792, 830, 848, 869, 870, 875, 894, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 951, 1038, 1157, 1225, 1257, 1265, 1266, 1267, 1269, 1280, 1281, 1329, 1340, 1349, 1357, 1367, 1368], "group_bi": [229, 259, 263, 271, 309, 338, 339, 349, 399, 404, 407, 409, 494, 496, 501, 504, 577, 578, 619, 671, 672, 736, 743, 769, 772, 792, 830, 851, 852, 862, 870, 889, 894, 901, 943, 945, 951], "group_by_dynam": [271, 339, 894, 945], "group_by_partit": [889, 945], "group_col": [494, 743, 830], "group_df": [325, 928], "group_dtyp": [619, 830], "group_index": [684, 1265], "group_to_row": [619, 830], "groupbi": [228, 339, 578, 792, 830], "grouper": [399, 404, 407, 830], "grow": [311, 339], "grown": [233, 339], "gt": [339, 343, 830, 1340], "gte": [494, 743, 830], "guarante": [45, 49, 138, 139, 199, 207, 230, 255, 302, 304, 339, 408, 409, 507, 734, 735, 736, 830, 846, 856, 885, 908, 909, 945, 1013, 1121, 1323, 1325, 1340], "guid": [133, 135, 830, 949, 1371], "gzip": [45, 49, 339, 945], "h": [307, 339, 348, 465, 468, 664, 699, 700, 713, 716, 720, 830, 1280, 1281, 1294, 1297, 1301, 1363, 1364], "ha": [39, 40, 51, 58, 128, 140, 152, 175, 196, 309, 315, 320, 339, 408, 409, 428, 500, 577, 590, 596, 690, 714, 724, 735, 736, 760, 777, 786, 826, 830, 852, 918, 923, 928, 945, 1013, 1026, 1038, 1040, 1271, 1295, 1325, 1340], "half": [301, 339, 463, 484, 485, 486, 487, 830, 1076, 1100, 1101, 1102, 1103, 1340], "half_lif": [484, 485, 486, 487, 830, 1100, 1101, 1102, 1103, 1340], "ham": [35, 37, 39, 41, 42, 45, 200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 220, 225, 230, 231, 233, 243, 247, 249, 251, 253, 256, 260, 265, 267, 268, 269, 272, 275, 276, 277, 284, 287, 288, 290, 294, 295, 297, 298, 299, 304, 310, 311, 339, 412, 593, 594, 826, 848, 853, 854, 858, 859, 860, 861, 866, 874, 887, 891, 892, 895, 896, 909, 917, 945, 1016, 1356, 1357], "ham_a": [294, 339], "ham_b": [294, 339], "ham_right": [243, 339, 874, 945], "hamburg": 826, "hand": [40, 138, 139, 152, 339, 558, 559, 560, 561, 1174, 1175, 1176, 1177], "handi": [436, 755, 1045], "handl": [39, 57, 58, 97, 130, 135, 138, 139, 152, 158, 220, 224, 267, 339, 432, 539, 683, 723, 830, 851, 852, 866, 891, 945, 1041, 1155, 1264, 1304, 1340], "handler": [136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 339, 431, 830, 857, 945], "happen": [140, 441, 626, 830, 1050, 1214, 1340], "hard": [152, 244, 339, 875, 880, 945], "harder": [229, 339, 870, 945], "hardwar": 1371, "has_head": [138, 139, 143, 149, 152], "has_nul": [830, 1120, 1340], "has_prefix": [415, 707], "has_suffix": [411, 681], "has_two": 1358, "has_valid": 1340, "hash": [230, 339, 830, 1340], "hash_row": 339, "hat": [699, 700, 1280, 1281], "have": [5, 14, 30, 33, 40, 50, 51, 59, 66, 91, 135, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 197, 208, 217, 241, 243, 244, 263, 266, 271, 273, 274, 293, 301, 316, 339, 428, 431, 484, 486, 487, 578, 590, 629, 633, 634, 639, 686, 701, 757, 830, 857, 874, 875, 884, 894, 918, 919, 945, 951, 1038, 1040, 1100, 1102, 1103, 1106, 1216, 1220, 1221, 1280, 1282, 1340, 1367, 1369, 1371], "haystack": [685, 1266], "he": 709, "head": [69, 152, 227, 247, 290, 339, 354, 531, 830, 879, 945, 1147, 1312, 1340], "header": [37, 40, 45, 46, 49, 130, 138, 139, 143, 149, 152, 213, 303, 339, 945], "header_format": [40, 339], "header_nam": [303, 339], "headerless": 152, "heap": [135, 215, 339, 830, 1099, 1340], "heatmap": [40, 339], "heavili": 157, "height": [40, 134, 168, 212, 339, 342, 1340, 1345], "hell": [708, 1289], "hello": [1, 20, 708, 709, 710, 951, 1164, 1289, 1290, 1291, 1351, 1354], "hello_": 779, "hello_data": 1354, "hello_world": 1354, "help": [40, 161, 162, 163, 164, 339, 945], "helper": [339, 343, 826], "henc": [699, 1281], "here": [37, 39, 40, 41, 45, 46, 47, 48, 49, 123, 125, 126, 127, 129, 140, 141, 142, 147, 148, 150, 152, 153, 154, 155, 156, 157, 166, 168, 172, 182, 197, 263, 339, 436, 577, 578, 593, 686, 693, 755, 830, 901, 945, 951, 1045, 1274], "hex": [393, 394, 679, 680, 718, 998, 999, 1260, 1261, 1299], "hexadecim": [998, 999], "hf": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 339, 945], "hf_token": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 339, 945], "hi": [1, 1363], "hidden": [40, 339], "hidden_column": [40, 339], "hide": [21, 22, 23, 24], "hide_gridlin": [40, 339], "hide_password": 140, "high": [274, 339, 343, 626, 830, 842, 1214, 1340], "higher": [45, 49, 207, 265, 331, 339, 627, 649, 650, 803, 830, 856, 890, 934, 945, 1040, 1215, 1231, 1340], "highest": [339, 343, 629, 740, 760, 830, 945, 1216, 1340], "highli": [135, 830], "hint": 133, "hippopotamu": [697, 698, 1278, 1279], "hist": [830, 1340, 1345], "histogram": [1340, 1345], "hit": [847, 945], "hive": [150, 155, 157], "hive_custom": 185, "hive_partit": [150, 155, 157], "hive_schema": [150, 155, 157], "hive_serd": 185, "hmm": 951, "hold": [283, 297, 339, 1321, 1340], "holidai": [436, 755, 1045], "home": [721, 1302], "horizont": [20, 59, 99, 222, 233, 250, 252, 257, 289, 307, 339, 746, 748, 757, 758, 759, 764, 765, 767, 775, 778, 794, 796, 799, 804, 814, 917, 945], "host": [56, 138, 144, 146, 157], "hour": [148, 152, 155, 156, 229, 244, 271, 309, 339, 450, 452, 453, 457, 458, 461, 463, 464, 468, 470, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 771, 772, 773, 774, 788, 816, 817, 818, 830, 870, 875, 894, 945, 951, 1071, 1074, 1076, 1083, 1089, 1101, 1340, 1364], "hours_diff": 470, "hous": [301, 339], "how": [11, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 99, 135, 141, 148, 150, 152, 155, 156, 157, 182, 212, 220, 243, 244, 263, 307, 308, 339, 372, 432, 461, 462, 513, 538, 539, 619, 632, 651, 713, 716, 755, 771, 820, 830, 866, 874, 875, 912, 917, 945, 978, 1041, 1074, 1075, 1154, 1155, 1232, 1294, 1297, 1340], "howev": [1, 126, 140, 150, 157, 192, 215, 248, 297, 339, 619, 830, 851, 945, 1099, 1340], "hstack": [99, 339], "html": [32, 40, 41, 42, 124, 140, 144, 146, 194, 195, 196, 205, 339, 953, 954], "http": [20, 32, 40, 41, 42, 69, 124, 140, 141, 144, 146, 177, 194, 195, 196, 205, 339, 593, 684, 686, 696, 901, 945, 953, 954, 1265, 1267, 1277], "httpmethod": 69, "hug": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 339, 945], "huge": [215, 339, 1099, 1340], "hut": [699, 700, 1280, 1281], "hvplot": [339, 342, 1340, 1345], "hyperbol": [357, 359, 361, 420, 668, 733, 830, 963, 965, 967, 1030, 1250, 1314, 1340], "hyperloglog": [198, 339, 355, 749, 830, 845, 945, 961, 1340], "hyphen": [675, 1256], "hypothesi": [166, 168, 171, 172, 1371], "i": [1, 12, 14, 17, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 73, 83, 91, 95, 97, 98, 99, 100, 101, 102, 104, 105, 110, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 186, 188, 192, 197, 198, 199, 200, 202, 203, 207, 208, 211, 212, 214, 215, 217, 220, 224, 228, 229, 230, 231, 234, 235, 239, 241, 242, 243, 244, 245, 246, 247, 248, 254, 255, 259, 261, 262, 263, 267, 268, 269, 271, 272, 273, 274, 275, 278, 279, 280, 282, 284, 285, 286, 287, 290, 291, 296, 297, 298, 301, 302, 303, 304, 306, 308, 309, 310, 314, 316, 317, 325, 339, 342, 343, 348, 351, 353, 354, 355, 365, 368, 375, 376, 383, 388, 396, 408, 409, 410, 413, 414, 428, 429, 431, 434, 435, 436, 437, 440, 448, 455, 456, 458, 463, 465, 468, 476, 484, 485, 486, 487, 490, 494, 498, 507, 509, 512, 515, 527, 533, 540, 541, 544, 546, 548, 557, 562, 563, 565, 569, 571, 574, 577, 578, 582, 584, 585, 586, 588, 589, 590, 592, 601, 619, 624, 626, 629, 631, 632, 633, 634, 635, 638, 639, 640, 642, 644, 646, 648, 650, 651, 652, 653, 655, 656, 657, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 674, 675, 676, 677, 678, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 706, 708, 709, 710, 713, 714, 715, 716, 718, 720, 721, 723, 728, 735, 736, 741, 742, 745, 746, 747, 748, 749, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 769, 770, 772, 773, 778, 782, 783, 784, 785, 787, 788, 789, 790, 792, 795, 797, 800, 802, 805, 806, 807, 808, 809, 811, 815, 817, 818, 819, 820, 821, 826, 830, 845, 846, 847, 850, 851, 852, 854, 856, 857, 859, 860, 861, 862, 866, 869, 870, 873, 874, 875, 876, 878, 880, 884, 885, 889, 891, 892, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 911, 912, 913, 914, 916, 919, 920, 928, 938, 945, 949, 951, 958, 959, 960, 961, 974, 981, 982, 989, 994, 1001, 1013, 1017, 1018, 1019, 1022, 1027, 1028, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1049, 1057, 1071, 1076, 1078, 1081, 1089, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1110, 1111, 1121, 1122, 1123, 1125, 1128, 1130, 1140, 1142, 1143, 1144, 1147, 1149, 1156, 1157, 1160, 1162, 1164, 1173, 1178, 1179, 1185, 1193, 1212, 1214, 1216, 1218, 1220, 1221, 1222, 1225, 1226, 1229, 1231, 1232, 1233, 1235, 1238, 1239, 1240, 1241, 1242, 1244, 1247, 1248, 1251, 1252, 1255, 1256, 1257, 1258, 1259, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1278, 1279, 1280, 1281, 1282, 1284, 1287, 1289, 1290, 1291, 1294, 1295, 1296, 1297, 1299, 1301, 1302, 1304, 1312, 1315, 1319, 1321, 1322, 1324, 1325, 1329, 1330, 1340, 1345, 1349, 1350, 1355, 1359, 1360, 1363, 1366, 1368, 1369, 1371], "i0e0": 1371, "i16": [1, 54, 444, 459, 478, 664, 830, 951, 1072, 1318, 1340, 1371], "i32": [1, 54, 123, 126, 130, 165, 167, 168, 277, 286, 339, 374, 375, 377, 396, 410, 439, 447, 449, 450, 451, 452, 453, 457, 480, 664, 755, 820, 830, 896, 945, 950, 980, 981, 983, 1001, 1048, 1058, 1062, 1063, 1064, 1070, 1093, 1191, 1340, 1360, 1364, 1371], "i64": [1, 10, 13, 16, 17, 21, 27, 52, 53, 54, 55, 59, 60, 78, 98, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 140, 147, 148, 152, 197, 199, 200, 201, 202, 204, 208, 209, 212, 213, 216, 217, 219, 220, 223, 224, 226, 227, 228, 229, 231, 233, 234, 236, 238, 240, 243, 244, 245, 247, 248, 249, 255, 256, 261, 262, 263, 264, 267, 268, 269, 270, 271, 275, 277, 279, 282, 284, 285, 286, 288, 290, 292, 299, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 329, 332, 333, 339, 348, 350, 354, 364, 369, 370, 372, 373, 378, 380, 381, 382, 383, 384, 386, 389, 391, 399, 404, 407, 408, 409, 418, 424, 425, 426, 427, 428, 429, 432, 433, 446, 461, 467, 469, 470, 471, 472, 473, 474, 475, 485, 488, 490, 491, 493, 494, 495, 496, 498, 499, 501, 502, 504, 508, 510, 512, 513, 514, 515, 518, 519, 521, 522, 523, 524, 525, 528, 531, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 575, 577, 578, 598, 599, 600, 602, 603, 605, 607, 609, 610, 615, 619, 620, 623, 624, 625, 626, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 660, 662, 663, 664, 665, 670, 671, 672, 690, 699, 700, 714, 718, 723, 724, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 740, 743, 750, 753, 756, 757, 758, 759, 764, 765, 766, 767, 768, 771, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 801, 804, 808, 809, 810, 813, 814, 815, 816, 820, 826, 830, 846, 848, 849, 851, 852, 857, 858, 860, 863, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 879, 880, 881, 885, 886, 888, 889, 891, 892, 893, 894, 896, 898, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 915, 918, 919, 921, 922, 924, 925, 926, 928, 929, 932, 935, 936, 945, 951, 955, 956, 957, 960, 979, 984, 986, 988, 989, 990, 992, 995, 1013, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1055, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1105, 1106, 1107, 1109, 1110, 1114, 1115, 1117, 1122, 1124, 1133, 1147, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1185, 1186, 1193, 1198, 1206, 1212, 1214, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1227, 1230, 1234, 1238, 1239, 1241, 1244, 1245, 1247, 1252, 1253, 1299, 1305, 1310, 1312, 1317, 1325, 1326, 1331, 1340, 1349, 1350, 1352, 1356, 1357, 1358, 1359, 1360, 1362, 1365, 1366, 1368, 1369, 1371], "i8": [387, 388, 444, 447, 450, 452, 453, 454, 457, 459, 460, 464, 477, 478, 568, 664, 802, 805, 821, 830, 993, 994, 1041, 1053, 1056, 1066, 1067, 1073, 1077, 1090, 1091, 1184, 1223, 1245, 1328, 1340, 1364], "i_bitand_j": 1359, "i_bitand_op_j": 1359, "i_bitcount": 1359, "i_bitor_j": 1359, "i_bitor_op_j": 1359, "i_bitxor_j": 1359, "i_bitxor_op_j": 1359, "iceberg": [154, 842], "icon": [40, 339], "id": [26, 33, 40, 59, 134, 138, 143, 154, 245, 296, 303, 316, 325, 339, 638, 699, 700, 739, 830, 876, 919, 928, 945, 951, 1225, 1327, 1340, 1368, 1369, 1371], "id_char": 1371, "id_var": [254, 306, 339, 884, 911, 945], "ideal": [132, 133], "ident": [33, 130, 201, 202, 339, 465, 637, 638, 830, 849, 850, 945, 1026, 1028, 1078, 1224, 1225, 1340], "identif": [143, 149], "identifi": [130, 140, 254, 261, 304, 306, 317, 339, 884, 909, 911, 945], "idiograph": 951, "idiomat": [826, 854, 861, 895, 914, 928, 945], "idx": [152, 229, 242, 316, 339, 375, 388, 569, 870, 919, 945, 994, 1185, 1269], "idx_lit": 1269, "idx_rx": 1269, "ieee": [737, 830], "if_set": [5, 30], "if_table_exist": [38, 339], "ifnul": 1361, "ignor": [39, 140, 167, 168, 172, 252, 289, 308, 339, 351, 353, 376, 396, 432, 462, 484, 486, 487, 539, 548, 611, 612, 675, 691, 745, 747, 759, 796, 814, 830, 912, 945, 951, 958, 959, 982, 1001, 1041, 1075, 1100, 1102, 1103, 1155, 1164, 1202, 1203, 1256, 1272, 1340], "ignore_error": [138, 139, 148, 152, 156], "ignore_nul": [252, 289, 339, 351, 353, 376, 484, 486, 487, 548, 675, 691, 745, 747, 759, 796, 814, 830, 958, 959, 982, 1100, 1102, 1103, 1164, 1256, 1272, 1340], "ignore_spac": 951, "ij": 700, "ij67": 700, "ijkl": 1363, "ilmsuxu": [676, 684, 685, 688, 699, 700, 1257, 1265, 1266, 1269, 1280, 1281], "imbal": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "imdb_scor": 1349, "immedi": [192, 629, 750, 754, 769, 770, 772, 773, 784, 785, 788, 789, 802, 805, 808, 812, 817, 818, 821, 830, 1216, 1340, 1350], "immut": [297, 339, 1321, 1340], "impact": [229, 339, 870, 945, 1349, 1368], "impl": 154, "implement": [45, 140, 196, 230, 248, 325, 339, 342, 343, 507, 578, 602, 603, 605, 607, 609, 610, 724, 734, 792, 830, 928, 1121, 1193, 1239, 1241, 1323, 1340, 1345], "implic": [431, 830, 857, 945], "implicit": [308, 339, 912, 945], "implicitli": [220, 267, 339, 494, 820, 830, 866, 891, 945, 1368], "implod": [830, 1340, 1358], "import": [10, 16, 28, 35, 37, 39, 40, 41, 42, 45, 51, 66, 69, 123, 124, 127, 128, 134, 138, 140, 141, 147, 148, 152, 158, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 200, 207, 208, 209, 212, 227, 229, 242, 244, 261, 263, 279, 286, 294, 296, 301, 306, 307, 309, 339, 342, 343, 397, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 585, 586, 592, 619, 640, 642, 644, 646, 648, 650, 653, 655, 657, 755, 768, 769, 770, 771, 772, 773, 774, 788, 809, 817, 818, 826, 830, 842, 848, 852, 856, 857, 858, 860, 870, 875, 880, 898, 911, 945, 949, 1002, 1029, 1031, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1101, 1131, 1134, 1136, 1137, 1226, 1249, 1313, 1340, 1345, 1350, 1365, 1368, 1371], "improv": [38, 49, 144, 155, 243, 339, 577, 830, 874, 945], "in_plac": [233, 283, 311, 339, 1217, 1246, 1253, 1340], "in_progress": 945, "includ": [7, 20, 30, 37, 39, 40, 46, 56, 128, 140, 142, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 168, 169, 192, 203, 207, 215, 245, 261, 263, 267, 274, 285, 301, 303, 307, 308, 339, 429, 464, 494, 498, 509, 515, 585, 626, 641, 643, 645, 647, 649, 651, 652, 654, 656, 699, 700, 704, 705, 708, 709, 755, 764, 806, 807, 830, 856, 866, 876, 891, 903, 912, 945, 951, 1039, 1040, 1077, 1099, 1110, 1123, 1128, 1214, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1280, 1281, 1285, 1286, 1289, 1340, 1368], "include_bom": [37, 46, 339, 945], "include_boundari": [229, 339, 870, 945], "include_break": [429, 626, 830, 1039, 1214, 1340], "include_breakpoint": [509, 830, 1123, 1340], "include_categor": 951, "include_categori": [509, 830, 1123, 1340], "include_col": 168, "include_file_path": [143, 148, 149, 150, 152, 155, 156, 157], "include_head": [37, 40, 46, 139, 303, 339, 945], "include_index": 128, "include_init": 764, "include_kei": [261, 274, 339], "include_nul": [308, 339, 912, 945], "inclus": [197, 229, 271, 339, 468, 515, 639, 642, 644, 646, 648, 650, 653, 655, 657, 704, 705, 750, 769, 770, 772, 773, 784, 785, 788, 789, 817, 818, 830, 870, 894, 945, 1081, 1128, 1285, 1286, 1340], "incom": 140, "incompat": 117, "incomplet": [634, 830, 1221, 1340], "incorpor": 1368, "incorrect": [280, 339, 479, 577, 578, 662, 830, 899, 928, 945, 1092, 1242, 1340], "incorrectli": [138, 569], "increas": [40, 51, 138, 143, 149, 150, 157, 339, 428, 638, 830, 1038, 1225, 1340], "independ": [57, 58, 165, 168, 172, 301, 339, 665, 830, 851, 852, 862, 889, 901, 945], "index": [40, 105, 124, 128, 131, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 160, 196, 223, 225, 229, 234, 239, 241, 263, 269, 271, 272, 273, 282, 284, 296, 297, 299, 306, 308, 309, 315, 316, 339, 349, 362, 363, 364, 366, 369, 370, 375, 383, 388, 485, 501, 502, 504, 511, 534, 535, 544, 545, 546, 562, 563, 569, 639, 642, 644, 646, 648, 650, 653, 655, 657, 661, 663, 670, 676, 684, 688, 690, 703, 714, 724, 753, 784, 787, 830, 868, 870, 894, 900, 902, 911, 912, 918, 919, 945, 951, 968, 969, 970, 971, 972, 975, 976, 981, 989, 994, 1101, 1114, 1115, 1125, 1142, 1150, 1151, 1160, 1161, 1162, 1178, 1179, 1185, 1206, 1239, 1240, 1244, 1252, 1265, 1269, 1271, 1284, 1295, 1340, 1345, 1358, 1363], "index_column": [229, 271, 339, 639, 830, 870, 894, 945], "index_of": [830, 1340], "indexord": [296, 297, 339], "indic": [37, 40, 41, 45, 46, 47, 48, 49, 65, 66, 68, 83, 98, 108, 135, 136, 138, 139, 140, 143, 144, 146, 148, 149, 150, 152, 155, 156, 157, 165, 166, 172, 182, 229, 271, 274, 282, 294, 339, 365, 383, 501, 509, 516, 517, 518, 520, 521, 522, 523, 524, 525, 544, 562, 582, 583, 584, 585, 586, 587, 588, 619, 639, 642, 644, 646, 648, 650, 653, 655, 657, 661, 663, 753, 754, 801, 830, 870, 894, 900, 945, 951, 989, 1022, 1114, 1123, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1160, 1178, 1239, 1240, 1244, 1316, 1340, 1371], "indistinguish": [37, 46, 339, 945], "individu": [40, 49, 192, 271, 296, 297, 301, 339, 578, 685, 727, 830, 851, 894, 945, 951, 1025, 1266, 1340], "inequ": [613, 830], "inexact": [161, 162, 163, 164], "inf": [165, 168, 172, 361, 429, 517, 520, 626, 737, 830, 967, 1031, 1039, 1131, 1134, 1191, 1209, 1214, 1328, 1340, 1365], "infer": [37, 41, 45, 46, 47, 48, 49, 67, 82, 98, 123, 125, 126, 127, 128, 129, 138, 139, 140, 143, 147, 148, 149, 150, 152, 155, 156, 157, 182, 248, 339, 577, 578, 635, 692, 713, 715, 716, 717, 720, 774, 790, 805, 830, 945, 1193, 1222, 1273, 1294, 1296, 1297, 1298, 1301, 1340], "infer_schema": [138, 152], "infer_schema_length": [126, 129, 134, 138, 139, 140, 143, 147, 148, 149, 152, 156, 339, 692, 945, 1273], "inference_length": [717, 1298], "inference_s": [248, 339], "infin": [721, 737, 830, 1302], "infinit": [520, 737, 830, 1134, 1340], "influenc": [143, 880, 945], "influxdb": 140, "info": [142, 153, 154, 160], "inform": [19, 23, 37, 38, 41, 45, 46, 47, 48, 49, 56, 133, 135, 142, 148, 150, 152, 153, 154, 155, 156, 157, 161, 163, 182, 183, 184, 186, 187, 194, 205, 207, 339, 343, 527, 578, 669, 676, 684, 685, 688, 699, 700, 830, 851, 856, 889, 945, 949, 953, 1021, 1143, 1251, 1257, 1265, 1266, 1269, 1280, 1281, 1340], "inherit": [272, 339, 431, 830, 857, 945], "init": [192, 1349], "initcap": 1361, "initi": [32, 33, 34, 40, 82, 133, 177, 192, 339, 764, 778, 820, 1368], "initialis": [69, 140, 192, 945], "inject": [40, 51, 339], "inlin": [24, 274, 339, 676, 684, 685, 688, 699, 700, 1257, 1265, 1266, 1269, 1280, 1281, 1358], "inner": [60, 78, 167, 243, 245, 308, 339, 376, 387, 433, 548, 568, 578, 632, 734, 809, 830, 874, 876, 912, 945, 982, 993, 1042, 1164, 1184, 1193, 1323, 1340, 1356, 1368], "inner_dtyp": [167, 170], "innermost": [167, 170], "innter": 981, "inprocessqueri": [851, 945], "input": [0, 51, 57, 98, 126, 128, 135, 138, 139, 199, 209, 228, 245, 248, 252, 261, 263, 268, 277, 278, 282, 285, 289, 302, 313, 314, 318, 339, 348, 409, 411, 415, 418, 485, 488, 500, 515, 573, 577, 578, 590, 619, 633, 634, 666, 672, 690, 701, 703, 709, 710, 711, 712, 714, 716, 728, 736, 744, 746, 748, 750, 753, 756, 757, 758, 759, 767, 774, 776, 784, 785, 790, 791, 792, 794, 796, 799, 808, 812, 814, 820, 826, 830, 842, 846, 858, 869, 876, 892, 896, 897, 900, 903, 908, 915, 916, 921, 945, 1027, 1101, 1128, 1189, 1190, 1193, 1212, 1220, 1221, 1244, 1248, 1271, 1284, 1295, 1297, 1340, 1362, 1363, 1365], "input_wildcard_expans": [135, 830], "insensit": [677, 685, 687, 689, 699, 700, 701, 951, 1257, 1258, 1266, 1268, 1269, 1270, 1280, 1281, 1282], "insensitive_match": [676, 688], "insert": [38, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 234, 303, 305, 339, 661, 675, 691, 723, 830, 910, 945, 1240, 1256, 1272, 1304, 1340], "insert_aft": [40, 339], "insert_befor": [40, 339], "insert_chart": [40, 339], "insert_column": 339, "insid": [58, 577, 830, 852, 945], "inspect": [830, 945], "instal": [32, 33, 34, 102, 128, 138, 139, 141, 144, 146, 205, 298, 339, 436, 593, 755, 901, 945, 1045, 1322, 1340], "instanc": [37, 41, 45, 46, 47, 48, 49, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 168, 172, 182, 217, 222, 339, 590, 764, 778, 826, 842, 848, 880, 918, 919, 945, 1106, 1340], "instanti": [33, 38, 40, 140, 170, 277, 295, 296, 313, 339, 896, 915, 945, 950, 1318, 1319, 1340], "instantli": [58, 852, 945], "instead": [37, 39, 43, 44, 51, 58, 60, 124, 125, 126, 129, 138, 139, 140, 143, 149, 150, 152, 157, 158, 165, 166, 167, 168, 172, 198, 199, 227, 240, 241, 244, 248, 254, 259, 261, 272, 273, 274, 277, 278, 279, 282, 296, 297, 298, 302, 314, 315, 339, 342, 343, 364, 383, 409, 410, 413, 414, 429, 443, 468, 485, 488, 498, 562, 592, 626, 633, 663, 675, 683, 694, 695, 708, 709, 710, 711, 712, 723, 736, 743, 750, 752, 754, 761, 769, 770, 772, 773, 774, 784, 785, 788, 789, 802, 805, 808, 809, 812, 817, 818, 821, 830, 845, 846, 852, 862, 875, 884, 896, 897, 898, 900, 908, 916, 917, 918, 920, 945, 951, 970, 989, 998, 1014, 1018, 1019, 1039, 1052, 1060, 1061, 1081, 1101, 1120, 1178, 1214, 1220, 1239, 1241, 1244, 1253, 1256, 1264, 1275, 1276, 1289, 1290, 1291, 1304, 1321, 1322, 1340, 1345, 1349, 1350, 1354, 1368, 1369], "int": [10, 12, 13, 14, 17, 25, 26, 37, 38, 40, 41, 45, 46, 47, 48, 49, 53, 60, 67, 126, 129, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 182, 184, 199, 201, 207, 215, 218, 219, 223, 225, 227, 230, 231, 232, 234, 239, 241, 242, 244, 247, 248, 258, 259, 269, 271, 272, 275, 281, 282, 284, 287, 290, 295, 299, 302, 307, 310, 312, 315, 316, 322, 333, 339, 348, 371, 375, 383, 385, 388, 390, 391, 408, 409, 428, 432, 436, 461, 484, 486, 487, 491, 492, 493, 499, 501, 502, 504, 507, 508, 509, 531, 537, 539, 544, 545, 546, 547, 557, 562, 563, 565, 567, 568, 569, 571, 618, 620, 623, 624, 626, 629, 632, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 670, 674, 684, 690, 692, 697, 698, 699, 703, 705, 706, 714, 717, 718, 723, 731, 735, 736, 742, 744, 750, 760, 762, 768, 771, 774, 780, 782, 784, 785, 788, 789, 801, 802, 805, 806, 807, 811, 812, 815, 816, 819, 821, 830, 846, 849, 856, 864, 865, 868, 871, 875, 879, 889, 900, 902, 905, 907, 908, 913, 914, 918, 919, 920, 925, 936, 945, 950, 951, 968, 969, 977, 981, 989, 991, 994, 996, 1013, 1014, 1025, 1026, 1032, 1038, 1041, 1042, 1045, 1074, 1099, 1100, 1102, 1103, 1107, 1108, 1109, 1114, 1115, 1121, 1122, 1123, 1125, 1142, 1146, 1147, 1153, 1155, 1160, 1161, 1162, 1163, 1173, 1178, 1179, 1181, 1183, 1184, 1185, 1187, 1199, 1200, 1202, 1203, 1206, 1208, 1209, 1212, 1213, 1214, 1216, 1222, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1247, 1252, 1255, 1265, 1271, 1273, 1278, 1279, 1280, 1284, 1286, 1287, 1295, 1298, 1299, 1304, 1311, 1312, 1318, 1325, 1330, 1340, 1352, 1355, 1368, 1371], "int16": [1, 54, 301, 339, 426, 427, 459, 730, 830, 951, 1036, 1037, 1072, 1311, 1318, 1340], "int32": [1, 40, 54, 59, 123, 126, 165, 167, 168, 229, 242, 271, 296, 339, 374, 375, 377, 396, 410, 439, 449, 450, 451, 452, 457, 480, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 734, 805, 830, 870, 894, 945, 950, 951, 977, 980, 981, 983, 1001, 1048, 1058, 1062, 1063, 1064, 1070, 1093, 1101, 1191, 1323, 1324, 1340], "int64": [1, 39, 40, 53, 54, 59, 60, 82, 100, 138, 147, 203, 213, 222, 229, 262, 271, 276, 277, 291, 298, 339, 369, 370, 372, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 426, 427, 469, 470, 471, 472, 473, 474, 475, 479, 485, 488, 577, 578, 604, 606, 608, 623, 631, 639, 642, 644, 646, 648, 650, 653, 655, 657, 692, 718, 730, 734, 750, 757, 776, 784, 785, 790, 805, 812, 826, 830, 853, 861, 870, 888, 894, 895, 896, 945, 951, 975, 976, 978, 979, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 1036, 1037, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1094, 1101, 1193, 1218, 1299, 1311, 1321, 1322, 1323, 1324, 1340], "int64arrai": [1315, 1340], "int8": [1, 54, 82, 222, 339, 387, 388, 426, 427, 444, 447, 453, 454, 460, 464, 477, 478, 568, 730, 802, 805, 821, 830, 950, 993, 994, 1036, 1037, 1041, 1053, 1056, 1066, 1067, 1073, 1077, 1090, 1091, 1184, 1223, 1311, 1321, 1328, 1340], "int_rang": [229, 307, 316, 325, 339, 750, 787, 808, 870, 880, 919, 928, 945], "integ": [37, 40, 46, 65, 66, 68, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 159, 166, 168, 171, 173, 212, 229, 271, 294, 297, 339, 352, 417, 464, 497, 498, 618, 624, 626, 631, 638, 639, 651, 690, 714, 718, 744, 750, 780, 784, 785, 805, 830, 860, 870, 894, 945, 951, 1024, 1077, 1113, 1212, 1214, 1218, 1225, 1232, 1239, 1271, 1295, 1299, 1321, 1340, 1362, 1368, 1371], "integer_list": 78, "integr": [40, 301, 339, 642, 644, 646, 648, 650, 653, 655, 657, 830, 1371], "intend": [1, 161, 162, 163, 164, 723, 1304], "intens": [248, 325, 339, 619, 830, 1193, 1340], "interact": [168, 172, 207, 339, 342, 856, 945, 1340, 1345], "interchang": [124, 196], "interest": [139, 465, 468, 1078, 1081], "interfac": [0, 113, 114, 123, 124, 190, 191, 195, 842, 954, 1368], "interfer": 949, "interleav": 1363, "intermedi": [235, 339, 873, 945, 1371], "intern": [41, 42, 140, 159, 241, 291, 339, 498, 830, 1315, 1340, 1350], "interoper": [194, 953], "interpol": [207, 265, 331, 339, 493, 514, 581, 627, 649, 650, 803, 830, 856, 890, 934, 945, 1040, 1127, 1215, 1231, 1340, 1357], "interpolate_bi": [830, 1340], "interpolationmethod": [513, 830, 1126, 1340], "interpret": [127, 129, 138, 139, 152, 339, 396, 945, 1001], "intersect": [40, 339, 559, 951, 1175, 1367], "interv": [229, 271, 309, 339, 429, 463, 476, 509, 515, 626, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 788, 789, 817, 818, 830, 870, 894, 945, 1039, 1053, 1055, 1056, 1062, 1064, 1066, 1067, 1070, 1072, 1073, 1076, 1080, 1089, 1090, 1123, 1128, 1214, 1340, 1357], "intoexpr": [135, 199, 228, 229, 271, 277, 278, 282, 285, 302, 313, 314, 318, 339, 354, 372, 392, 395, 398, 409, 436, 461, 485, 491, 501, 509, 511, 514, 515, 538, 558, 559, 560, 561, 619, 633, 634, 642, 644, 646, 648, 650, 653, 655, 657, 661, 663, 672, 677, 687, 689, 701, 704, 705, 706, 708, 709, 710, 711, 712, 728, 736, 746, 748, 753, 756, 757, 758, 759, 760, 762, 764, 767, 771, 778, 788, 794, 796, 799, 805, 808, 812, 814, 830, 846, 869, 870, 894, 896, 897, 900, 903, 908, 915, 916, 921, 945, 978, 997, 1000, 1003, 1045, 1101, 1107, 1125, 1127, 1128, 1154, 1220, 1221, 1240, 1244, 1270, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1340], "intoexprcolumn": [220, 234, 267, 339, 371, 375, 376, 383, 408, 409, 418, 463, 491, 494, 537, 545, 548, 557, 562, 620, 624, 660, 663, 684, 690, 693, 703, 714, 718, 723, 735, 736, 750, 755, 769, 770, 772, 773, 784, 785, 789, 817, 818, 820, 830, 866, 891, 900, 945, 977, 981, 982, 989, 1027, 1076, 1089, 1107, 1153, 1161, 1164, 1173, 1178, 1209, 1265, 1271, 1274, 1284, 1295, 1304, 1340], "introduc": [50, 91, 713, 715, 716, 1294, 1296, 1297], "introduct": 1367, "intuit": [498, 830, 951], "invalid": [37, 46, 114, 138, 139, 152, 200, 339, 410, 692, 693, 718, 737, 830, 945, 998, 1014, 1273, 1274, 1299, 1340], "invalid_valu": 998, "invalidoperationerror": [634, 830, 1221, 1340, 1366], "invari": [880, 945], "invers": [356, 357, 358, 359, 360, 361, 830, 962, 963, 964, 965, 966, 967, 1321, 1340, 1365], "invert": 951, "invok": [192, 577, 830], "involv": [220, 267, 339, 866, 891, 945], "io": [35, 37, 40, 41, 42, 45, 136, 138, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 208, 279, 339, 431, 500, 592, 830, 857, 898, 945], "io_sourc": 133, "iobas": [43, 44, 147, 148, 208, 279, 339, 431, 592, 596, 830, 857, 898, 945], "ipc": [41, 42, 47, 144, 145, 146, 155, 158, 339, 842, 945], "ipccompress": [41, 42, 339], "is_between": [830, 1340], "is_dupl": [339, 830, 1340], "is_elementwis": [135, 577, 830], "is_empti": [339, 1340], "is_finit": [830, 1340], "is_first_distinct": [830, 1340], "is_in": [100, 220, 339, 830, 1340], "is_infinit": [830, 1340], "is_last_distinct": [830, 1340], "is_nan": [211, 339, 830, 859, 945, 1340], "is_not_nan": [830, 1340], "is_not_nul": [267, 339, 830, 891, 945, 1340], "is_nul": [212, 339, 830, 860, 945, 1340], "is_numer": 1371, "is_odd": [277, 339, 896, 945, 951], "is_selector": 951, "is_sort": 1340, "is_uniqu": [339, 830, 1340], "isn": 820, "iso": [449, 468, 477, 478, 1058, 1081, 1090, 1091, 1363], "iso8601": [138, 139, 152, 468, 1081], "iso_lang": 1363, "iso_year": 480, "isodow": 1364, "isoweek": 1364, "isoyear": 1364, "issu": [93, 94, 97, 98, 101, 108, 110, 121, 138, 139, 140, 152, 339, 426, 427, 730, 830, 1036, 1037, 1311, 1340, 1368], "ital": [40, 339], "item": [13, 59, 139, 227, 272, 275, 339, 371, 375, 376, 432, 490, 537, 539, 546, 548, 557, 660, 706, 830, 977, 981, 982, 1041, 1105, 1153, 1155, 1162, 1164, 1173, 1238, 1287, 1340], "iter": [51, 57, 58, 59, 69, 123, 126, 133, 135, 140, 171, 173, 199, 209, 220, 228, 229, 240, 241, 242, 245, 267, 271, 272, 273, 274, 277, 278, 285, 302, 303, 313, 314, 317, 318, 339, 409, 428, 436, 494, 619, 672, 728, 736, 746, 748, 753, 755, 756, 757, 758, 759, 767, 794, 796, 799, 808, 812, 814, 820, 826, 830, 846, 858, 866, 869, 870, 876, 891, 894, 896, 897, 903, 908, 915, 916, 921, 945, 950, 951, 1038, 1045, 1110, 1239, 1340, 1371], "iter_batch": 140, "iter_column": 339, "iter_row": [242, 272, 273, 274, 339], "iter_slic": 339, "its": [70, 92, 130, 160, 215, 297, 339, 440, 463, 476, 485, 577, 637, 672, 727, 820, 830, 854, 861, 914, 945, 949, 1021, 1049, 1076, 1089, 1099, 1101, 1224, 1321, 1340, 1370], "itself": [166, 339, 342, 343, 578, 641, 643, 645, 647, 649, 651, 652, 654, 656, 806, 807, 830, 878, 945, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1340, 1345, 1349, 1350, 1368], "ix": [263, 339], "j": [303, 339, 1359], "jax": [296, 339, 1319, 1340], "jax_enable_x64": [296, 339], "jaxexporttyp": [296, 339], "jjk": 951, "jkl": [685, 1266], "jklmn": 1363, "job": [847, 945], "join": [46, 47, 48, 49, 50, 51, 57, 58, 59, 91, 220, 244, 245, 267, 308, 339, 494, 513, 619, 675, 809, 830, 851, 852, 862, 866, 875, 876, 889, 891, 901, 912, 917, 945, 1256, 1350, 1352, 1358, 1367, 1368], "join_asof": [243, 339, 874, 945], "join_nul": [243, 339, 874, 945], "join_wher": [339, 945], "joinstrategi": [51, 243, 339, 874, 945], "joinvalid": [243, 339, 874, 945], "jpy": 1371, "json": [2, 3, 5, 6, 43, 44, 134, 135, 147, 148, 154, 156, 185, 208, 279, 339, 431, 500, 592, 596, 692, 693, 725, 830, 842, 857, 898, 945, 1273, 1274, 1307], "json_path": [693, 1274], "json_path_match": [692, 1273], "json_stat": 5, "json_str": [147, 148], "json_val": [693, 1274], "jsonencod": 134, "jsonpath": [692, 693, 1273, 1274], "jst": [130, 951], "jul": [713, 1294, 1363], "juli": [1081, 1363, 1364], "just": [40, 128, 140, 152, 254, 306, 339, 884, 911, 945, 951], "k": [199, 274, 302, 303, 339, 408, 409, 423, 527, 735, 736, 830, 846, 908, 945, 1013, 1033, 1143, 1325, 1340], "k_2": [669, 830, 1251, 1340], "k_3": [669, 830, 1251, 1340], "kadokawa": [696, 1277], "kanji": 951, "karen": [263, 339], "kathmandu": [1051, 1052, 1079], "kb": [215, 339, 397, 1002, 1099, 1340], "kde": [1340, 1345], "keep": [51, 138, 139, 148, 152, 155, 156, 220, 304, 308, 309, 339, 500, 577, 595, 603, 633, 756, 830, 909, 912, 945, 1220, 1340], "kei": [37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 56, 59, 142, 148, 150, 152, 153, 154, 155, 156, 157, 182, 197, 229, 241, 243, 244, 255, 261, 268, 270, 273, 274, 308, 339, 494, 578, 633, 634, 701, 769, 772, 812, 830, 870, 874, 875, 885, 892, 893, 912, 945, 951, 955, 1220, 1221, 1282, 1340, 1356], "kept": [304, 339, 909, 945], "keyerror": 16, "keystrok": 826, "keyword": [39, 142, 150, 153, 168, 172, 182, 205, 228, 262, 272, 277, 278, 298, 313, 314, 318, 339, 494, 623, 728, 808, 812, 820, 830, 869, 888, 896, 897, 915, 916, 921, 945, 1322, 1340, 1353], "kl": 700, "kleen": [351, 353, 745, 746, 747, 748, 830, 958, 959, 1340], "klmnoopqrstuvwxyz": [242, 339], "knight": 1349, "know": [51, 140, 263, 306, 339, 569, 577, 830, 911, 945], "known": [144, 186, 388, 569, 928, 994, 1185], "kurtosi": [830, 1340], "kuzu_db_conn": 140, "kwarg": [31, 32, 36, 50, 61, 62, 64, 65, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 135, 137, 140, 141, 168, 170, 172, 185, 189, 205, 220, 262, 267, 298, 339, 342, 623, 830, 866, 888, 891, 920, 945, 1322, 1340, 1345, 1353, 1368], "k\u00f9zudb": 140, "l": [788, 789], "l1": 59, "l2": 59, "label": [229, 296, 301, 339, 342, 343, 429, 626, 640, 641, 643, 645, 647, 649, 652, 654, 656, 830, 870, 889, 945, 1039, 1214, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1340, 1345], "label_column": [301, 339], "labelangl": [339, 342, 1340, 1345], "lag": [282, 339, 383, 562, 663, 758, 830, 900, 945, 989, 1178, 1244, 1340], "lake": [39, 142, 153, 339, 842], "lambda": [152, 222, 248, 262, 263, 268, 325, 339, 388, 486, 487, 569, 577, 578, 603, 604, 764, 765, 778, 791, 792, 804, 830, 880, 888, 892, 928, 945, 994, 1102, 1103, 1185, 1193, 1340], "land": [436, 1045], "languag": [152, 229, 244, 271, 309, 339, 458, 463, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089, 1101, 1340], "larg": [10, 11, 14, 51, 140, 143, 149, 157], "large_str": [242, 291, 298, 339], "larger": [10, 46, 47, 48, 49, 57, 58, 498, 760, 830, 851, 852, 945], "largest": [199, 302, 339, 409, 735, 736, 830, 846, 908, 945, 1325, 1340], "last": [39, 148, 152, 155, 156, 161, 162, 163, 164, 231, 244, 247, 263, 274, 285, 290, 297, 304, 333, 339, 364, 375, 384, 428, 444, 455, 459, 477, 499, 521, 546, 564, 567, 569, 602, 603, 605, 607, 609, 610, 619, 634, 671, 672, 690, 706, 714, 731, 753, 815, 826, 830, 875, 903, 907, 909, 936, 945, 951, 970, 981, 990, 1038, 1053, 1068, 1072, 1090, 1122, 1135, 1147, 1162, 1180, 1183, 1221, 1253, 1271, 1287, 1295, 1312, 1321, 1340, 1361, 1363], "last_column": [40, 339], "later": [244, 279, 339, 592, 875, 898, 945], "latest": [32, 124, 142, 153, 196, 461, 462, 590, 713, 716, 771, 1074, 1075, 1294, 1297], "latt": 951, "latter": [40, 124, 217, 339, 1106, 1340], "lazi": [1, 59, 152, 168, 244, 262, 263, 286, 339, 578, 780, 802, 805, 821, 830, 856, 874, 875, 917, 921, 922, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 945, 951, 1349, 1350, 1351, 1352, 1353, 1355, 1368, 1371], "lazili": [138, 139, 152, 153, 154, 155, 156, 157, 852, 945], "lazy_fram": [57, 58], "lazyfram": [0, 1, 51, 52, 53, 54, 55, 57, 58, 59, 133, 152, 153, 154, 155, 156, 157, 158, 161, 162, 168, 182, 203, 208, 246, 262, 263, 279, 286, 339, 431, 494, 569, 592, 808, 809, 830, 842, 942, 943, 944, 950, 951, 1349, 1350, 1353, 1355, 1368, 1369, 1371], "lazyframeext": 945, "lazygroupbi": [869, 870, 894, 945], "lbl": [296, 301, 339], "ldf": [1, 921, 922, 924, 926, 929, 930, 931, 932, 933, 934, 935], "ldot": [485, 830, 1101, 1340], "le": [681, 830, 1340], "lead": [14, 45, 130, 158, 252, 280, 282, 289, 339, 383, 501, 504, 562, 569, 577, 578, 662, 663, 708, 710, 760, 796, 814, 830, 880, 899, 900, 928, 945, 989, 1178, 1193, 1242, 1244, 1289, 1291, 1340], "leap": [448, 458, 1057, 1071], "leap_year": 448, "learn": [301, 339], "least": [59, 104, 263, 339, 405, 406, 620, 684, 686, 830, 1010, 1011, 1209, 1265, 1267, 1340, 1361], "leav": [6, 254, 306, 339, 569, 884, 911, 945], "left": [15, 16, 40, 51, 161, 162, 163, 164, 229, 243, 244, 271, 308, 339, 429, 484, 485, 486, 487, 513, 515, 626, 639, 642, 644, 646, 648, 650, 653, 655, 657, 661, 734, 756, 764, 765, 769, 770, 772, 773, 778, 788, 789, 804, 817, 818, 820, 830, 870, 874, 875, 894, 912, 945, 1039, 1100, 1101, 1102, 1103, 1128, 1214, 1240, 1323, 1340, 1352, 1356, 1361], "left_clos": [429, 626, 830, 1039, 1214, 1340], "left_on": [243, 244, 308, 339, 874, 875, 912, 945], "left_right": [243, 339, 874, 945], "leftmost": [661, 830, 1240, 1340, 1363], "len": [12, 168, 172, 203, 242, 263, 316, 320, 325, 339, 422, 578, 589, 591, 637, 761, 784, 788, 830, 853, 914, 919, 923, 928, 945, 950, 1032, 1224, 1340], "len_byt": [12, 414, 695, 696, 1019, 1276], "len_char": [413, 694, 1018, 1275], "length": [59, 60, 78, 135, 143, 149, 152, 166, 170, 227, 229, 271, 284, 339, 342, 413, 428, 463, 476, 563, 569, 590, 633, 634, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 670, 690, 694, 695, 697, 698, 701, 703, 714, 723, 757, 788, 789, 802, 805, 806, 807, 821, 830, 870, 889, 894, 902, 945, 1018, 1025, 1038, 1049, 1076, 1089, 1179, 1185, 1206, 1220, 1221, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1252, 1271, 1275, 1276, 1278, 1279, 1282, 1284, 1295, 1304, 1340, 1357, 1358, 1361], "leq": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "less": [152, 244, 339, 498, 529, 576, 577, 706, 830, 875, 945, 1287, 1371], "letter": [216, 322, 333, 339, 488, 677, 685, 687, 689, 701, 721, 776, 830, 863, 925, 936, 945, 951, 1258, 1266, 1268, 1270, 1282, 1302, 1363], "level": [10, 40, 41, 42, 45, 49, 134, 152, 155, 156, 157, 222, 248, 259, 286, 291, 339, 343, 494, 830, 842, 904, 945, 1315, 1340, 1368], "lexic": [63, 951, 1022], "lf": [46, 47, 48, 49, 54, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 923, 927, 945, 1357, 1368, 1371], "lf1": [809, 904, 945, 1353, 1355, 1369], "lf2": [809, 904, 945, 1353, 1355, 1369], "lf3": [945, 1353], "lf4": [945, 1353], "lf5": 945, "lf6": 945, "lf_other": [917, 945], "lib": [830, 1315, 1340], "librari": [1, 106, 135, 140, 143, 577, 830, 949, 1371], "life": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "lifetim": [192, 841, 1355], "light": [40, 339], "like": [35, 37, 39, 41, 42, 43, 44, 45, 58, 124, 135, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 208, 229, 236, 238, 243, 274, 279, 296, 297, 339, 342, 431, 437, 500, 541, 577, 595, 629, 684, 709, 710, 741, 826, 830, 847, 852, 857, 870, 945, 1046, 1157, 1216, 1265, 1329, 1340, 1345], "limit": [10, 11, 49, 140, 141, 174, 219, 339, 391, 493, 499, 830, 865, 945, 1109, 1340, 1358, 1367], "line": [10, 20, 40, 138, 139, 143, 152, 227, 236, 238, 339, 342, 684, 1265, 1340, 1345], "line_termin": [37, 46, 339, 945], "linear": [207, 235, 265, 331, 339, 513, 514, 536, 581, 627, 649, 650, 758, 759, 803, 830, 856, 873, 890, 934, 945, 1040, 1126, 1127, 1152, 1215, 1231, 1340], "linearli": 789, "lineitem": [132, 139, 141], "link": 949, "list": [1, 13, 33, 39, 40, 51, 52, 54, 57, 58, 60, 66, 82, 98, 123, 125, 126, 127, 129, 130, 132, 133, 136, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 166, 167, 168, 172, 179, 180, 181, 187, 204, 209, 213, 215, 216, 220, 226, 228, 229, 233, 241, 258, 261, 267, 271, 272, 273, 274, 277, 285, 292, 293, 301, 303, 304, 305, 307, 313, 318, 319, 339, 349, 376, 387, 388, 389, 429, 436, 490, 496, 501, 510, 519, 577, 578, 590, 591, 619, 626, 632, 635, 640, 641, 643, 645, 647, 649, 652, 654, 656, 671, 672, 683, 685, 687, 689, 704, 724, 726, 727, 734, 753, 755, 758, 769, 770, 772, 773, 775, 783, 785, 789, 790, 792, 810, 812, 818, 826, 830, 854, 861, 863, 866, 869, 870, 891, 896, 903, 909, 910, 915, 917, 921, 922, 945, 950, 951, 982, 993, 994, 995, 1025, 1039, 1045, 1099, 1105, 1114, 1117, 1123, 1124, 1133, 1193, 1214, 1222, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1258, 1264, 1266, 1268, 1270, 1282, 1285, 1320, 1323, 1340, 1349, 1354, 1358, 1360, 1370, 1371], "list_catalog": 190, "list_namespac": 190, "list_of_seri": 792, "list_tabl": 190, "listtostructwidthstrategi": [569, 1185], "lit": [1, 350, 392, 515, 586, 602, 688, 757, 758, 764, 778, 802, 805, 821, 830, 1109, 1340], "liter": [15, 16, 20, 37, 39, 41, 45, 46, 47, 48, 49, 140, 142, 148, 150, 152, 153, 155, 156, 157, 171, 172, 173, 182, 185, 189, 258, 277, 278, 282, 308, 313, 314, 339, 350, 392, 411, 415, 418, 440, 461, 482, 483, 491, 498, 503, 505, 515, 529, 576, 586, 598, 600, 613, 614, 624, 633, 634, 676, 677, 678, 687, 688, 689, 699, 700, 701, 728, 729, 737, 746, 748, 750, 756, 757, 758, 759, 767, 768, 771, 784, 788, 790, 794, 796, 799, 808, 812, 814, 816, 830, 865, 896, 897, 900, 912, 915, 916, 945, 951, 997, 1027, 1049, 1074, 1097, 1107, 1128, 1205, 1220, 1221, 1239, 1241, 1244, 1257, 1258, 1259, 1268, 1269, 1270, 1280, 1281, 1282, 1340, 1363], "littl": [273, 339, 396, 1001], "lmn": 951, "ln": [484, 485, 486, 487, 830, 1100, 1101, 1102, 1103, 1340, 1361], "ln_a": 1362, "load": [3, 5, 6, 126, 128, 135, 140, 142, 143, 149, 153, 154, 171, 173, 339, 830, 842, 945, 1371], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 143, "load_tabl": 143, "load_workbook": 143, "loader": [301, 339], "lobster": [688, 1269], "loc": [339, 343], "local": [4, 39, 140, 142, 153, 154, 157, 339, 476, 621, 622, 830, 1017, 1021, 1051, 1052, 1076, 1079, 1089, 1210, 1211, 1340, 1350], "localhost": 140, "localis": [463, 476, 1089], "locat": [40, 150, 152, 155, 157, 217, 269, 299, 305, 339, 661, 830, 910, 945, 1106, 1114, 1239, 1240, 1340], "lock": 174, "log": [29, 53, 409, 481, 574, 600, 624, 736, 830, 1095, 1340, 1361], "log10": [830, 1340, 1361], "log10_a": 1362, "log16_a": 1362, "log1p": [830, 1340, 1361], "log1p_a": 1362, "log2": 1361, "logarithm": [572, 573, 574, 830, 1188, 1189, 1190, 1340, 1362], "logic": [59, 248, 325, 339, 342, 343, 351, 353, 431, 578, 734, 745, 746, 747, 748, 792, 830, 857, 862, 874, 898, 928, 945, 958, 959, 1193, 1321, 1323, 1340, 1345], "london": [441, 445, 462, 1050, 1054, 1075], "london_timezon": [462, 1075], "london_to_amsterdam": [462, 1075], "long": [216, 254, 263, 306, 307, 339, 396, 863, 884, 911, 945, 1001], "longer": [138, 139, 152], "longest": 569, "look": [10, 229, 339, 392, 569, 870, 945, 997], "lookup": 826, "loop": [140, 578, 830], "lose": [438, 1047], "lossi": [138, 139, 152], "love": [677, 701, 1258, 1282], "low": [17, 140, 418, 626, 830, 1214, 1340], "low_memori": [138, 139, 148, 150, 152, 156, 157], "lower": [152, 207, 229, 265, 331, 339, 418, 515, 575, 603, 627, 631, 649, 650, 750, 769, 770, 772, 773, 788, 789, 803, 817, 818, 830, 856, 870, 890, 934, 945, 1027, 1040, 1128, 1191, 1215, 1218, 1231, 1328, 1340, 1358, 1361], "lower_bound": [229, 339, 418, 515, 830, 870, 945, 1027, 1128, 1328, 1340], "lowercas": [609, 719, 721, 1300, 1302, 1363], "lowest": [575, 830], "lru_cach": [248, 339, 578, 830, 1193, 1340], "lst": 167, "lt": [160, 494, 743, 830, 1340], "ltrim": 1361, "lyric": [677, 701, 1258, 1282], "lz4": [41, 42, 45, 47, 49, 339, 945], "lzo": [45, 49, 339, 945], "m": [66, 68, 243, 339, 437, 438, 440, 445, 446, 465, 467, 468, 479, 684, 713, 715, 716, 720, 771, 772, 773, 774, 780, 788, 874, 945, 951, 1046, 1047, 1049, 1054, 1055, 1078, 1080, 1081, 1092, 1265, 1294, 1296, 1297, 1301, 1353, 1363, 1364], "m_2": [669, 830, 1251, 1340], "m_3": [669, 830, 1251, 1340], "m_i": [669, 830, 1251, 1340], "machin": 1371, "maco": 160, "made": [40, 140, 339, 468, 1081], "mai": [1, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 59, 67, 69, 73, 123, 124, 125, 126, 127, 129, 133, 134, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 192, 207, 208, 215, 217, 229, 243, 244, 245, 248, 271, 279, 286, 296, 298, 301, 308, 309, 339, 342, 343, 413, 428, 429, 431, 436, 437, 438, 449, 458, 463, 465, 476, 488, 509, 544, 569, 577, 578, 589, 592, 626, 639, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 687, 689, 692, 694, 700, 755, 757, 764, 765, 769, 770, 772, 773, 778, 788, 789, 804, 817, 818, 830, 851, 852, 856, 857, 862, 870, 874, 875, 876, 880, 894, 898, 904, 912, 918, 919, 928, 945, 1018, 1021, 1022, 1038, 1039, 1040, 1045, 1046, 1047, 1058, 1071, 1076, 1078, 1089, 1099, 1106, 1123, 1160, 1193, 1214, 1226, 1229, 1231, 1232, 1268, 1270, 1273, 1275, 1319, 1322, 1324, 1340, 1345, 1371], "main": [160, 852, 945], "maintain": [46, 47, 48, 49, 285, 339, 389, 570, 661, 672, 738, 753, 830, 856, 903, 945, 995, 1186, 1240, 1326, 1340], "maintain_ord": [46, 47, 48, 49, 228, 243, 261, 263, 285, 304, 309, 319, 321, 323, 326, 327, 328, 329, 330, 331, 332, 339, 349, 389, 399, 404, 407, 409, 501, 504, 570, 578, 672, 736, 738, 753, 830, 852, 862, 869, 874, 889, 901, 903, 909, 922, 924, 926, 929, 930, 931, 932, 933, 934, 935, 945, 995, 1186, 1326, 1340], "maintainorderjoin": [243, 339, 874, 945], "major": [143, 296, 339], "make": [40, 59, 82, 123, 124, 128, 135, 138, 139, 142, 143, 144, 146, 150, 153, 255, 259, 266, 297, 309, 339, 342, 486, 487, 509, 609, 610, 619, 632, 705, 830, 885, 945, 1102, 1103, 1123, 1286, 1321, 1340], "man": [702, 1283], "manag": [50, 90, 91, 189, 841, 842, 1355, 1368], "managed_shallow_clon": 189, "mandatori": [40, 339], "mango": [411, 415, 681, 707, 1015, 1020, 1262, 1288], "mani": [140, 141, 157, 217, 339, 687, 689, 701, 1106, 1268, 1282, 1340, 1344], "manner": 140, "many_to_mani": [243, 339, 874, 945], "many_to_on": [243, 339, 874, 945], "map": [82, 125, 126, 138, 139, 140, 141, 144, 145, 150, 151, 152, 155, 168, 200, 203, 221, 241, 248, 268, 272, 273, 274, 276, 292, 339, 350, 463, 476, 577, 578, 602, 604, 605, 607, 609, 610, 633, 634, 701, 741, 791, 830, 848, 892, 895, 945, 950, 951, 1040, 1076, 1089, 1193, 1220, 1221, 1282, 1329, 1340, 1350, 1352, 1353, 1368], "map_": 110, "map_batch": [830, 945], "map_el": [101, 248, 339, 577, 744, 830, 1340], "map_field": [606, 608], "map_row": 339, "mapelementsstrategi": [578, 830], "mapping_strategi": [619, 830], "march": [465, 1078], "mariadb": 141, "mark": [40, 134, 339, 410, 830, 1014, 1340], "mark_area": [1340, 1345], "mark_attr": [339, 342, 1340, 1345], "mark_bar": [339, 342, 1340, 1345], "mark_lin": [339, 342], "mark_point": [339, 342], "markdown": [7, 20, 192], "marker": [40, 339], "mask": [157, 168, 172, 236, 238, 339, 393, 516, 518, 521, 526, 621, 622, 676, 679, 688, 830, 998, 1110, 1128, 1129, 1132, 1135, 1141, 1210, 1211, 1241, 1257, 1260, 1269, 1331, 1340], "mass": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "massag": [254, 306, 339, 884, 911, 945], "match": [39, 40, 59, 66, 112, 123, 125, 126, 127, 129, 138, 140, 147, 148, 150, 156, 157, 161, 162, 163, 164, 200, 219, 220, 243, 244, 267, 272, 308, 339, 411, 415, 585, 586, 587, 633, 634, 651, 676, 677, 678, 681, 684, 685, 687, 688, 689, 692, 693, 699, 700, 701, 707, 713, 715, 716, 820, 826, 830, 848, 865, 874, 875, 891, 912, 945, 951, 1015, 1020, 1098, 1220, 1221, 1232, 1257, 1258, 1259, 1262, 1265, 1266, 1268, 1269, 1270, 1273, 1274, 1280, 1281, 1282, 1288, 1294, 1296, 1297, 1340, 1363], "matches_overlap": [687, 689, 1270], "matches_supertyp": [219, 339, 865, 945], "materi": [133, 248, 274, 325, 339, 851, 889, 928, 938, 945, 951, 1193, 1340], "materialis": [241, 242, 272, 273, 339], "materialized_view": 189, "math": [1, 10, 55, 263, 339, 430, 830, 1029, 1031, 1249, 1313, 1340, 1361, 1365, 1367], "mathemat": [737, 775, 830, 1361], "mathshortcut": [1, 55], "matplotlib": [160, 593, 889, 901, 945], "matter": [229, 241, 271, 273, 274, 293, 339, 639, 709, 710, 830, 870, 894, 945], "max": [25, 40, 45, 49, 134, 207, 219, 228, 250, 263, 271, 339, 343, 424, 493, 569, 577, 619, 629, 633, 634, 639, 641, 642, 662, 706, 757, 769, 772, 794, 810, 830, 856, 865, 869, 894, 945, 1034, 1040, 1109, 1185, 1216, 1227, 1242, 1287, 1340, 1349, 1358, 1361], "max_a": [271, 339, 639, 830, 894, 945], "max_binary_s": 140, "max_col": [166, 168], "max_colname_length": [227, 339], "max_color": [40, 339], "max_data_s": 172, "max_elem": 1358, "max_horizont": [339, 793], "max_items_per_column": [227, 339], "max_level": 134, "max_siz": [167, 168, 170, 172, 1371], "max_text_s": 140, "max_valu": 1371, "max_width": [569, 1185], "maxim": [326, 362, 830, 929, 968, 1340], "maximum": [10, 26, 37, 45, 46, 49, 67, 126, 129, 138, 139, 140, 143, 147, 148, 149, 152, 156, 158, 166, 167, 168, 170, 172, 227, 229, 249, 250, 339, 369, 414, 534, 579, 611, 621, 629, 690, 692, 695, 703, 714, 793, 794, 830, 870, 881, 945, 975, 1019, 1059, 1150, 1194, 1202, 1210, 1216, 1271, 1273, 1276, 1284, 1295, 1340, 1357], "mb": [215, 339, 397, 1099, 1340], "me": [677, 701, 721, 1258, 1282, 1302], "mean": [45, 49, 138, 139, 144, 150, 152, 155, 192, 207, 219, 228, 229, 244, 252, 263, 271, 309, 318, 339, 458, 463, 476, 490, 493, 498, 639, 642, 643, 644, 646, 648, 650, 653, 655, 657, 669, 675, 684, 691, 769, 770, 772, 773, 774, 796, 817, 818, 820, 830, 856, 865, 869, 870, 875, 880, 894, 921, 945, 1040, 1071, 1076, 1089, 1105, 1109, 1228, 1251, 1256, 1265, 1272, 1340, 1357, 1358], "mean_horizont": [339, 795], "measur": [254, 306, 339, 343, 884, 911, 945], "measure_a": [339, 343], "measure_b": [339, 343], "median": [207, 263, 339, 493, 645, 646, 830, 856, 917, 945, 1040, 1229, 1340, 1361], "mediat": 1368, "medium": [40, 339], "megan": [255, 339, 885, 945], "melt": [306, 339, 911, 945], "member": [229, 339, 870, 945, 1133, 1340], "membership": [371, 537, 977, 1153], "memori": [14, 45, 49, 57, 58, 59, 123, 124, 127, 128, 129, 138, 139, 140, 142, 143, 144, 148, 150, 152, 153, 155, 156, 157, 196, 217, 248, 273, 274, 283, 297, 325, 339, 619, 630, 664, 830, 851, 852, 920, 945, 1106, 1193, 1217, 1245, 1246, 1321, 1340], "memory_map": [144, 150, 155], "memory_resourc": 920, "merg": [39, 243, 244, 255, 339, 874, 875, 885, 945], "merge_sort": [339, 945], "messi": [684, 686, 1265, 1267], "met": 820, "meta": [92, 431, 682, 830, 1263], "metadata": [0, 154, 178, 182, 842], "metastor": 183, "method": [4, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 122, 124, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 158, 165, 168, 172, 177, 183, 184, 186, 187, 192, 194, 203, 207, 208, 211, 212, 217, 224, 228, 235, 241, 248, 259, 265, 272, 273, 274, 282, 304, 313, 320, 325, 331, 339, 348, 351, 352, 383, 418, 431, 465, 468, 482, 483, 491, 498, 500, 503, 505, 513, 529, 562, 576, 578, 596, 598, 600, 602, 603, 605, 607, 609, 610, 613, 614, 615, 618, 624, 627, 629, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 663, 677, 687, 689, 701, 709, 710, 711, 712, 717, 723, 729, 737, 739, 744, 760, 792, 803, 822, 823, 825, 826, 830, 831, 832, 835, 836, 837, 838, 839, 842, 852, 856, 857, 859, 860, 873, 890, 900, 909, 915, 920, 923, 928, 934, 945, 950, 953, 960, 989, 1027, 1040, 1078, 1081, 1096, 1097, 1106, 1107, 1116, 1118, 1126, 1145, 1178, 1192, 1193, 1204, 1205, 1215, 1216, 1231, 1244, 1258, 1268, 1270, 1282, 1298, 1304, 1323, 1332, 1334, 1336, 1340, 1341, 1344, 1346, 1347, 1348, 1350, 1354], "metric": 140, "micro": [464, 1077], "microsecond": [66, 68, 229, 241, 244, 271, 273, 274, 293, 309, 339, 458, 461, 463, 468, 471, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 771, 772, 773, 774, 816, 817, 818, 830, 870, 875, 889, 894, 945, 951, 1071, 1074, 1076, 1084, 1089, 1101, 1340, 1364], "microsoft": [33, 40, 339], "mid_color": [40, 339], "midnight": 83, "midpoint": [207, 265, 331, 339, 627, 649, 650, 803, 830, 856, 890, 934, 945, 1040, 1215, 1231, 1340], "might": [138, 139, 152, 174, 243, 244, 263, 297, 306, 339, 578, 739, 830, 874, 875, 903, 911, 945], "millennia": 1364, "millennium": 1364, "milli": [464, 1077], "millisecond": [229, 244, 271, 309, 339, 447, 453, 458, 463, 472, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 772, 773, 774, 788, 817, 818, 830, 870, 875, 894, 945, 951, 1071, 1076, 1085, 1089, 1101, 1340, 1364], "milliseconds_diff": [471, 472, 474], "mimic": 758, "min": [40, 45, 49, 135, 207, 219, 257, 263, 271, 339, 425, 493, 578, 619, 629, 639, 647, 648, 769, 772, 799, 808, 830, 856, 865, 894, 945, 1035, 1040, 1109, 1216, 1230, 1340, 1358, 1361, 1364, 1371], "min_a": [271, 339, 639, 830, 894, 945], "min_col": [166, 168], "min_color": [40, 339], "min_elem": 1358, "min_horizont": [339, 798, 808], "min_sampl": [428, 484, 486, 487, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 806, 807, 830, 1038, 1100, 1102, 1103, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1340], "min_siz": [167, 168, 170, 172, 1371], "min_valu": 1371, "mincol": 166, "minim": [329, 363, 370, 535, 664, 672, 830, 932, 969, 976, 1151, 1197, 1245, 1340], "minimum": [45, 49, 166, 167, 168, 170, 172, 222, 256, 257, 339, 484, 486, 487, 597, 612, 622, 629, 798, 799, 830, 886, 945, 1065, 1100, 1102, 1103, 1203, 1211, 1216, 1340, 1357, 1371], "minu": [458, 615, 830, 1071], "minut": [229, 244, 271, 309, 339, 447, 450, 452, 457, 458, 461, 463, 464, 473, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 771, 772, 773, 774, 816, 817, 818, 830, 870, 875, 894, 945, 951, 1071, 1074, 1076, 1086, 1089, 1101, 1340, 1364], "minutes_diff": 473, "misc": 1355, "miscellan": 842, "mismatch": [59, 115, 148, 156, 161, 163], "miss": [59, 138, 139, 152, 218, 224, 339, 391, 484, 486, 487, 492, 499, 522, 523, 569, 830, 864, 945, 1100, 1102, 1103, 1108, 1340], "missing_utf8_is_empty_str": [138, 139, 152], "mix": [11, 244, 297, 339, 757, 809, 875, 904, 945, 951, 1040, 1340], "mixin": 1, "mlnm": 451, "mm": [40, 339], "mn": 1363, "mno": [16, 20], "mnop": 1363, "mo": 774, "mocha": 951, "mod": [830, 1361], "mode": [38, 39, 40, 46, 47, 48, 49, 57, 58, 161, 163, 263, 286, 339, 685, 802, 805, 821, 830, 851, 852, 862, 945, 1266, 1340, 1349, 1350, 1368], "model": [301, 339], "modifi": [138, 139, 152, 174, 192, 217, 233, 240, 241, 311, 339, 365, 462, 479, 676, 684, 685, 688, 699, 700, 719, 721, 722, 830, 960, 1075, 1092, 1106, 1257, 1265, 1266, 1269, 1280, 1281, 1300, 1302, 1303, 1340], "modul": [94, 102, 143, 829, 949, 951, 1371], "modulu": [598, 830], "moment": [45, 205, 339, 527, 669, 830, 1143, 1251, 1340], "mon": [339, 342, 1364], "mondai": [229, 339, 436, 476, 478, 755, 870, 945, 1045, 1089, 1091], "monkei": [697, 698, 1278, 1279], "month": [229, 244, 271, 309, 339, 444, 455, 456, 458, 461, 463, 465, 468, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 768, 769, 770, 771, 772, 773, 774, 817, 818, 830, 870, 875, 894, 945, 1053, 1068, 1069, 1071, 1074, 1076, 1078, 1081, 1089, 1101, 1340, 1364], "month_nam": [465, 468], "monthbegin": [456, 1069], "monthend": [455, 1068], "moos": 951, "more": [20, 40, 45, 49, 51, 59, 90, 91, 120, 123, 124, 125, 126, 127, 128, 129, 133, 135, 140, 141, 142, 143, 147, 148, 149, 150, 153, 154, 156, 161, 163, 168, 192, 194, 205, 207, 211, 220, 240, 241, 248, 254, 259, 267, 272, 273, 275, 286, 296, 297, 301, 304, 306, 325, 339, 343, 352, 389, 413, 494, 498, 506, 527, 557, 570, 574, 577, 578, 618, 619, 660, 669, 685, 694, 713, 715, 716, 738, 749, 761, 777, 783, 786, 795, 797, 800, 801, 810, 820, 826, 830, 856, 859, 860, 866, 884, 891, 904, 909, 911, 920, 945, 949, 951, 953, 995, 1018, 1021, 1040, 1119, 1120, 1143, 1173, 1186, 1193, 1238, 1251, 1266, 1275, 1294, 1296, 1297, 1319, 1321, 1326, 1340, 1355, 1356, 1366, 1369, 1370, 1371], "more_bi": [261, 285, 339, 672, 830, 903, 945], "more_column": [216, 305, 339, 488, 776, 830, 863, 910, 945, 951], "more_expr": [619, 753, 756, 757, 758, 759, 830], "more_nam": [724, 826], "most": [40, 123, 138, 139, 141, 152, 161, 162, 163, 164, 297, 339, 402, 403, 590, 599, 620, 634, 706, 830, 1007, 1008, 1198, 1209, 1221, 1287, 1321, 1340, 1352, 1368], "mostli": [291, 339, 494, 830], "move": [263, 274, 339, 436, 484, 485, 486, 487, 641, 643, 647, 654, 830, 1045, 1100, 1101, 1102, 1103, 1227, 1228, 1230, 1234, 1340], "mr": 920, "mssql": [38, 339], "much": [248, 307, 325, 339, 413, 414, 428, 544, 578, 694, 695, 792, 830, 928, 1018, 1019, 1038, 1160, 1193, 1275, 1276, 1340], "mul": 830, "multi": [8, 40, 138, 139, 301, 339, 488, 684, 830, 1265], "multi_fram": [40, 339], "multicolselector": 197, "multiindexselector": [197, 955], "multipl": [40, 57, 58, 59, 107, 138, 139, 143, 149, 152, 155, 156, 157, 166, 168, 172, 209, 215, 217, 220, 228, 229, 233, 242, 245, 261, 263, 267, 274, 277, 285, 308, 313, 318, 339, 409, 544, 577, 583, 590, 599, 600, 619, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 672, 724, 736, 753, 761, 778, 791, 793, 798, 804, 810, 813, 820, 826, 830, 842, 851, 852, 858, 866, 869, 870, 876, 891, 896, 903, 912, 915, 921, 928, 945, 960, 990, 1099, 1106, 1160, 1180, 1198, 1220, 1222, 1253, 1340, 1353, 1358], "multipli": [577, 640, 641, 643, 645, 647, 649, 652, 654, 656, 728, 830, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1340], "multithread": [285, 339, 672, 753, 830, 903, 945, 990, 1180, 1253, 1340], "must": [33, 40, 69, 125, 133, 135, 138, 142, 150, 153, 154, 157, 158, 207, 216, 229, 244, 245, 255, 263, 271, 272, 339, 429, 569, 578, 593, 626, 633, 634, 639, 701, 757, 769, 770, 789, 820, 830, 856, 863, 870, 875, 876, 880, 885, 894, 901, 920, 945, 1039, 1040, 1214, 1220, 1221, 1282, 1340], "mutual": [272, 339], "my": [154, 158, 339, 342, 1340, 1345], "my_bucket": 945, "my_column": 928, "my_column_": [303, 339], "my_column_0": [303, 339], "my_column_1": [303, 339], "my_column_2": [303, 339], "my_custom_aggreg": 792, "my_fil": 144, "my_holidai": [436, 755, 1045], "my_larger_than_ram_fil": [46, 47, 48, 49, 945], "my_long_fil": 152, "my_struct": 812, "mydf": 152, "myrol": 141, "mysql": 141, "n": [1, 12, 13, 17, 25, 26, 37, 44, 46, 52, 53, 54, 55, 66, 68, 132, 133, 138, 139, 143, 148, 152, 168, 201, 217, 223, 229, 231, 241, 242, 247, 248, 273, 274, 275, 282, 287, 290, 293, 295, 310, 322, 324, 333, 339, 355, 383, 388, 397, 399, 404, 407, 408, 409, 413, 414, 428, 432, 436, 438, 440, 446, 467, 479, 485, 491, 494, 502, 508, 531, 539, 545, 547, 557, 558, 562, 565, 567, 569, 571, 620, 623, 632, 652, 653, 656, 657, 660, 663, 669, 674, 690, 694, 695, 699, 700, 705, 706, 708, 709, 714, 716, 731, 735, 736, 737, 741, 742, 744, 762, 771, 772, 773, 774, 780, 782, 802, 805, 806, 807, 808, 811, 815, 819, 821, 830, 849, 868, 870, 871, 879, 900, 905, 907, 913, 925, 927, 936, 945, 951, 989, 994, 1002, 1013, 1018, 1019, 1026, 1038, 1041, 1045, 1047, 1049, 1055, 1080, 1092, 1101, 1106, 1107, 1115, 1122, 1147, 1155, 1161, 1163, 1173, 1174, 1178, 1183, 1185, 1209, 1233, 1235, 1238, 1244, 1251, 1255, 1271, 1275, 1276, 1280, 1281, 1286, 1287, 1295, 1297, 1312, 1318, 1325, 1329, 1330, 1340, 1352, 1353, 1360, 1363, 1364, 1366, 1368, 1371], "n0": [388, 569], "n00": [994, 1185], "n01": [994, 1185], "n02": [994, 1185], "n1": [388, 569], "n2": [1, 388], "n3": 1, "n_1": [494, 830], "n_2": [494, 830], "n_3": [494, 830], "n_bar": 1357, "n_bit": 1363, "n_byte": [397, 413, 414, 694, 695, 1363], "n_char": [413, 414, 694, 695, 1363], "n_chunk": [339, 960, 1106, 1217, 1340], "n_elem": 1358, "n_even": 951, "n_field_strategi": [569, 1185], "n_film": 1349, "n_foo_uniqu": 1357, "n_kilobyt": 397, "n_row": [133, 136, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 242, 339, 945], "n_thread": [138, 139], "n_uniqu": [339, 355, 830, 1340], "na": [298, 339, 707, 1322, 1340], "naiv": [440, 441, 716, 1049, 1050, 1297], "name": [1, 18, 22, 24, 32, 35, 37, 38, 40, 46, 52, 53, 54, 55, 70, 82, 99, 123, 125, 126, 127, 128, 129, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 163, 164, 165, 166, 168, 171, 172, 173, 178, 180, 181, 182, 183, 184, 186, 187, 199, 200, 203, 204, 209, 210, 211, 212, 216, 220, 221, 224, 225, 227, 228, 239, 240, 241, 243, 244, 245, 248, 250, 252, 254, 255, 257, 261, 263, 267, 268, 272, 273, 274, 276, 277, 278, 285, 286, 289, 292, 294, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 315, 316, 317, 318, 324, 339, 343, 350, 388, 392, 393, 395, 398, 409, 418, 429, 465, 468, 488, 494, 515, 522, 523, 524, 525, 569, 578, 583, 587, 589, 591, 595, 619, 626, 636, 672, 685, 686, 699, 700, 701, 724, 726, 728, 736, 741, 745, 746, 747, 748, 749, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 776, 777, 782, 783, 786, 793, 794, 795, 796, 797, 798, 799, 800, 803, 806, 807, 808, 809, 811, 812, 813, 814, 815, 819, 820, 826, 830, 846, 848, 853, 854, 858, 859, 860, 863, 866, 869, 874, 875, 876, 884, 885, 891, 892, 895, 896, 897, 903, 904, 908, 909, 910, 911, 912, 915, 916, 917, 918, 919, 921, 927, 945, 950, 951, 957, 994, 1026, 1039, 1078, 1081, 1098, 1185, 1214, 1219, 1265, 1266, 1267, 1280, 1281, 1305, 1308, 1316, 1317, 1322, 1329, 1340, 1345, 1350, 1351, 1352, 1353, 1354, 1355, 1367, 1368, 1371], "name_gener": [303, 339], "named_agg": [318, 921], "named_bi": [228, 339, 869, 945], "named_expr": [277, 278, 313, 314, 339, 728, 808, 812, 896, 897, 915, 916, 945], "named_fram": [1353, 1368], "nameless": 128, "namespac": [1, 140, 178, 180, 181, 182, 186, 338, 339, 342, 724, 809, 829, 842, 943, 944, 949, 1340, 1345, 1371], "namespaceinfo": [180, 190], "nan": [128, 168, 196, 211, 218, 297, 298, 339, 434, 435, 482, 483, 492, 503, 505, 513, 522, 523, 524, 525, 529, 576, 579, 597, 611, 612, 613, 614, 640, 666, 737, 760, 830, 859, 864, 945, 963, 967, 1043, 1044, 1108, 1136, 1137, 1202, 1203, 1226, 1248, 1321, 1322, 1340, 1371], "nan_as_nul": 196, "nan_max": [830, 1340], "nan_min": [830, 1340], "nan_to_nul": [128, 339, 945, 1340], "nana": 1363, "nanmax": [611, 612, 830, 1202, 1203, 1340], "nanosecond": [83, 229, 244, 271, 309, 339, 458, 463, 464, 474, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 772, 773, 774, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1077, 1087, 1089, 1101, 1340, 1364], "nansum": [640, 830, 1226, 1340], "nativ": [10, 38, 138, 140, 143, 144, 146, 150, 188, 241, 248, 273, 274, 293, 297, 325, 339, 578, 792, 809, 830, 836, 904, 928, 945, 949, 1193, 1321, 1340, 1344, 1368, 1371], "natur": [574, 830, 1190, 1340, 1356, 1362], "ndarrai": [127, 194, 220, 267, 297, 339, 501, 661, 830, 866, 891, 945, 953, 1114, 1239, 1240, 1321, 1340], "ndjson": [48, 945], "ne": [614, 830, 1205, 1340], "ne_miss": [220, 267, 339, 830, 866, 891, 945, 1097, 1340], "nearest": [53, 207, 244, 265, 331, 339, 417, 497, 513, 627, 649, 650, 803, 830, 856, 875, 890, 934, 945, 1024, 1040, 1113, 1126, 1215, 1231, 1340, 1362], "nearest_pow2": 53, "necessari": [37, 38, 46, 50, 91, 143, 297, 339, 945, 1321, 1340], "need": [59, 93, 102, 130, 138, 139, 141, 150, 152, 155, 157, 192, 229, 271, 274, 283, 339, 342, 569, 639, 664, 699, 700, 701, 717, 774, 802, 805, 821, 830, 870, 894, 945, 1245, 1280, 1281, 1282, 1298, 1340, 1345, 1371], "neg": [13, 65, 66, 67, 68, 138, 139, 144, 146, 150, 159, 231, 247, 271, 282, 284, 290, 316, 339, 383, 562, 563, 623, 624, 639, 663, 670, 690, 703, 714, 830, 894, 900, 902, 918, 919, 945, 951, 989, 1122, 1147, 1178, 1179, 1212, 1244, 1252, 1271, 1284, 1295, 1312, 1340], "negat": [616, 830, 1207, 1340], "neither": [130, 143, 149, 275, 339, 388, 569, 994, 1185], "nest": [50, 130, 134, 169, 170, 215, 339, 842, 1099, 1340, 1368, 1371], "nesting_level": 169, "net": [685, 1266], "netherland": [244, 339, 875, 945], "netsuite_format": 185, "never": [37, 46, 140, 243, 244, 272, 339, 874, 875, 945], "new": [38, 39, 40, 152, 192, 197, 223, 233, 234, 248, 259, 260, 263, 268, 303, 305, 307, 308, 313, 314, 339, 350, 440, 490, 500, 502, 513, 603, 604, 619, 633, 634, 638, 696, 699, 700, 705, 706, 724, 726, 826, 830, 842, 868, 892, 910, 912, 915, 916, 928, 945, 955, 957, 1049, 1105, 1115, 1206, 1219, 1220, 1221, 1225, 1280, 1281, 1286, 1287, 1305, 1308, 1317, 1340, 1368, 1370], "new_column": [138, 139, 143, 152], "new_dai": 461, "new_dat": 458, "new_df": [308, 339, 912, 945], "new_fil": [35, 37, 41, 42, 45, 339], "new_from_index": 1340, "new_id": [303, 339], "new_lf": [912, 945], "new_tabl": 1370, "new_valu": [764, 765, 778, 804], "new_york": 772, "newli": 51, "newlin": [44, 138, 148, 152, 156, 339], "next": [18, 53, 229, 244, 271, 309, 339, 391, 436, 458, 463, 476, 629, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1045, 1071, 1076, 1089, 1216, 1340], "next_batch": 139, "next_pow2": 53, "nfc": [696, 1277, 1363], "nfd": [696, 1277, 1363], "nfkc": [696, 1277, 1363], "nfkd": [696, 1277, 1363], "nfruit": 714, "nl": [436, 755, 1045], "nnel_id": 130, "no1": 951, "no_default": [224, 339, 633, 634, 701, 830, 1220, 1221, 1282, 1340], "no_optim": [46, 47, 48, 49, 57, 58, 851, 852, 880, 889, 945], "nodataerror": [138, 139, 143, 149, 152], "nodd": [684, 1265], "node": [847, 851, 872, 880, 884, 889, 892, 945], "nodefault": [224, 339, 633, 634, 701, 830, 1220, 1221, 1282, 1340], "non": [4, 5, 37, 39, 40, 46, 51, 66, 67, 128, 135, 159, 199, 206, 242, 254, 271, 277, 278, 282, 302, 303, 306, 308, 313, 314, 339, 391, 408, 409, 413, 418, 422, 423, 436, 462, 499, 515, 569, 577, 578, 584, 619, 620, 633, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 678, 685, 694, 699, 700, 701, 721, 723, 728, 735, 736, 746, 748, 756, 757, 758, 759, 761, 763, 767, 774, 794, 796, 799, 806, 807, 808, 812, 814, 830, 846, 855, 884, 894, 896, 897, 900, 908, 911, 912, 915, 916, 945, 951, 1013, 1018, 1027, 1032, 1033, 1040, 1045, 1075, 1128, 1185, 1193, 1209, 1220, 1221, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1244, 1259, 1266, 1275, 1280, 1281, 1302, 1304, 1321, 1325, 1340, 1360, 1368], "non_exist": [462, 1075], "non_numer": [37, 46, 339, 945], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 60, 63, 66, 67, 68, 69, 70, 78, 82, 91, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 182, 183, 184, 186, 187, 188, 192, 194, 195, 201, 206, 207, 211, 212, 218, 219, 220, 222, 224, 227, 229, 230, 235, 239, 243, 244, 246, 248, 251, 254, 259, 260, 263, 267, 271, 272, 275, 279, 282, 284, 285, 291, 292, 294, 296, 297, 298, 301, 303, 304, 305, 306, 307, 308, 309, 320, 324, 339, 351, 353, 354, 366, 367, 368, 375, 376, 388, 391, 411, 413, 414, 415, 418, 422, 423, 424, 427, 429, 434, 435, 443, 458, 461, 462, 468, 483, 484, 485, 486, 487, 488, 491, 492, 493, 499, 506, 507, 509, 511, 513, 514, 515, 522, 523, 524, 525, 530, 532, 533, 540, 546, 548, 550, 557, 558, 559, 560, 561, 563, 569, 577, 578, 589, 592, 593, 594, 596, 601, 614, 615, 616, 617, 619, 620, 626, 629, 630, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 660, 663, 664, 665, 666, 670, 671, 675, 676, 678, 680, 681, 682, 685, 688, 690, 691, 692, 693, 694, 695, 697, 698, 703, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 718, 720, 723, 724, 725, 726, 727, 734, 741, 746, 747, 748, 750, 756, 757, 758, 759, 760, 761, 763, 767, 769, 770, 771, 772, 773, 774, 776, 777, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 799, 805, 806, 807, 812, 814, 816, 817, 818, 820, 830, 849, 850, 852, 855, 856, 859, 860, 862, 864, 865, 866, 870, 873, 874, 875, 878, 880, 884, 887, 891, 894, 898, 900, 901, 902, 903, 909, 910, 911, 912, 917, 920, 923, 927, 928, 937, 938, 945, 950, 951, 953, 954, 958, 959, 961, 968, 969, 973, 974, 981, 982, 994, 1004, 1009, 1012, 1015, 1018, 1019, 1020, 1026, 1027, 1032, 1033, 1039, 1040, 1042, 1043, 1044, 1052, 1059, 1060, 1061, 1065, 1074, 1075, 1081, 1095, 1097, 1100, 1101, 1102, 1103, 1107, 1108, 1109, 1111, 1119, 1121, 1123, 1125, 1126, 1127, 1128, 1138, 1139, 1142, 1143, 1144, 1146, 1148, 1149, 1152, 1156, 1162, 1164, 1166, 1173, 1174, 1175, 1176, 1177, 1179, 1185, 1193, 1194, 1195, 1196, 1197, 1205, 1208, 1214, 1215, 1216, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1238, 1239, 1240, 1241, 1244, 1247, 1248, 1251, 1252, 1255, 1256, 1257, 1259, 1261, 1262, 1263, 1266, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1278, 1279, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1294, 1295, 1296, 1297, 1299, 1301, 1304, 1307, 1315, 1317, 1318, 1319, 1321, 1322, 1323, 1329, 1330, 1340, 1349, 1351, 1352, 1353, 1355, 1358, 1360, 1364, 1368], "nonexist": [462, 1075], "nor": [143, 149, 275, 339], "normal": [39, 134, 229, 339, 481, 527, 669, 741, 830, 870, 945, 1095, 1143, 1251, 1329, 1340, 1361], "normalised_scor": 140, "norowsreturnederror": [272, 339], "north": 69, "not_": [313, 339, 830, 915, 945, 951, 1340], "not_c": [313, 339, 915, 945], "notabl": 140, "notat": [11, 40, 339], "note": [4, 10, 20, 39, 40, 45, 50, 51, 58, 59, 65, 66, 68, 83, 90, 91, 123, 124, 125, 127, 129, 130, 134, 138, 140, 141, 142, 143, 147, 148, 149, 152, 153, 154, 156, 158, 161, 163, 166, 168, 172, 174, 192, 196, 203, 205, 207, 208, 211, 215, 218, 220, 229, 230, 239, 240, 241, 243, 244, 248, 255, 259, 262, 263, 267, 268, 271, 272, 273, 274, 279, 282, 286, 293, 296, 298, 301, 303, 304, 306, 308, 309, 313, 315, 316, 339, 383, 396, 411, 413, 414, 415, 418, 426, 427, 431, 434, 435, 441, 455, 456, 458, 463, 468, 476, 485, 492, 498, 500, 507, 515, 522, 523, 541, 544, 562, 569, 578, 592, 593, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 633, 634, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 663, 665, 669, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 699, 700, 701, 703, 708, 709, 710, 713, 714, 721, 723, 724, 730, 737, 746, 748, 755, 764, 769, 770, 772, 773, 774, 778, 788, 790, 802, 804, 805, 809, 817, 818, 820, 821, 826, 830, 841, 852, 856, 857, 859, 864, 866, 870, 875, 885, 891, 892, 894, 898, 900, 901, 903, 904, 909, 911, 912, 915, 918, 919, 945, 949, 951, 989, 1001, 1018, 1019, 1027, 1036, 1037, 1040, 1043, 1044, 1050, 1068, 1069, 1071, 1076, 1081, 1089, 1099, 1101, 1108, 1121, 1128, 1157, 1160, 1178, 1193, 1220, 1221, 1225, 1232, 1239, 1241, 1244, 1246, 1251, 1256, 1257, 1258, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1275, 1276, 1280, 1281, 1282, 1284, 1289, 1290, 1291, 1294, 1295, 1302, 1304, 1311, 1322, 1324, 1340, 1349, 1350, 1354, 1355, 1366, 1368], "noth": [20, 684, 693, 1265, 1274], "notic": [140, 220, 339, 866, 945, 1340], "notimplementederror": 196, "now": [51, 143, 271, 297, 339, 586, 894, 945, 1321, 1340], "np": [127, 194, 220, 267, 297, 339, 501, 577, 661, 830, 866, 891, 945, 953, 1114, 1131, 1134, 1136, 1137, 1239, 1240, 1340], "npt": [194, 953], "nr": [322, 333, 925, 936], "nth": [223, 339, 502, 706, 826, 830, 868, 945, 1115, 1287, 1340], "nthe": [684, 1265], "nthose": [684, 1265], "nu": 681, "null": [16, 37, 39, 45, 46, 49, 51, 59, 66, 125, 126, 129, 134, 138, 139, 148, 150, 152, 156, 157, 158, 165, 168, 172, 196, 199, 200, 201, 206, 207, 211, 212, 214, 219, 220, 222, 235, 243, 251, 252, 253, 260, 263, 265, 267, 282, 285, 287, 288, 289, 292, 297, 298, 302, 305, 308, 310, 313, 320, 339, 351, 353, 354, 364, 367, 368, 375, 376, 383, 384, 391, 393, 396, 408, 409, 410, 411, 413, 414, 415, 418, 422, 423, 424, 427, 432, 434, 435, 458, 461, 462, 469, 470, 471, 472, 473, 474, 475, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 499, 506, 511, 513, 514, 522, 523, 524, 525, 530, 532, 533, 539, 540, 543, 544, 546, 548, 549, 550, 558, 559, 560, 561, 562, 564, 569, 577, 578, 601, 614, 615, 616, 617, 619, 620, 630, 634, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 663, 664, 666, 671, 672, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 697, 698, 703, 705, 706, 707, 713, 714, 716, 718, 723, 724, 725, 726, 727, 734, 735, 736, 745, 746, 747, 748, 753, 756, 757, 758, 759, 761, 763, 767, 771, 776, 787, 790, 794, 796, 799, 806, 807, 812, 814, 820, 830, 846, 849, 855, 856, 859, 860, 865, 866, 873, 874, 887, 891, 900, 903, 908, 910, 912, 915, 917, 923, 945, 951, 958, 959, 970, 973, 974, 981, 982, 989, 990, 998, 1001, 1013, 1014, 1015, 1018, 1019, 1020, 1026, 1027, 1032, 1033, 1041, 1043, 1044, 1074, 1075, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1097, 1098, 1100, 1101, 1102, 1103, 1107, 1109, 1110, 1119, 1120, 1125, 1126, 1127, 1138, 1139, 1140, 1146, 1148, 1149, 1152, 1155, 1156, 1159, 1160, 1162, 1164, 1165, 1166, 1175, 1177, 1178, 1180, 1185, 1193, 1205, 1208, 1209, 1221, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1248, 1253, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1278, 1279, 1284, 1286, 1287, 1288, 1294, 1295, 1297, 1299, 1304, 1307, 1318, 1321, 1322, 1323, 1325, 1340, 1352, 1356, 1358, 1360, 1364, 1366, 1368, 1369, 1371], "null_behavior": [432, 539, 830, 1041, 1155, 1340], "null_count": [45, 49, 207, 212, 339, 428, 830, 856, 945, 1038, 1040, 1340], "null_equ": [214, 339, 1098, 1340], "null_on_oob": [375, 544, 546, 981, 1160, 1162], "null_prob": [165, 168, 172], "null_valu": [37, 46, 138, 139, 152, 339, 945], "nullabl": [39, 339], "nullbehavior": [432, 539, 830, 1041, 1155, 1340], "nullif": 1361, "nulls_last": [285, 339, 364, 384, 564, 619, 671, 672, 753, 830, 903, 945, 970, 990, 1140, 1180, 1253, 1340], "num": [13, 40, 300, 339, 515, 830, 1128, 1340], "num_row": 196, "num_sampl": [788, 789], "number": [10, 11, 12, 13, 14, 17, 25, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 83, 91, 112, 123, 125, 126, 127, 129, 132, 134, 138, 139, 140, 141, 143, 147, 148, 149, 150, 152, 155, 156, 157, 159, 166, 168, 171, 173, 174, 175, 182, 199, 201, 206, 215, 216, 218, 219, 227, 231, 232, 241, 242, 247, 258, 259, 271, 275, 282, 287, 290, 302, 307, 310, 312, 320, 322, 324, 333, 339, 365, 381, 383, 388, 391, 400, 401, 402, 403, 405, 406, 408, 409, 414, 422, 428, 429, 432, 436, 439, 447, 449, 451, 453, 454, 464, 477, 478, 480, 484, 485, 486, 487, 491, 492, 493, 499, 508, 522, 523, 530, 531, 539, 547, 550, 555, 557, 562, 565, 567, 569, 571, 619, 623, 626, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 674, 690, 692, 694, 695, 699, 703, 705, 706, 714, 717, 731, 735, 736, 742, 755, 760, 761, 762, 774, 782, 787, 788, 789, 806, 807, 811, 815, 819, 830, 846, 849, 855, 863, 864, 865, 871, 879, 889, 900, 905, 907, 908, 913, 914, 923, 925, 927, 936, 945, 950, 987, 989, 994, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1019, 1026, 1032, 1038, 1039, 1041, 1045, 1048, 1056, 1058, 1063, 1066, 1067, 1077, 1090, 1091, 1093, 1099, 1100, 1101, 1102, 1103, 1107, 1108, 1109, 1122, 1146, 1147, 1155, 1163, 1166, 1171, 1173, 1178, 1183, 1185, 1199, 1200, 1214, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1244, 1247, 1255, 1271, 1273, 1275, 1276, 1280, 1284, 1286, 1287, 1295, 1298, 1312, 1325, 1330, 1340, 1356, 1359, 1362, 1371], "number_of_two": [372, 538], "numbers_decim": 717, "numer": [10, 16, 37, 40, 46, 142, 153, 200, 209, 244, 297, 298, 306, 307, 339, 348, 396, 410, 418, 498, 515, 574, 598, 600, 624, 632, 664, 666, 686, 723, 729, 737, 788, 830, 842, 848, 858, 875, 911, 945, 951, 1001, 1014, 1027, 1040, 1128, 1245, 1248, 1267, 1304, 1321, 1340, 1362, 1371], "numeric_dtyp": 1371, "numericliter": [418, 788, 789, 830, 1027, 1340], "numpi": [97, 127, 160, 194, 205, 241, 273, 274, 293, 297, 298, 339, 577, 611, 612, 640, 830, 945, 953, 1131, 1134, 1136, 1137, 1202, 1203, 1226, 1321, 1322, 1340], "nworld": 708, "o": [144, 155, 397, 408, 409, 428, 683, 735, 736, 830, 1002, 1013, 1038, 1264, 1289, 1325, 1340, 1353], "oauth": 154, "obj": 951, "object": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 82, 100, 123, 124, 125, 130, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 166, 168, 169, 195, 196, 203, 208, 215, 228, 229, 244, 246, 261, 271, 274, 279, 286, 296, 297, 298, 339, 431, 592, 769, 770, 772, 773, 790, 809, 817, 818, 830, 842, 851, 857, 870, 875, 878, 894, 904, 942, 945, 951, 954, 1099, 1315, 1340, 1350, 1352, 1355, 1368, 1370], "observ": [243, 339, 429, 484, 485, 486, 487, 626, 830, 874, 945, 1039, 1100, 1101, 1102, 1103, 1214, 1340], "obtain": 569, "obvious": 726, "occur": [40, 57, 58, 98, 107, 113, 245, 339, 372, 538, 599, 629, 830, 851, 852, 862, 876, 889, 901, 945, 978, 1154, 1198, 1216, 1321, 1340], "occurr": [509, 511, 518, 521, 741, 830, 1123, 1125, 1132, 1135, 1329, 1340], "oct": 1363, "octet_length": 1361, "octob": [468, 1081, 1363], "od": [149, 842], "odbc": [38, 140, 339], "odd": 684, "odi": [687, 689, 1270], "off": [46, 47, 48, 49, 57, 58, 138, 139, 152, 243, 244, 339, 436, 755, 851, 852, 862, 874, 875, 880, 889, 945, 1045], "offer": [262, 339, 623, 830, 888, 945, 1364, 1368], "offic": [40, 339], "offset": [68, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 223, 229, 271, 284, 315, 316, 339, 436, 437, 445, 455, 456, 458, 463, 476, 502, 545, 563, 639, 670, 688, 689, 703, 716, 830, 868, 870, 894, 902, 918, 919, 945, 1045, 1046, 1054, 1068, 1069, 1071, 1076, 1089, 1115, 1161, 1179, 1252, 1269, 1270, 1284, 1297, 1340, 1367], "offset_bi": 774, "often": [141, 192, 229, 271, 339, 372, 538, 632, 639, 830, 870, 894, 945, 978, 1154, 1355, 1368], "ok": 569, "old": [39, 268, 339, 633, 634, 830, 892, 945, 1220, 1221, 1340], "old_tabl": 1370, "older": [45, 49, 339, 945], "oldw": 709, "omit": [27, 126, 130, 143, 149, 166, 192, 259, 274, 296, 301, 339, 769, 772, 784, 785, 817, 818, 951, 1369, 1370], "onc": [138, 139, 174, 248, 273, 275, 318, 339, 557, 577, 578, 660, 711, 712, 830, 847, 921, 945, 1173, 1193, 1238, 1292, 1293, 1340, 1353], "one": [20, 37, 38, 40, 46, 51, 59, 104, 123, 125, 126, 127, 128, 129, 138, 139, 143, 147, 148, 149, 152, 156, 171, 173, 192, 200, 208, 211, 219, 227, 228, 229, 241, 245, 246, 254, 263, 271, 272, 273, 279, 282, 297, 300, 306, 319, 339, 349, 383, 429, 431, 493, 494, 498, 501, 504, 506, 562, 569, 574, 592, 602, 603, 605, 607, 609, 610, 619, 638, 639, 663, 671, 684, 685, 686, 701, 724, 769, 772, 792, 810, 820, 826, 830, 848, 857, 859, 860, 865, 866, 869, 870, 876, 884, 894, 898, 900, 911, 917, 922, 945, 960, 989, 994, 1039, 1109, 1119, 1120, 1178, 1185, 1190, 1214, 1225, 1244, 1265, 1266, 1267, 1282, 1305, 1321, 1340, 1355, 1356, 1358, 1362, 1363, 1370], "one_to_mani": [243, 339, 874, 945], "one_to_on": [243, 339, 874, 945], "oneormoredatatyp": [40, 166, 339], "ones": [642, 644, 646, 648, 650, 653, 655, 657, 830, 951], "onf": [703, 1284], "onli": [1, 5, 10, 13, 20, 30, 37, 38, 40, 46, 50, 51, 56, 59, 91, 124, 133, 135, 138, 139, 140, 143, 144, 146, 148, 150, 152, 155, 156, 157, 158, 161, 162, 163, 164, 168, 172, 182, 192, 211, 212, 215, 217, 220, 229, 230, 241, 244, 245, 248, 263, 271, 273, 274, 293, 295, 296, 297, 308, 309, 325, 339, 349, 351, 353, 365, 417, 418, 431, 436, 458, 466, 468, 488, 497, 507, 577, 578, 585, 586, 602, 603, 604, 605, 606, 607, 608, 609, 610, 619, 631, 677, 687, 689, 701, 739, 755, 792, 830, 854, 857, 859, 860, 861, 870, 875, 876, 894, 895, 912, 914, 928, 945, 951, 958, 959, 960, 1024, 1027, 1045, 1071, 1081, 1099, 1106, 1113, 1121, 1193, 1218, 1258, 1268, 1270, 1282, 1315, 1318, 1321, 1340, 1349, 1352, 1368, 1369, 1371], "onlin": [217, 339, 1106, 1340], "ont": [687, 689, 1268, 1270], "onto": 168, "oof": [702, 1283, 1358, 1363], "op": [20, 138, 139, 172, 268, 339, 585, 632, 830, 878, 892, 945, 1340], "opac": [339, 342, 1340, 1345], "opaqu": 928, "open": [40, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 339, 431, 830, 857, 945], "openoffic": 149, "openpyxl": [143, 160], "oper": [4, 40, 50, 59, 91, 100, 103, 110, 117, 123, 125, 126, 127, 128, 129, 135, 138, 140, 202, 217, 220, 222, 228, 234, 246, 248, 255, 259, 261, 262, 263, 266, 267, 269, 271, 274, 275, 280, 282, 291, 297, 298, 303, 306, 307, 317, 318, 339, 348, 349, 352, 383, 423, 424, 425, 426, 427, 428, 482, 483, 498, 500, 503, 505, 529, 557, 558, 559, 560, 561, 562, 569, 576, 595, 598, 600, 601, 602, 603, 605, 607, 609, 610, 613, 614, 615, 618, 619, 624, 631, 660, 663, 729, 737, 744, 745, 747, 758, 759, 763, 775, 809, 820, 830, 842, 850, 854, 856, 861, 866, 869, 874, 884, 885, 891, 895, 899, 900, 904, 911, 914, 921, 945, 989, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1096, 1097, 1106, 1116, 1118, 1145, 1173, 1174, 1175, 1176, 1177, 1178, 1192, 1204, 1205, 1218, 1238, 1244, 1280, 1315, 1320, 1321, 1322, 1340, 1359, 1367, 1368], "operand": [737, 830], "opp": 951, "oppos": 755, "opposit": [282, 339, 383, 562, 663, 830, 900, 945, 989, 1178, 1244, 1340], "opt": [301, 339], "optim": [46, 47, 48, 49, 57, 58, 150, 152, 155, 156, 157, 241, 246, 262, 266, 273, 304, 339, 847, 851, 852, 862, 880, 889, 901, 909, 918, 919, 928, 945, 1023, 1239, 1340], "optimis": [140, 248, 274, 325, 339, 945, 949, 1193, 1241, 1340, 1371], "optimist": 14, "option": [2, 3, 4, 5, 6, 7, 30, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 51, 67, 69, 138, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 165, 166, 167, 168, 171, 172, 173, 182, 183, 208, 224, 229, 239, 244, 254, 279, 286, 292, 303, 306, 308, 339, 396, 431, 436, 527, 585, 586, 592, 619, 640, 641, 643, 645, 647, 649, 652, 654, 656, 669, 677, 687, 689, 701, 703, 741, 812, 820, 830, 842, 851, 857, 870, 874, 875, 884, 898, 904, 911, 912, 920, 945, 951, 1001, 1045, 1143, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1251, 1258, 1268, 1270, 1282, 1284, 1317, 1329, 1340, 1358, 1363, 1370], "optional_memb": [519, 830, 1133, 1340], "or_": 830, "oracl": 141, "orang": [204, 320, 321, 323, 324, 326, 327, 329, 331, 332, 339, 409, 736, 830, 923, 924, 926, 927, 929, 930, 932, 934, 935, 1363], "orc": 185, "order": [10, 40, 46, 47, 48, 49, 51, 57, 63, 126, 138, 140, 159, 161, 162, 163, 164, 199, 203, 204, 211, 212, 213, 220, 228, 229, 243, 245, 255, 261, 262, 263, 267, 271, 273, 275, 276, 280, 285, 296, 297, 302, 304, 309, 339, 364, 384, 389, 408, 409, 434, 435, 494, 540, 557, 564, 570, 619, 624, 629, 639, 660, 661, 662, 671, 672, 702, 709, 710, 711, 712, 726, 735, 736, 738, 739, 741, 753, 809, 820, 830, 841, 846, 854, 859, 860, 861, 866, 869, 870, 874, 876, 884, 885, 891, 894, 895, 899, 903, 904, 908, 909, 945, 949, 950, 951, 970, 990, 995, 1013, 1022, 1043, 1044, 1110, 1140, 1156, 1173, 1180, 1186, 1212, 1216, 1223, 1238, 1240, 1242, 1253, 1283, 1308, 1325, 1326, 1327, 1329, 1340, 1349, 1352, 1358, 1367, 1368, 1371], "order_bi": [619, 830], "ordin": [459, 629, 830, 1072, 1216, 1340, 1369], "ordinal_dai": [444, 478], "org": [20, 41, 42, 124, 140, 141, 144, 146, 194, 195, 196, 205, 339, 593, 696, 901, 945, 953, 954, 1277], "orient": [52, 54, 98, 127, 129, 259, 339, 945, 1349], "origin": [51, 138, 139, 152, 211, 212, 220, 267, 304, 339, 434, 435, 462, 463, 476, 494, 540, 578, 602, 619, 631, 632, 633, 634, 635, 637, 678, 684, 693, 751, 752, 830, 859, 860, 866, 891, 909, 945, 1043, 1044, 1075, 1076, 1089, 1110, 1156, 1220, 1221, 1222, 1224, 1259, 1265, 1274, 1340], "orjson": 134, "orld": 1290, "orson": 134, "other": [1, 20, 36, 40, 45, 58, 59, 123, 137, 138, 139, 140, 143, 152, 157, 161, 162, 163, 164, 212, 214, 217, 220, 243, 244, 245, 254, 255, 263, 267, 272, 274, 277, 278, 301, 306, 308, 311, 313, 314, 337, 339, 342, 348, 352, 354, 364, 365, 418, 433, 468, 482, 483, 494, 498, 503, 505, 515, 519, 529, 536, 558, 559, 560, 561, 576, 582, 588, 598, 600, 613, 614, 618, 633, 634, 665, 672, 701, 728, 729, 734, 737, 744, 746, 748, 753, 756, 757, 758, 759, 767, 774, 794, 796, 799, 808, 812, 814, 830, 842, 852, 866, 874, 875, 876, 884, 885, 891, 896, 897, 911, 912, 915, 916, 917, 945, 951, 960, 1027, 1042, 1081, 1096, 1097, 1098, 1106, 1116, 1118, 1133, 1145, 1152, 1174, 1175, 1176, 1177, 1192, 1204, 1205, 1220, 1221, 1323, 1331, 1339, 1340, 1345, 1355, 1368], "other_df": [243, 339], "other_lf": [874, 945], "otherwis": [38, 140, 143, 150, 155, 167, 170, 174, 224, 248, 255, 274, 277, 296, 301, 325, 339, 388, 393, 414, 418, 429, 484, 485, 486, 487, 569, 578, 589, 619, 623, 624, 626, 631, 666, 676, 679, 683, 688, 690, 695, 699, 700, 703, 714, 741, 745, 774, 777, 786, 792, 820, 830, 885, 896, 928, 945, 950, 994, 998, 1019, 1027, 1039, 1100, 1101, 1102, 1103, 1185, 1193, 1212, 1214, 1218, 1239, 1241, 1248, 1257, 1260, 1264, 1269, 1271, 1276, 1280, 1281, 1284, 1295, 1329, 1340, 1360], "our": 197, "out": [8, 14, 38, 46, 47, 48, 49, 105, 130, 157, 160, 168, 172, 220, 271, 274, 339, 375, 393, 544, 546, 676, 679, 688, 820, 866, 894, 945, 981, 998, 1160, 1162, 1257, 1260, 1269, 1366], "outcom": [619, 830], "outer": [51, 308, 339, 912, 945], "outermost": 50, "outlin": 7, "output": [0, 8, 30, 37, 40, 41, 42, 43, 44, 45, 46, 199, 207, 241, 248, 252, 255, 261, 263, 273, 277, 279, 289, 302, 309, 313, 339, 351, 353, 376, 408, 409, 414, 429, 468, 548, 569, 577, 578, 589, 592, 603, 626, 633, 675, 691, 695, 735, 736, 741, 745, 746, 747, 748, 758, 759, 760, 788, 789, 791, 792, 796, 814, 830, 842, 846, 856, 862, 880, 884, 885, 896, 898, 908, 915, 928, 945, 958, 959, 982, 1013, 1019, 1039, 1081, 1164, 1193, 1214, 1256, 1272, 1276, 1325, 1329, 1340], "output_path": [593, 901, 945], "outsid": [418, 830, 1027, 1340], "over": [59, 132, 138, 139, 140, 143, 149, 152, 157, 168, 169, 199, 217, 240, 241, 242, 248, 255, 272, 273, 274, 286, 302, 303, 317, 325, 339, 343, 408, 409, 428, 431, 485, 493, 577, 578, 589, 591, 592, 593, 594, 595, 603, 604, 629, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 735, 736, 764, 765, 778, 791, 792, 804, 809, 830, 846, 851, 885, 904, 908, 920, 928, 942, 945, 951, 1013, 1038, 1101, 1106, 1193, 1227, 1228, 1230, 1234, 1325, 1340, 1368], "overflow": [410, 426, 427, 718, 730, 830, 848, 945, 1014, 1036, 1037, 1299, 1311, 1340], "overhead": [50, 91, 152, 155, 156, 157], "overlap": [678, 685, 687, 689, 1259, 1266, 1268, 1270], "overrid": [1, 40, 123, 125, 126, 127, 128, 129, 138, 140, 141, 143, 147, 148, 149, 156, 165, 166, 172, 174, 339, 945], "overridden": [40, 123, 125, 127, 129, 147, 148, 156, 174, 339, 945], "overview": [339, 830, 842, 945, 1340, 1367, 1371], "overwrit": [14, 38, 39, 123, 125, 126, 127, 129, 134, 138, 139, 147, 148, 152, 156, 196, 308, 339, 350, 728, 830, 912, 945], "overwrite_schema": [39, 339], "ow": 708, "own": [820, 1321, 1340, 1371], "p": [53, 262, 339, 623, 812, 830, 888, 945, 951, 1269, 1271, 1353], "p13dt14h0": 468, "p1dt42": 468, "pa": [39, 123, 158, 339, 809], "pa_tabl": 809, "pacif": [437, 1046], "pack": [259, 339], "packag": [32, 33, 34, 135, 140, 339, 343, 436, 755, 1045], "pad": [697, 698, 723, 1278, 1279, 1304], "pad_end": [698, 1279], "pad_start": [697, 723, 1278, 1304], "page": [45, 49, 144, 150, 155, 157, 339, 830, 842, 945, 1340, 1367], "pair": [123, 125, 126, 127, 129, 147, 148, 156, 268, 339, 892, 945, 1371], "pairwis": [205, 339], "panda": [38, 124, 128, 134, 160, 220, 229, 267, 298, 304, 306, 339, 455, 456, 734, 809, 830, 866, 870, 891, 909, 911, 945, 1068, 1069, 1322, 1323, 1340, 1350, 1352, 1368], "pandas_df": 1368, "pane": [40, 339], "panic": 106, "pap": 1271, "papa": 690, "papai": [690, 1271], "papaya": [690, 703, 714, 1271, 1284, 1295], "parallel": [57, 59, 132, 141, 150, 157, 229, 244, 246, 262, 278, 314, 339, 428, 541, 741, 820, 830, 842, 870, 874, 875, 897, 916, 928, 945, 1038, 1157, 1329, 1340], "parallelis": [248, 325, 339, 1193, 1340], "parallelstrategi": [150, 157], "param": [40, 123, 125, 126, 127, 129, 138, 139, 147, 148, 152, 156, 167, 168, 172, 272, 339, 945], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 78, 82, 92, 98, 107, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 180, 181, 182, 196, 197, 199, 200, 201, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 239, 241, 242, 243, 244, 245, 247, 248, 252, 254, 255, 258, 259, 261, 262, 263, 265, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 322, 324, 325, 331, 333, 339, 348, 350, 351, 352, 353, 354, 364, 371, 372, 375, 376, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 408, 409, 410, 411, 415, 418, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 436, 438, 440, 441, 446, 458, 461, 462, 463, 464, 465, 467, 468, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 513, 514, 515, 519, 527, 529, 531, 536, 537, 538, 539, 541, 544, 545, 546, 547, 548, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 576, 577, 578, 585, 586, 592, 593, 594, 598, 600, 603, 604, 605, 606, 607, 608, 613, 614, 618, 619, 620, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 723, 724, 726, 728, 729, 731, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 830, 846, 848, 849, 851, 852, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 874, 875, 876, 879, 880, 884, 885, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 925, 927, 928, 934, 936, 945, 950, 951, 955, 957, 958, 959, 960, 970, 977, 978, 981, 982, 989, 990, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1013, 1014, 1015, 1020, 1026, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1049, 1050, 1055, 1071, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1089, 1092, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1108, 1109, 1110, 1114, 1115, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1140, 1143, 1147, 1152, 1153, 1154, 1155, 1157, 1160, 1161, 1162, 1163, 1164, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1186, 1193, 1205, 1209, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1247, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1304, 1305, 1308, 1312, 1315, 1316, 1317, 1318, 1319, 1321, 1322, 1325, 1326, 1329, 1330, 1331, 1340, 1349, 1350, 1351, 1352, 1353, 1355, 1360, 1363, 1368], "parameteris": 140, "parametr": 842, "paramount": [880, 945], "parent": [40, 70, 222, 339], "parenthes": 18, "parquet": [45, 49, 150, 151, 157, 185, 339, 842, 945], "parquetcompress": [45, 339], "pars": [37, 46, 137, 138, 139, 141, 143, 148, 149, 150, 152, 155, 156, 157, 199, 228, 277, 278, 282, 285, 302, 313, 314, 318, 339, 409, 418, 515, 619, 633, 634, 672, 692, 701, 717, 718, 728, 736, 746, 748, 753, 756, 757, 758, 759, 767, 780, 794, 796, 799, 808, 810, 812, 814, 820, 830, 846, 869, 896, 897, 900, 903, 908, 915, 916, 921, 945, 1027, 1128, 1220, 1221, 1244, 1273, 1298, 1299, 1340, 1349], "parseerror": [718, 1299], "parser": [138, 143], "part": [123, 143, 192, 197, 296, 301, 339, 619, 685, 705, 706, 830, 862, 889, 901, 917, 945, 955, 1266, 1286, 1287, 1364], "parti": [577, 830], "partial": [126, 138, 152, 339, 945], "particip": [40, 339], "particular": [39, 138, 143, 144, 146, 199, 215, 302, 339, 408, 409, 735, 736, 830, 846, 908, 945, 1013, 1099, 1325, 1340], "partit": [45, 141, 150, 153, 155, 157, 158, 242, 261, 339, 619, 830], "partition_bi": [45, 139, 242, 339, 619, 830], "partition_chunk_size_byt": [45, 339], "partition_col": [45, 141, 339], "partition_df": 139, "partition_index": 184, "partition_num": 141, "partition_on": 141, "partition_rang": 141, "partitioned_object": [45, 339], "pass": [32, 33, 34, 36, 38, 39, 40, 45, 51, 98, 125, 134, 135, 137, 140, 141, 143, 150, 152, 155, 158, 161, 163, 166, 168, 170, 172, 199, 205, 209, 228, 229, 231, 244, 247, 261, 262, 263, 268, 271, 277, 282, 285, 290, 298, 301, 302, 309, 313, 318, 339, 383, 409, 436, 446, 458, 462, 468, 491, 512, 562, 577, 578, 593, 619, 623, 633, 634, 639, 663, 672, 701, 708, 709, 710, 736, 745, 753, 755, 780, 812, 820, 826, 830, 846, 858, 869, 870, 872, 875, 880, 888, 892, 894, 896, 900, 901, 903, 908, 915, 920, 921, 928, 945, 950, 989, 1045, 1055, 1075, 1081, 1107, 1122, 1147, 1178, 1193, 1220, 1221, 1244, 1282, 1289, 1290, 1291, 1312, 1322, 1340, 1353, 1368], "pass_nam": [578, 830], "pass_name_to_appli": [135, 830], "password": [138, 141, 144, 146], "past": [36, 339, 880, 945], "pat": [688, 1269], "patch": 69, "path": [3, 6, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 208, 279, 339, 431, 592, 593, 596, 662, 830, 857, 898, 901, 945, 949, 1242, 1274, 1340, 1371], "pathlib": [35, 37, 41, 42, 45, 152, 339], "pattern": [94, 138, 139, 143, 152, 155, 156, 157, 241, 339, 411, 415, 587, 676, 677, 678, 681, 684, 685, 686, 687, 688, 689, 699, 700, 701, 707, 928, 951, 1015, 1020, 1239, 1241, 1257, 1258, 1259, 1262, 1265, 1266, 1267, 1268, 1269, 1270, 1280, 1281, 1282, 1288, 1340, 1363], "paya": 714, "pc": 945, "pct": 168, "pct_chang": [830, 1340], "pd": [124, 128, 734, 809, 830, 1322, 1323, 1340, 1350, 1368], "pd_df": 128, "pd_frame": 809, "pd_seri": 128, "pdsh": [132, 139], "pea": 690, "peak": [273, 339, 621, 622, 830, 1210, 1211, 1340], "peak_max": [830, 1340], "peak_min": [830, 1340], "pear": [690, 703, 714, 1271, 1284, 1295], "pearson": [205, 339, 527, 669, 760, 830, 1143, 1251, 1340], "penalti": [713, 715, 716, 1294, 1296, 1297], "per": [14, 37, 40, 46, 135, 143, 166, 168, 199, 227, 259, 260, 263, 278, 285, 302, 314, 328, 330, 331, 339, 375, 409, 541, 544, 546, 577, 578, 602, 603, 605, 607, 609, 610, 672, 736, 741, 753, 830, 846, 897, 903, 908, 916, 931, 933, 934, 945, 981, 1157, 1160, 1162, 1329, 1340], "percent": [620, 830, 1209, 1340], "percentag": [165, 168, 172, 620, 830, 1209, 1340], "percentil": [207, 339, 856, 945, 1040, 1340], "perform": [38, 45, 47, 49, 51, 96, 101, 103, 108, 110, 117, 124, 138, 139, 140, 144, 148, 150, 152, 155, 156, 157, 196, 220, 228, 229, 243, 244, 245, 248, 266, 267, 271, 273, 274, 297, 325, 339, 399, 404, 407, 413, 414, 498, 569, 577, 578, 619, 639, 677, 687, 689, 694, 695, 701, 713, 715, 716, 830, 866, 870, 874, 875, 876, 891, 894, 903, 918, 919, 945, 1004, 1009, 1012, 1018, 1019, 1193, 1258, 1268, 1270, 1275, 1276, 1282, 1294, 1296, 1297, 1321, 1340], "perhap": [303, 339], "period": [138, 139, 152, 229, 271, 339, 463, 476, 484, 486, 487, 620, 639, 769, 770, 772, 773, 817, 818, 830, 870, 894, 945, 1076, 1089, 1100, 1102, 1103, 1209, 1340], "persist": 1355, "phase": [38, 307, 339], "philadelphia": [699, 700], "phone": [721, 1302], "physic": [50, 63, 91, 138, 139, 244, 263, 339, 734, 830, 847, 874, 875, 945, 1021, 1323, 1340], "pi": [10, 430, 830, 1029, 1031, 1249, 1313, 1340, 1361, 1365], "pick": [169, 820], "pickl": [431, 830, 857, 945], "pip": [436, 755, 1045], "pipe": [339, 830, 945], "pipelin": [143, 301, 339], "pitfal": 108, "pivot": [307, 339, 951], "pivot_long": [306, 339, 911, 945], "pivot_wid": [263, 339], "pivotagg": [263, 339], "pixel": [40, 339], "pk": [481, 830, 1095, 1340], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 78, 82, 90, 91, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 174, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 830, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 950, 951, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1117, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1340, 1345, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1369, 1371], "pl_frame": 809, "place": [10, 11, 37, 46, 192, 210, 217, 233, 234, 263, 269, 274, 285, 311, 339, 343, 364, 376, 384, 548, 564, 671, 672, 753, 830, 903, 945, 960, 970, 982, 990, 1106, 1164, 1180, 1217, 1253, 1340], "placehold": 779, "plai": [12, 759], "plain": [862, 945], "plan": [244, 246, 339, 431, 830, 847, 851, 857, 862, 874, 875, 898, 901, 945, 1370], "plan_typ": 945, "plane": [751, 752], "plantypeprefer": 945, "platform": 160, "ple": 1363, "pleas": [128, 140, 141, 220, 229, 254, 267, 339, 343, 485, 761, 774, 830, 866, 870, 884, 891, 945, 1101, 1340], "plenti": 951, "plot": [339, 889, 901, 945, 1340], "plu": [429, 574, 830, 1039, 1190, 1214, 1340, 1362], "plugin": [0, 830, 842], "plugin_path": 135, "point": [10, 11, 31, 32, 33, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 71, 72, 73, 133, 134, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 211, 218, 229, 245, 246, 286, 296, 301, 308, 339, 342, 343, 417, 428, 429, 434, 463, 464, 492, 497, 498, 509, 522, 523, 557, 578, 626, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 658, 660, 757, 788, 789, 830, 851, 852, 859, 862, 864, 870, 876, 880, 892, 904, 912, 945, 1022, 1024, 1038, 1039, 1043, 1076, 1077, 1108, 1113, 1123, 1173, 1214, 1226, 1229, 1231, 1232, 1236, 1238, 1319, 1324, 1340, 1345, 1368], "pointer": [215, 339, 1099, 1340], "poison": [611, 612, 830, 1202, 1203, 1340], "pola": 339, "polar": [1, 190, 339, 342, 343, 829, 830, 836, 842, 945, 949, 950, 951, 1340, 1344, 1345, 1367, 1368, 1370], "polars_df": 1368, "polars_file_cache_ttl": [148, 152, 155, 156], "polars_hypothesis_profil": [171, 173], "polars_max_thread": 174, "polars_seri": 1368, "polars_verbos": [851, 945], "polarsdatafram": 196, "polarsdataset": [301, 339], "polarsdatatyp": [60, 70, 78, 138, 139, 152, 165, 166, 167, 168, 169, 172, 200, 248, 296, 301, 339, 396, 410, 488, 577, 578, 633, 634, 692, 776, 790, 791, 792, 802, 805, 821, 826, 830, 848, 945, 951, 1001, 1014, 1193, 1220, 1221, 1273, 1340], "polarsintegertyp": [750, 784, 785], "polarstemporaltyp": [713, 1294], "polarstyp": 59, "pool": [14, 58, 174, 175, 852, 945], "poor": 140, "pop2": [244, 339, 875, 945], "popul": [244, 339, 875, 945], "port": [38, 138, 140, 141, 144, 146, 339], "portion": 1363, "pos_a": 1363, "posit": [40, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 184, 197, 209, 216, 228, 261, 277, 278, 282, 285, 305, 313, 314, 318, 339, 383, 484, 486, 487, 488, 562, 619, 624, 626, 663, 672, 686, 699, 700, 718, 728, 751, 752, 753, 756, 757, 758, 759, 776, 808, 812, 826, 830, 858, 863, 869, 896, 897, 900, 903, 910, 915, 916, 921, 945, 951, 989, 1100, 1102, 1103, 1178, 1212, 1214, 1244, 1267, 1299, 1340, 1369], "position": 1340, "possibl": [40, 45, 49, 98, 100, 125, 126, 129, 138, 143, 165, 168, 172, 228, 241, 248, 273, 304, 325, 339, 575, 578, 589, 640, 706, 740, 830, 851, 869, 903, 909, 945, 1193, 1226, 1287, 1340], "post": [51, 69, 945], "postgresql": [38, 140, 141, 339, 619, 830, 1366], "potenti": [108, 110, 135, 152, 155, 156, 241, 272, 274, 339, 602, 699, 700, 854, 856, 861, 895, 914, 945, 1280, 1281], "pow": [830, 1340, 1361], "pow_n": 53, "power": [810, 1212, 1340, 1362], "powersofn": 53, "pre": [569, 578, 626, 802, 805, 821, 830, 1214, 1340], "preced": [168, 951], "precis": [10, 11, 37, 40, 46, 67, 140, 241, 273, 274, 293, 296, 301, 339, 438, 717, 788, 945, 951, 1047, 1298], "predefin": [263, 339], "predic": [39, 46, 47, 48, 49, 57, 58, 133, 152, 155, 156, 157, 158, 200, 220, 239, 244, 245, 267, 272, 339, 410, 494, 743, 778, 820, 830, 851, 852, 862, 866, 875, 876, 880, 889, 891, 892, 901, 918, 919, 945, 1110, 1239, 1241, 1340], "predicate_pushdown": [46, 47, 48, 49, 57, 58, 851, 852, 862, 880, 889, 901, 945], "predict": [266, 309, 339], "prefer": [138, 139, 143, 152, 173, 199, 217, 241, 248, 272, 273, 302, 325, 339, 408, 409, 488, 578, 735, 736, 830, 846, 908, 945, 949, 1013, 1106, 1193, 1325, 1340, 1350, 1371], "prefilt": 157, "prefix": [39, 138, 139, 152, 192, 339, 350, 398, 415, 468, 587, 603, 606, 607, 609, 610, 707, 710, 711, 723, 830, 951, 1003, 1020, 1288, 1292, 1304], "prefix_": 606, "prefix_a": 606, "prefix_b": 606, "prefix_field": [604, 608], "presenc": [777, 786, 951], "present": [126, 168, 224, 339, 519, 593, 709, 710, 830, 901, 945], "preserv": [211, 212, 220, 228, 243, 245, 248, 267, 297, 298, 339, 434, 435, 436, 455, 456, 494, 540, 619, 633, 666, 683, 830, 859, 860, 866, 874, 876, 891, 945, 1043, 1044, 1045, 1110, 1156, 1220, 1248, 1264, 1322, 1340], "pressur": [49, 138, 139, 148, 150, 152, 156, 157, 664, 830, 945, 1245, 1340], "presum": [577, 830], "prev_pow2": 53, "prevent": [297, 339, 350, 426, 427, 602, 730, 830, 945, 1036, 1037, 1311, 1340], "preview": [227, 339], "previou": [53, 192, 339, 342, 436, 602, 603, 605, 607, 609, 610, 620, 726, 830, 1045, 1209, 1340, 1345], "previous": [2, 3], "price": [339, 342, 1371], "primari": [143, 949, 1368, 1371], "primarili": 1, "primit": [39, 339, 519, 830], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 139, 160, 161, 163, 213, 227, 228, 242, 246, 295, 317, 339, 512, 594, 769, 772, 830, 851, 872, 945, 951, 1133, 1318, 1340, 1371], "prior": [128, 339, 342, 1340, 1345], "prioriti": 169, "probabl": [481, 626, 830, 1095, 1214, 1340], "process": [14, 37, 46, 47, 48, 49, 57, 58, 138, 139, 140, 152, 174, 273, 339, 851, 852, 945], "process_index": [296, 339], "produc": [2, 3, 133, 168, 172, 200, 243, 339, 372, 410, 538, 589, 788, 791, 830, 874, 880, 945, 978, 1154], "product": [51, 205, 243, 339, 426, 433, 830, 874, 945, 1036, 1042, 1340], "profil": [32, 171, 173, 851, 945], "profile_nam": 32, "programmat": [207, 339, 856, 945], "progress": [67, 69, 73], "project": [46, 47, 48, 49, 57, 58, 133, 152, 154, 155, 156, 157, 671, 672, 830, 851, 852, 862, 880, 889, 892, 901, 945], "projection_pushdown": [46, 47, 48, 49, 57, 58, 851, 852, 862, 880, 889, 901, 945], "prompt": 130, "propag": [376, 483, 548, 611, 612, 614, 675, 691, 758, 759, 830, 982, 1097, 1164, 1202, 1203, 1205, 1256, 1272, 1340], "propagate_nan": 760, "proper": [245, 339, 876, 945], "properti": [39, 40, 183, 186, 187, 196, 203, 204, 213, 221, 232, 276, 281, 312, 316, 339, 342, 343, 853, 854, 861, 895, 914, 919, 945, 950, 951, 1094, 1112, 1201, 1243, 1340, 1345, 1371], "proport": [741, 830, 1329, 1340], "protocol": [39, 124, 140, 141, 196, 339], "prototyp": 826, "provid": [31, 32, 33, 34, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 138, 139, 141, 142, 143, 148, 150, 152, 153, 154, 155, 156, 157, 168, 172, 182, 220, 224, 239, 267, 286, 296, 339, 342, 393, 394, 468, 488, 509, 569, 577, 578, 679, 680, 684, 692, 693, 709, 710, 711, 712, 780, 812, 830, 842, 851, 866, 891, 904, 920, 942, 945, 998, 999, 1081, 1123, 1142, 1193, 1260, 1261, 1265, 1273, 1274, 1319, 1340, 1353, 1360, 1363, 1368, 1371], "provis": 843, "prune": [150, 155, 157, 880, 945], "pt0": 468, "public": [141, 339, 830, 842, 945, 1340, 1367], "pulp": 1349, "pure": [40, 339], "purpos": [601, 830, 945], "push": [152, 155, 156, 157, 158, 200, 339, 410, 830], "pushdown": [46, 47, 48, 49, 57, 58, 133, 851, 852, 862, 880, 889, 892, 901, 918, 919, 945, 1239, 1241, 1340], "put": [37, 46, 69, 339, 343, 945], "pwd": 140, "py": 154, "pyarrow": [39, 45, 123, 128, 138, 141, 142, 144, 146, 150, 153, 158, 160, 291, 297, 298, 339, 809, 842, 1315, 1321, 1322, 1340, 1350, 1352, 1368], "pyarrow_opt": [45, 142, 150, 153, 339], "pyarrow_t": 1368, "pycapsul": [123, 124, 195, 954], "pycapsuleinterfac": [124, 195, 954], "pydant": 160, "pyiceberg": [154, 160], "pyodbc": [38, 339], "pyodbc_uri": [38, 339], "pyspark": 174, "pytest": [161, 163], "python": [0, 32, 33, 34, 41, 42, 69, 80, 94, 124, 138, 139, 144, 146, 160, 161, 163, 196, 241, 248, 273, 274, 293, 325, 339, 431, 436, 440, 498, 577, 578, 686, 755, 769, 770, 772, 773, 817, 818, 820, 830, 836, 857, 928, 945, 949, 950, 1045, 1049, 1059, 1060, 1061, 1065, 1193, 1267, 1320, 1340, 1344, 1367], "pythondatatyp": [60, 78, 200, 339, 826, 848, 945, 951], "pythonliter": [961, 1004, 1009, 1012, 1111, 1144, 1194, 1195, 1196, 1197, 1239, 1340], "pytorch": [301, 339, 1324, 1340], "q": [274, 339, 812, 1340, 1345, 1353], "q1": [40, 339], "q2": [40, 339], "q3": [40, 339], "q4": [40, 339], "qcut": [429, 830, 1039, 1340], "qhoo": 1371, "qmark": 140, "qqr": 951, "quad": [485, 830, 1101, 1340], "qualifi": [38, 339], "quantifi": [685, 1266], "quantil": [339, 626, 649, 650, 830, 945, 1214, 1231, 1340, 1357], "quantile_cont": 1361, "quantile_disc": 1361, "quarter": [229, 244, 271, 309, 339, 458, 463, 476, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089, 1364], "queri": [46, 47, 48, 49, 57, 58, 140, 141, 144, 152, 155, 156, 157, 217, 246, 262, 286, 339, 569, 577, 578, 693, 809, 830, 851, 852, 862, 889, 901, 904, 918, 919, 920, 928, 937, 945, 1106, 1193, 1274, 1340, 1349, 1350, 1352, 1356, 1367, 1369, 1370], "quick": [826, 1040, 1340, 1371], "quit": [244, 339, 875, 945], "quot": [37, 38, 46, 138, 139, 141, 152, 339, 721, 945, 1302], "quota_project_id": 34, "quote_char": [37, 46, 138, 139, 152, 339, 945], "quote_plu": 141, "quote_styl": [37, 46, 339, 945], "quotes_titl": 721, "quotient": 1362, "r": [138, 139, 152, 339, 584, 623, 678, 683, 684, 685, 686, 699, 700, 830, 951, 1259, 1264, 1265, 1266, 1267, 1280, 1281, 1295, 1353, 1363], "r1": 59, "r2": 59, "r3": 59, "rab": [676, 702, 1257, 1283, 1358], "rad": 1365, "radian": [430, 751, 830, 1361], "radix": [718, 1299], "rai": [751, 752], "raini": [699, 700, 1280, 1281], "rais": [1, 15, 16, 20, 39, 59, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 138, 139, 143, 149, 150, 152, 157, 161, 163, 196, 200, 224, 244, 263, 272, 297, 339, 375, 393, 410, 436, 461, 462, 544, 546, 589, 624, 626, 634, 676, 679, 688, 713, 715, 716, 718, 720, 771, 790, 830, 875, 920, 945, 981, 998, 1045, 1074, 1075, 1160, 1162, 1212, 1214, 1221, 1257, 1260, 1269, 1294, 1296, 1297, 1299, 1301, 1321, 1340], "raise_if_empti": [138, 139, 143, 149, 152], "raise_if_undetermin": 589, "raise_on_fail": 920, "raker": 134, "ram": [46, 47, 48, 49, 945], "ran": [135, 830], "random": [40, 41, 144, 159, 166, 230, 275, 339, 507, 557, 629, 660, 665, 741, 830, 842, 1121, 1173, 1216, 1238, 1247, 1329, 1340], "randomli": 167, "rang": [17, 40, 140, 141, 207, 215, 229, 242, 339, 355, 430, 436, 444, 454, 459, 460, 461, 463, 476, 477, 513, 750, 755, 758, 768, 769, 770, 771, 772, 773, 784, 785, 788, 789, 816, 817, 818, 830, 856, 870, 945, 951, 1040, 1045, 1053, 1067, 1072, 1073, 1074, 1076, 1089, 1090, 1099, 1209, 1340, 1363], "rank": [364, 541, 753, 760, 775, 830, 970, 1157, 1340], "rankmethod": [629, 830, 1216, 1340], "rare": [437, 1046], "rather": [244, 339, 500, 577, 594, 626, 638, 723, 830, 875, 945, 1214, 1225, 1304, 1340], "raw": 141, "raw_output": [593, 901, 945], "re": [224, 229, 240, 304, 306, 339, 455, 456, 465, 468, 870, 909, 911, 945, 1068, 1069, 1078, 1081, 1368], "reach": [697, 698, 723, 1278, 1279, 1304], "read": [36, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 182, 208, 217, 339, 342, 431, 500, 820, 830, 857, 945, 1106, 1340, 1345], "read_arrow_batches_from_odbc": 140, "read_clipboard": [36, 339], "read_csv": [137, 143, 152], "read_csv_batch": 132, "read_databas": 141, "read_database_uri": 140, "read_excel": 149, "read_ndjson": 147, "read_od": 143, "read_opt": 143, "read_parquet": 157, "read_tabl": 150, "readabl": 826, "reader": [45, 49, 132, 133, 138, 139, 144, 146, 150, 339, 945], "readi": 938, "readthedoc": [40, 339], "real": [685, 1266], "realli": [428, 677, 701, 830, 1038, 1258, 1282, 1340], "realloc": [148, 152, 155, 156, 217, 339, 1106, 1340], "rearrang": [248, 339], "reason": [174, 207, 339, 569, 577, 830, 856, 945], "receiv": [51, 140, 152, 248, 262, 325, 339, 578, 623, 830, 888, 945, 1371], "recent": [161, 162, 163, 164, 297, 339, 620, 634, 830, 1209, 1221, 1321, 1340, 1352, 1368], "rechunk": [59, 123, 124, 128, 138, 139, 142, 144, 146, 148, 150, 152, 153, 155, 156, 157, 217, 339, 830, 1025, 1106, 1117, 1199, 1340], "recognis": [15, 16, 20, 951], "recommend": [40, 174, 207, 241, 246, 262, 339, 569, 847, 856, 945, 951], "record": [37, 42, 46, 134, 146, 158, 339, 945], "record_batch": [242, 339], "recordbatch": [123, 242, 339, 809, 1350, 1352, 1368], "recurs": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "red": [50, 90, 91, 325, 741, 830, 928, 1329, 1340], "redempt": 1349, "redshift": 141, "redshift_format": 185, "reduc": [49, 138, 139, 148, 150, 152, 155, 156, 157, 273, 326, 327, 329, 332, 339, 664, 765, 778, 830, 929, 930, 932, 935, 945, 1195, 1213, 1245, 1311, 1340], "reduct": [222, 339, 578, 830], "ref": [684, 686, 1265, 1267], "refer": [0, 32, 40, 94, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 205, 208, 339, 343, 431, 465, 468, 629, 684, 699, 700, 713, 715, 716, 720, 830, 857, 945, 1078, 1081, 1216, 1280, 1281, 1294, 1296, 1297, 1301, 1340], "referenc": [40, 339, 577, 699, 700, 726, 830, 1280, 1281, 1350, 1368], "reg": 134, "regard": [138, 760], "regardless": [128, 199, 228, 244, 302, 339, 409, 441, 693, 736, 820, 830, 846, 875, 908, 945, 1050, 1274], "regex": [92, 488, 584, 585, 587, 676, 678, 684, 685, 686, 688, 699, 700, 724, 776, 830, 951, 1257, 1259, 1265, 1266, 1267, 1269, 1280, 1281], "regexp_lik": 1361, "region": [40, 154, 339], "region_nam": 32, "regist": [1, 52, 53, 54, 55, 133, 135, 171, 173, 286, 339, 830, 904, 945, 949, 1349, 1350, 1352, 1353, 1354, 1355, 1368, 1370], "register_dataframe_namespac": [1, 53, 54, 55], "register_expr_namespac": [1, 52, 54, 55], "register_glob": [1351, 1353, 1355, 1368], "register_io_sourc": 949, "register_lazyframe_namespac": [1, 52, 53, 55], "register_mani": [1351, 1352, 1355], "register_plugin": 830, "register_plugin_funct": 830, "register_series_namespac": [1, 52, 53, 54], "registr": [286, 339, 809, 842, 904, 945, 1355, 1368], "regrid": [513, 830], "regular": [131, 241, 272, 273, 309, 316, 339, 488, 676, 677, 678, 682, 684, 685, 686, 687, 688, 689, 699, 700, 701, 755, 776, 826, 830, 919, 945, 951, 1257, 1258, 1259, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1280, 1281, 1282, 1366], "reinterpret": [830, 1340], "rel": [40, 141, 142, 153, 154, 161, 162, 163, 164, 339, 458, 484, 486, 487, 741, 830, 1071, 1100, 1102, 1103, 1329, 1340], "relat": [140, 192, 699, 700, 951, 1280, 1281, 1356], "releas": [58, 243, 339, 578, 830, 852, 874, 945, 1371], "release_year": 1349, "relev": 59, "reli": [243, 339, 874, 945], "reliabl": [90, 91], "remain": [138, 139, 152, 211, 212, 215, 220, 263, 267, 339, 434, 435, 494, 540, 633, 705, 706, 830, 859, 860, 866, 880, 891, 945, 1043, 1044, 1099, 1110, 1156, 1220, 1286, 1287, 1340, 1355], "remaind": [396, 706, 1001, 1287, 1362], "remap": 93, "remot": [138, 139, 144, 146, 945], "remov": [4, 138, 139, 152, 196, 209, 220, 294, 339, 488, 603, 708, 709, 710, 711, 712, 776, 830, 858, 866, 945, 1289, 1290, 1291, 1292, 1293, 1316, 1340, 1370], "removes_pronoun": 701, "removesuffix": 603, "renam": [1, 126, 138, 139, 175, 228, 277, 278, 313, 314, 318, 320, 339, 350, 500, 595, 596, 602, 603, 604, 605, 607, 609, 610, 726, 728, 808, 812, 830, 869, 896, 897, 915, 916, 921, 923, 945, 957, 1269, 1308, 1317, 1340, 1368], "rename_field": [705, 706, 1286, 1287], "render": [593, 901, 945], "render_as_str": 140, "reoconstruct": [274, 339], "repeat": [144, 155, 630, 632, 802, 821, 830], "repeat_bi": 830, "replac": [38, 39, 138, 139, 152, 218, 219, 269, 303, 306, 313, 314, 339, 342, 440, 462, 492, 577, 578, 634, 700, 701, 716, 830, 864, 911, 915, 916, 945, 1049, 1075, 1108, 1221, 1239, 1241, 1281, 1282, 1297, 1340, 1345, 1361], "replace_al": [634, 699, 830, 1220, 1221, 1280, 1340], "replace_column": 339, "replace_strict": [633, 830, 1220, 1340], "replace_time_zon": [437, 443, 445, 1051, 1052, 1079], "replace_with": [701, 1282], "replic": [734, 830, 1323, 1340], "report": [140, 215, 339, 696, 1099, 1277, 1340], "repr": [130, 411, 415, 468, 1015, 1020, 1081], "repres": [37, 40, 46, 65, 66, 68, 79, 83, 88, 123, 125, 127, 128, 129, 140, 263, 286, 287, 296, 297, 310, 317, 339, 414, 498, 522, 523, 565, 571, 577, 674, 690, 695, 699, 700, 703, 714, 742, 745, 762, 774, 776, 790, 791, 792, 801, 806, 807, 811, 819, 826, 830, 904, 905, 913, 945, 951, 1019, 1239, 1255, 1271, 1276, 1280, 1281, 1284, 1295, 1321, 1330, 1340, 1368], "represent": [10, 43, 44, 65, 66, 68, 83, 130, 279, 295, 339, 411, 413, 414, 415, 439, 444, 447, 449, 450, 451, 452, 453, 454, 457, 459, 460, 464, 477, 478, 480, 592, 734, 830, 862, 878, 898, 945, 1015, 1018, 1019, 1020, 1021, 1048, 1053, 1056, 1057, 1058, 1062, 1063, 1064, 1066, 1067, 1070, 1072, 1073, 1077, 1090, 1091, 1093, 1318, 1323, 1340, 1359], "request": 34, "requested_schema": [195, 954], "requir": [1, 32, 33, 34, 39, 40, 51, 59, 128, 140, 141, 161, 162, 163, 164, 177, 205, 211, 272, 296, 297, 298, 301, 339, 389, 411, 415, 484, 486, 487, 570, 578, 619, 642, 644, 646, 648, 650, 653, 655, 657, 664, 713, 715, 716, 738, 805, 830, 854, 859, 860, 861, 903, 914, 945, 995, 1098, 1100, 1102, 1103, 1186, 1245, 1280, 1294, 1296, 1297, 1321, 1322, 1326, 1340], "require_al": 951, "require_http": 177, "rerais": [58, 852, 945], "rerun": [217, 339, 1106, 1340], "resampl": [229, 339, 870, 945], "reset": [4, 192], "reset_index": [128, 229, 339, 870, 945], "reshap": [263, 297, 339, 542, 757, 830, 1158, 1340], "resolv": [220, 339, 440, 569, 853, 854, 861, 895, 914, 945], "resourc": [920, 949], "respect": [40, 138, 152, 339, 677, 687, 689, 701, 951, 1258, 1268, 1270, 1282, 1324, 1340], "respons": [141, 255, 339, 885, 945], "rest": [721, 1302], "restor": [192, 339, 342, 1340, 1345], "restore_default": 192, "restrict": [30, 706, 1287], "result": [13, 37, 43, 44, 45, 46, 47, 48, 49, 51, 59, 127, 128, 129, 140, 141, 143, 152, 155, 157, 158, 172, 217, 220, 229, 230, 243, 244, 245, 259, 263, 267, 271, 274, 279, 280, 282, 296, 297, 298, 309, 316, 318, 324, 339, 436, 463, 465, 468, 476, 484, 485, 486, 487, 491, 498, 507, 515, 527, 568, 569, 577, 578, 592, 619, 624, 626, 633, 634, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 662, 663, 683, 700, 704, 705, 716, 737, 741, 764, 765, 769, 771, 772, 773, 774, 789, 790, 791, 802, 805, 806, 807, 809, 821, 830, 847, 851, 856, 866, 870, 874, 875, 876, 880, 889, 891, 894, 898, 899, 900, 919, 921, 927, 938, 939, 945, 951, 960, 1076, 1078, 1081, 1089, 1100, 1102, 1103, 1106, 1107, 1121, 1128, 1143, 1184, 1193, 1212, 1214, 1220, 1221, 1222, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1242, 1244, 1264, 1285, 1286, 1297, 1321, 1322, 1329, 1340, 1350, 1356, 1368, 1369, 1371], "resultset": 140, "retain": [220, 267, 339, 866, 891, 945], "retri": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 339, 945], "retriev": [177, 178, 182, 224, 296, 339, 369, 370, 534, 535, 724, 801, 975, 976, 1150, 1151, 1305, 1319, 1340, 1356], "return": [1, 5, 6, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 101, 104, 112, 120, 123, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 174, 175, 182, 194, 197, 199, 201, 204, 205, 206, 210, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 228, 229, 231, 232, 233, 237, 239, 240, 241, 242, 243, 246, 247, 248, 250, 252, 257, 258, 259, 261, 262, 263, 268, 271, 272, 273, 274, 275, 279, 286, 289, 290, 296, 297, 298, 301, 302, 303, 304, 309, 312, 313, 314, 320, 322, 324, 325, 328, 333, 339, 351, 353, 356, 357, 358, 359, 360, 361, 364, 365, 369, 370, 371, 373, 375, 376, 387, 392, 393, 394, 395, 396, 397, 398, 408, 409, 413, 414, 419, 420, 421, 422, 423, 429, 430, 436, 437, 439, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 485, 490, 498, 501, 502, 504, 508, 509, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 534, 535, 537, 542, 544, 546, 547, 548, 550, 557, 567, 568, 575, 577, 578, 590, 592, 593, 594, 599, 623, 626, 628, 632, 633, 634, 635, 637, 638, 660, 661, 666, 667, 668, 675, 676, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 714, 718, 723, 731, 732, 733, 735, 736, 737, 739, 740, 741, 744, 745, 750, 751, 752, 753, 754, 755, 761, 763, 768, 769, 770, 771, 772, 773, 774, 777, 780, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 802, 805, 808, 809, 812, 815, 816, 817, 818, 820, 821, 830, 846, 849, 851, 852, 854, 855, 856, 861, 862, 868, 870, 871, 874, 878, 879, 880, 888, 889, 892, 894, 898, 901, 907, 908, 909, 914, 915, 916, 923, 925, 927, 931, 936, 938, 945, 950, 951, 953, 955, 958, 959, 960, 968, 969, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982, 993, 995, 997, 998, 999, 1001, 1002, 1013, 1017, 1018, 1019, 1026, 1032, 1033, 1039, 1040, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1099, 1101, 1105, 1106, 1111, 1115, 1122, 1123, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1158, 1160, 1162, 1163, 1164, 1166, 1173, 1183, 1184, 1191, 1193, 1198, 1207, 1214, 1220, 1221, 1222, 1223, 1224, 1225, 1238, 1240, 1248, 1256, 1257, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1283, 1284, 1285, 1286, 1287, 1295, 1299, 1304, 1312, 1315, 1322, 1325, 1327, 1328, 1329, 1331, 1340, 1349, 1350, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1366, 1368, 1369, 1370, 1371], "return_as_str": [227, 339, 594], "return_dtyp": [40, 248, 339, 577, 578, 633, 634, 744, 791, 792, 830, 1193, 1220, 1221, 1340], "return_typ": [296, 301, 339], "returns_scalar": [135, 577, 578, 792, 830], "reus": [57, 58, 192, 851, 852, 862, 889, 901, 945], "reusabl": 192, "rev": [245, 339, 876, 945], "revers": [199, 215, 302, 339, 409, 423, 424, 425, 426, 427, 603, 605, 607, 736, 757, 763, 830, 846, 908, 945, 1033, 1034, 1035, 1036, 1037, 1340, 1358, 1361], "reverse_": 605, "reverse_a": 605, "reverse_b": 605, "revert": [7, 9, 10], "rhap": [687, 689, 1270], "rhapsodi": [687, 689, 1270], "right": [9, 10, 15, 16, 18, 27, 40, 67, 138, 139, 161, 162, 163, 164, 229, 243, 244, 271, 308, 339, 429, 484, 485, 486, 487, 515, 558, 559, 560, 561, 626, 639, 642, 644, 646, 648, 650, 653, 655, 657, 661, 669, 756, 769, 770, 772, 773, 788, 789, 817, 818, 830, 870, 874, 875, 894, 912, 945, 1039, 1100, 1101, 1102, 1103, 1128, 1174, 1175, 1176, 1177, 1214, 1240, 1251, 1340, 1356, 1361], "right_left": [243, 339, 874, 945], "right_on": [243, 244, 308, 339, 874, 875, 912, 945], "rightmost": [661, 830, 1240, 1340, 1363], "rld": [708, 710, 1291], "rle": [638, 830, 1225, 1340], "rle_id": [637, 830, 1340], "rle_id_a": [638, 830], "rle_id_ab": [638, 830], "rmm": 920, "rn": [138, 139, 152], "role": [32, 141], "roll": [229, 339, 436, 455, 456, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 758, 806, 807, 830, 870, 945, 1045, 1068, 1069, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1340], "rollback": [456, 1069], "rolled_forward": 436, "rollforward": [455, 1068], "rolling_map": [830, 1340], "rolling_max": [830, 1340], "rolling_max_bi": 830, "rolling_mean": [830, 1340], "rolling_mean_bi": 830, "rolling_median": [830, 1340], "rolling_median_bi": 830, "rolling_min": [830, 1340], "rolling_min_bi": 830, "rolling_quantil": [830, 1340], "rolling_quantile_bi": 830, "rolling_row_max": [642, 830], "rolling_row_mean": [644, 830], "rolling_row_median": [646, 830], "rolling_row_min": [648, 830], "rolling_row_quantil": [650, 830], "rolling_row_std": [653, 830], "rolling_row_sum": [655, 830], "rolling_row_var": [657, 830], "rolling_skew": [830, 1340], "rolling_std": [830, 1340], "rolling_std_bi": 830, "rolling_sum": [640, 830, 1226, 1340], "rolling_sum_bi": 830, "rolling_var": [830, 1340], "rolling_var_bi": 830, "rollinggroupbi": [271, 339], "rollinginterpolationmethod": [207, 265, 331, 339, 627, 649, 650, 803, 830, 856, 890, 934, 945, 1040, 1215, 1231, 1340], "ronaldo": [684, 1265], "root": [142, 153, 416, 591, 602, 603, 605, 607, 609, 610, 673, 829, 830, 1023, 1254, 1340, 1362], "rotat": [339, 342, 1340, 1345], "round": [20, 40, 53, 130, 140, 339, 417, 421, 497, 659, 732, 830, 1024, 1113, 1237, 1340, 1361], "round_sig_fig": [830, 1340], "round_str": 1076, "round_td": 1076, "rounded_corn": 20, "row": [14, 20, 25, 37, 38, 40, 45, 46, 49, 51, 52, 54, 59, 98, 104, 112, 120, 126, 127, 128, 129, 130, 133, 134, 138, 139, 140, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 161, 162, 168, 197, 199, 200, 201, 211, 212, 217, 220, 222, 223, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 254, 255, 259, 263, 267, 271, 274, 275, 284, 290, 293, 295, 296, 301, 302, 304, 306, 307, 308, 315, 316, 320, 322, 324, 325, 333, 339, 343, 364, 365, 373, 388, 409, 410, 490, 498, 502, 508, 531, 542, 569, 619, 620, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 670, 672, 683, 692, 731, 736, 750, 753, 759, 761, 778, 782, 784, 785, 787, 789, 804, 806, 807, 815, 820, 830, 846, 849, 859, 860, 866, 867, 868, 870, 871, 874, 875, 876, 877, 879, 880, 884, 885, 891, 902, 907, 908, 909, 911, 912, 918, 919, 923, 925, 927, 928, 936, 945, 955, 970, 979, 1105, 1106, 1115, 1122, 1147, 1158, 1209, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1252, 1264, 1273, 1312, 1340, 1349, 1356, 1358, 1369, 1370, 1371], "row_group": [150, 157], "row_group_s": [45, 49, 339, 945], "row_height": [40, 339], "row_index": [40, 339], "row_index_nam": [138, 139, 144, 146, 148, 150, 152, 155, 156, 157], "row_index_offset": [138, 139, 144, 146, 148, 150, 152, 155, 156, 157], "row_nr": [315, 339, 918, 945], "row_tot": [40, 339], "rowname_col": [339, 343], "rows_by_kei": [241, 273, 292, 339], "rowserror": [272, 339], "rowtotalsdefinit": [40, 339], "rtol": [161, 162, 163, 164], "rtrim": 1361, "ru": 1363, "rule": [138, 150, 152, 157, 222, 339, 677, 701, 716, 1258, 1282, 1297], "run": [46, 47, 48, 49, 57, 58, 66, 140, 168, 171, 172, 173, 228, 243, 246, 248, 278, 304, 314, 325, 339, 414, 428, 541, 577, 578, 637, 638, 695, 808, 830, 851, 852, 862, 869, 874, 880, 884, 889, 897, 901, 909, 916, 920, 945, 949, 951, 1019, 1038, 1157, 1193, 1224, 1225, 1276, 1340, 1368, 1371], "runtim": 949, "runtimeerror": [297, 339, 1321, 1340], "rust": [37, 45, 46, 94, 106, 135, 143, 144, 146, 150, 248, 325, 339, 686, 945, 949, 1193, 1267, 1340], "s1": [50, 90, 91, 163, 164, 222, 339, 994, 1097, 1098, 1117, 1142, 1152, 1185, 1205, 1217, 1331, 1340], "s2": [1, 50, 90, 91, 163, 164, 222, 339, 994, 1025, 1042, 1097, 1098, 1117, 1133, 1142, 1152, 1185, 1199, 1205, 1217, 1331, 1340], "s3": [1, 39, 142, 153, 154, 157, 158, 339, 945, 994, 1185, 1340], "s_": 468, "s_bar": 1358, "s_dt": [468, 1363, 1364], "s_dt1": 1363, "s_dt2": 1363, "s_dtm": 468, "s_foo": 1358, "s_from_str_repr": [1318, 1340], "s_head_5": 690, "s_head_n": 690, "s_tail_5": 714, "s_tail_n": 714, "s_td": 468, "s_tm": [468, 1363, 1364], "safe": [631, 830, 1218, 1340], "sale": [619, 830], "salesforce_format": 185, "sam": 12, "same": [20, 39, 40, 50, 51, 57, 58, 59, 90, 91, 107, 144, 152, 161, 162, 163, 164, 166, 192, 220, 228, 244, 248, 263, 267, 273, 274, 285, 304, 313, 314, 318, 325, 339, 347, 354, 387, 413, 434, 435, 468, 494, 498, 500, 501, 504, 568, 582, 588, 619, 633, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 665, 672, 683, 694, 726, 826, 830, 851, 852, 866, 869, 875, 878, 880, 891, 903, 909, 915, 916, 921, 945, 951, 956, 993, 1018, 1043, 1044, 1049, 1081, 1184, 1193, 1220, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1264, 1275, 1331, 1340, 1354, 1356, 1364], "samoa": [437, 1046], "sampl": [138, 139, 325, 339, 665, 669, 788, 789, 830, 928, 1251, 1340, 1357], "sample_s": [138, 139], "sampled_from": 1371, "sandwich": [225, 339], "sat": [339, 342], "satisfi": [515, 830, 1128, 1340], "saturdai": [229, 339, 870, 945], "save": [2, 3, 6, 229, 244, 271, 309, 339, 437, 445, 458, 463, 476, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 774, 817, 818, 826, 830, 842, 870, 875, 894, 945, 1054, 1071, 1076, 1089], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [135, 197, 239, 248, 272, 282, 339, 414, 577, 661, 663, 690, 695, 703, 714, 790, 792, 830, 900, 945, 955, 1019, 1142, 1240, 1244, 1271, 1276, 1284, 1295, 1340], "scale": [28, 67, 215, 339, 397, 578, 623, 717, 830, 951, 1099, 1298, 1340], "scale_negative_even": [623, 830], "scan": [126, 129, 138, 139, 140, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 182, 339, 692, 945, 1273], "scan_csv": [46, 47, 48, 49, 138, 139, 945], "scan_parquet": [150, 158, 945], "scan_pyarrow_dataset": [150, 157], "scan_tabl": 190, "scatter": [339, 342, 1340, 1345], "scenario": 1340, "schedul": [58, 852, 945], "schema": [0, 1, 14, 28, 35, 38, 39, 52, 53, 54, 59, 98, 115, 116, 123, 125, 126, 127, 129, 133, 134, 138, 139, 140, 141, 143, 145, 147, 148, 149, 150, 151, 152, 155, 156, 157, 178, 180, 181, 182, 186, 188, 201, 202, 203, 209, 213, 215, 242, 246, 248, 255, 259, 268, 297, 301, 339, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 443, 568, 569, 578, 589, 604, 606, 608, 692, 744, 812, 830, 842, 849, 850, 853, 854, 858, 861, 880, 885, 892, 914, 928, 945, 951, 1028, 1273, 1340, 1349], "schema_mod": [39, 339], "schema_overrid": [123, 125, 126, 127, 128, 129, 138, 139, 140, 141, 143, 147, 148, 149, 152, 156, 242, 297, 339, 945, 951], "schemadefinit": [123, 125, 126, 127, 129, 147, 148, 156, 339, 945], "schemadict": [82, 123, 125, 126, 127, 128, 129, 133, 138, 140, 141, 143, 149, 150, 152, 155, 157, 339, 812, 880, 928, 945], "schemainitdatatyp": 950, "schindler": 1349, "scientif": [11, 37, 46, 339, 945], "scikit": [301, 339], "scipi": [527, 669, 830, 1143, 1251, 1340], "scope": [33, 34, 192, 841, 951, 1352, 1355, 1368], "score": [40, 263, 339], "script": [339, 342, 1340, 1345], "scroll": [40, 339], "sdiff": 560, "sdk": 177, "search": [244, 339, 569, 677, 687, 689, 701, 875, 903, 945, 1125, 1258, 1268, 1270, 1282, 1340], "search_sort": [830, 1340], "searchsortedsid": [661, 830, 1240, 1340], "searchstrategi": [165, 167, 168, 169, 170, 172], "season": [699, 700], "sec": [1364, 1371], "second": [37, 46, 148, 152, 155, 156, 161, 162, 163, 164, 229, 244, 271, 309, 339, 447, 450, 452, 453, 457, 458, 461, 463, 468, 475, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 699, 700, 713, 716, 771, 772, 773, 774, 816, 817, 818, 820, 830, 870, 875, 894, 945, 951, 1071, 1074, 1076, 1088, 1089, 1101, 1280, 1281, 1294, 1297, 1340, 1363, 1364, 1369, 1371], "second_part": [705, 706, 1286, 1287], "seconds_diff": 475, "secret": [154, 157], "section": [263, 339, 676, 684, 685, 688, 699, 700, 769, 770, 772, 773, 817, 818, 949, 1257, 1265, 1266, 1269, 1280, 1281], "secur": [431, 830, 857, 945], "see": [37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 57, 58, 66, 133, 135, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 168, 172, 182, 194, 205, 220, 229, 243, 262, 263, 267, 339, 343, 402, 403, 405, 406, 418, 468, 493, 527, 577, 669, 676, 684, 685, 688, 690, 699, 700, 714, 769, 770, 772, 773, 804, 817, 818, 826, 830, 851, 852, 866, 870, 891, 920, 945, 949, 951, 953, 1007, 1008, 1010, 1011, 1021, 1027, 1081, 1143, 1251, 1257, 1265, 1266, 1269, 1271, 1280, 1281, 1295, 1340, 1371], "seed": [159, 230, 275, 339, 507, 557, 629, 660, 665, 830, 1121, 1173, 1216, 1238, 1247, 1340], "seed_1": [230, 339, 507, 830, 1121, 1340], "seed_2": [230, 339, 507, 830, 1121, 1340], "seed_3": [230, 339, 507, 830, 1121, 1340], "seen": [468, 1081], "seen_group": 139, "select": [1, 8, 38, 51, 52, 53, 54, 95, 136, 138, 139, 140, 141, 142, 144, 146, 150, 152, 158, 167, 197, 198, 239, 240, 244, 248, 259, 262, 272, 278, 284, 286, 299, 305, 309, 316, 339, 347, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 373, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 395, 398, 399, 404, 407, 408, 409, 412, 416, 417, 419, 420, 421, 422, 428, 430, 432, 433, 434, 435, 438, 440, 441, 449, 455, 456, 458, 462, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 481, 484, 486, 487, 488, 489, 490, 491, 495, 497, 499, 502, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 520, 526, 527, 528, 530, 531, 541, 542, 569, 572, 573, 574, 575, 577, 578, 579, 580, 581, 585, 597, 599, 601, 602, 604, 606, 608, 611, 612, 616, 617, 618, 619, 621, 622, 625, 627, 628, 629, 630, 631, 632, 635, 636, 637, 640, 651, 658, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 689, 691, 696, 713, 724, 726, 727, 730, 731, 732, 733, 735, 736, 738, 739, 740, 741, 742, 745, 747, 749, 752, 753, 754, 757, 758, 760, 761, 762, 763, 766, 773, 774, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 793, 795, 797, 798, 800, 801, 804, 805, 809, 810, 811, 812, 813, 815, 819, 826, 830, 845, 851, 854, 875, 888, 897, 902, 904, 910, 917, 919, 920, 945, 951, 955, 1075, 1114, 1157, 1239, 1241, 1252, 1270, 1274, 1294, 1340, 1349, 1350, 1351, 1352, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370], "select_from": [167, 170, 172], "select_seq": [339, 945], "selector": [0, 40, 200, 209, 211, 212, 216, 254, 261, 263, 285, 294, 296, 301, 304, 306, 307, 339, 343, 468, 488, 585, 830, 842, 848, 858, 859, 860, 863, 884, 903, 909, 911, 945], "selectortyp": [40, 339, 951], "self": [1, 52, 53, 54, 55, 57, 58, 286, 317, 339, 809, 830, 851, 852, 862, 889, 901, 904, 917, 945, 960, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1028, 1033, 1106, 1110, 1124, 1191, 1193, 1206, 1210, 1211, 1217, 1220, 1221, 1239, 1241, 1242, 1253, 1328, 1331, 1340, 1351, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368], "semi": [134, 243, 339, 874, 945, 1356], "semigraph": 20, "sens": [138, 144, 146, 255, 309, 339, 619, 830, 885, 945], "sensit": [676, 685, 688, 699, 700, 1257, 1266, 1269, 1280, 1281], "sep": 134, "separ": [9, 10, 24, 27, 36, 37, 46, 132, 134, 137, 138, 139, 143, 152, 261, 263, 294, 303, 305, 339, 373, 376, 468, 542, 548, 578, 683, 759, 764, 765, 830, 910, 945, 979, 982, 1081, 1158, 1164, 1264, 1310, 1316, 1340, 1363], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [40, 45, 51, 82, 123, 125, 126, 127, 129, 134, 138, 139, 140, 143, 147, 148, 149, 152, 156, 166, 167, 168, 169, 170, 199, 207, 216, 217, 243, 244, 254, 259, 261, 262, 263, 274, 285, 294, 296, 301, 302, 306, 307, 308, 309, 339, 388, 409, 429, 501, 519, 569, 577, 623, 626, 633, 634, 672, 701, 711, 712, 726, 736, 753, 764, 765, 778, 780, 788, 789, 791, 792, 801, 804, 810, 830, 846, 856, 863, 874, 875, 884, 888, 903, 908, 911, 912, 945, 951, 994, 1039, 1040, 1106, 1185, 1214, 1220, 1221, 1282, 1308, 1340], "sequenti": [57, 58, 278, 314, 339, 851, 852, 862, 889, 897, 901, 916, 945], "ser": [1051, 1052, 1079], "seri": [0, 1, 11, 25, 40, 50, 52, 53, 54, 55, 59, 60, 69, 82, 90, 91, 100, 123, 125, 128, 130, 135, 163, 164, 168, 197, 210, 220, 222, 224, 226, 229, 230, 233, 234, 236, 238, 240, 250, 252, 257, 267, 269, 271, 275, 289, 292, 295, 297, 299, 300, 319, 339, 354, 365, 388, 392, 411, 412, 413, 414, 415, 417, 462, 491, 494, 497, 501, 502, 512, 517, 519, 520, 522, 523, 524, 525, 536, 542, 544, 569, 575, 577, 578, 629, 630, 631, 632, 633, 634, 639, 640, 651, 662, 664, 690, 701, 713, 714, 715, 716, 720, 724, 735, 740, 750, 754, 757, 764, 765, 769, 770, 772, 773, 778, 780, 784, 785, 788, 789, 790, 791, 792, 802, 804, 805, 808, 809, 812, 817, 818, 821, 830, 842, 866, 870, 891, 894, 922, 945, 1332, 1334, 1336, 1339, 1341, 1344, 1345, 1346, 1347, 1348, 1350, 1352, 1363, 1368, 1371], "serial": [43, 44, 208, 339, 431, 596, 830, 857, 945], "serializ": [135, 830], "serializationformat": [208, 279, 339, 431, 592, 830, 857, 898, 945], "seriesplot": [1340, 1345], "server": [38, 140, 141, 339], "servic": 32, "service_account": [142, 153], "service_account_json_absolute_path": [142, 153], "session": 140, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 57, 58, 63, 66, 67, 69, 124, 125, 126, 129, 135, 138, 139, 140, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 182, 192, 196, 204, 211, 212, 221, 224, 228, 230, 241, 243, 244, 252, 254, 273, 275, 277, 279, 284, 289, 294, 296, 297, 301, 303, 304, 306, 307, 308, 313, 339, 342, 351, 353, 375, 376, 388, 400, 402, 403, 405, 406, 418, 429, 461, 462, 479, 507, 519, 544, 546, 548, 557, 558, 559, 560, 561, 563, 569, 577, 578, 585, 586, 592, 623, 626, 633, 634, 640, 641, 643, 645, 647, 649, 652, 654, 656, 660, 665, 669, 670, 675, 691, 692, 699, 700, 703, 708, 709, 710, 711, 712, 713, 715, 716, 720, 741, 745, 747, 750, 754, 759, 769, 770, 771, 772, 773, 774, 784, 785, 788, 789, 790, 796, 802, 805, 806, 807, 808, 812, 814, 817, 818, 820, 821, 830, 842, 851, 852, 859, 860, 862, 869, 874, 875, 880, 884, 896, 898, 902, 909, 911, 912, 915, 928, 945, 958, 959, 981, 982, 994, 998, 1005, 1007, 1008, 1010, 1011, 1027, 1039, 1074, 1075, 1092, 1112, 1121, 1133, 1140, 1160, 1162, 1164, 1173, 1174, 1175, 1176, 1177, 1179, 1185, 1193, 1214, 1220, 1221, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1238, 1239, 1240, 1247, 1251, 1252, 1256, 1272, 1273, 1280, 1281, 1284, 1289, 1290, 1291, 1294, 1296, 1297, 1301, 1321, 1329, 1340, 1359, 1367, 1371], "set_": 192, "set_auto_structifi": [277, 313, 339, 896, 915, 945], "set_decimal_separ": 27, "set_environ": 171, "set_except": [58, 852, 945], "set_fmt_float": 30, "set_fmt_str_length": [677, 687, 689, 701, 1258, 1270, 1282], "set_index": [229, 339, 870, 945], "set_legend": [40, 339], "set_sort": [271, 309, 339, 639, 830, 894, 945, 1340], "set_stat": 30, "set_streaming_chunk_s": [851, 945], "set_styl": [40, 339], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": [7, 51], "set_tbl_row": 192, "set_tbl_width_char": 701, "set_thousands_separ": 9, "set_titl": [40, 339], "set_verbos": 192, "setosa": [339, 342], "setup": 1371, "seventeen": [511, 830], "sever": [123, 125, 126, 127, 129, 147, 148, 156, 339, 945, 1371], "sfu": 141, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 50, 51, 52, 53, 54, 55, 59, 60, 78, 82, 90, 91, 98, 117, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 147, 148, 152, 158, 165, 168, 172, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 224, 226, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 275, 277, 279, 282, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 597, 598, 599, 600, 601, 602, 603, 605, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 830, 845, 846, 848, 849, 851, 852, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 950, 951, 955, 956, 957, 960, 962, 963, 964, 965, 966, 967, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1114, 1115, 1117, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1198, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1244, 1245, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1310, 1312, 1313, 1314, 1316, 1317, 1318, 1323, 1325, 1326, 1327, 1328, 1329, 1331, 1340, 1349, 1350, 1351, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1368, 1369], "share": [161, 162, 163, 164, 215, 339, 1099, 1340], "shawshank": 1349, "sheet": [40, 143, 149, 339], "sheet1": [40, 339], "sheet_id": [143, 149], "sheet_nam": [143, 149], "sheet_zoom": [40, 339], "sheetnam": [143, 149], "shift": [229, 339, 391, 432, 499, 539, 620, 758, 830, 870, 945, 1041, 1155, 1209, 1340], "short": [161, 163, 396, 1001], "shorten": [161, 163], "shorter": [138, 139, 152, 569, 784, 785], "shorthand": [339, 342, 1340, 1345], "should": [10, 38, 40, 45, 46, 47, 48, 49, 59, 123, 125, 127, 129, 133, 134, 143, 147, 148, 152, 156, 158, 165, 166, 168, 172, 209, 241, 243, 244, 248, 272, 273, 274, 285, 293, 294, 305, 325, 339, 349, 428, 431, 479, 485, 488, 522, 523, 541, 578, 592, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 661, 669, 672, 699, 700, 741, 753, 774, 776, 790, 792, 806, 807, 820, 826, 830, 851, 857, 858, 874, 875, 880, 898, 903, 910, 945, 951, 1038, 1092, 1101, 1157, 1193, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1240, 1251, 1280, 1281, 1329, 1340, 1350], "show": [30, 40, 207, 212, 227, 246, 260, 339, 509, 593, 830, 856, 889, 901, 945, 1123, 1340, 1354, 1367], "show_graph": [246, 339, 945], "show_plot": [889, 945], "shrink": [283, 339, 664, 830, 1245, 1246, 1340], "shrink_dtyp": [830, 1340], "shrink_to_fit": [339, 1340], "shuffl": [159, 275, 301, 325, 339, 557, 660, 830, 928, 1173, 1238, 1340], "side": [40, 135, 229, 271, 339, 515, 558, 559, 560, 561, 639, 642, 644, 646, 648, 650, 653, 655, 657, 661, 769, 770, 772, 773, 788, 789, 817, 818, 830, 870, 894, 945, 1128, 1174, 1175, 1176, 1177, 1240, 1340], "sign": [65, 66, 68, 73, 74, 75, 76, 77, 83, 458, 631, 699, 700, 723, 830, 951, 1071, 1218, 1280, 1281, 1304, 1340, 1361], "sign_x": 1362, "signed_integ": 951, "signific": [157, 241, 248, 339, 402, 403, 405, 406, 578, 659, 830, 1007, 1008, 1010, 1011, 1193, 1237, 1340], "significantli": [143, 248, 325, 339, 1193, 1340, 1371], "silenc": 98, "silent": [718, 1299], "similar": [36, 45, 137, 174, 222, 244, 282, 304, 306, 339, 383, 465, 468, 562, 619, 663, 728, 787, 820, 830, 866, 875, 900, 909, 911, 945, 989, 1078, 1081, 1178, 1244, 1340], "similarli": [40, 126, 229, 244, 271, 309, 339, 458, 463, 476, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 1071, 1076, 1089], "simpl": [40, 259, 339], "simpler": [951, 1280], "simpli": [152, 764, 778], "simplifi": [46, 47, 48, 49, 57, 58, 851, 852, 862, 889, 901, 945], "simplify_express": [46, 47, 48, 49, 57, 58, 851, 852, 862, 889, 901, 945], "sin": [830, 1340, 1361], "sinc": [39, 60, 65, 66, 83, 138, 139, 140, 142, 148, 152, 153, 155, 156, 165, 166, 167, 168, 172, 175, 198, 254, 297, 315, 320, 339, 443, 446, 479, 500, 577, 596, 633, 675, 683, 743, 752, 760, 780, 830, 845, 862, 884, 903, 917, 918, 923, 945, 1052, 1055, 1060, 1061, 1092, 1120, 1220, 1256, 1264, 1321, 1340], "sind": 1361, "sine": [358, 359, 577, 667, 668, 830, 964, 965, 1249, 1250, 1340, 1365], "singl": [40, 45, 51, 57, 58, 59, 70, 137, 138, 139, 140, 141, 142, 143, 150, 152, 153, 155, 166, 200, 209, 210, 211, 212, 217, 224, 230, 239, 248, 261, 272, 274, 285, 296, 297, 339, 372, 414, 418, 436, 458, 501, 504, 507, 538, 544, 577, 578, 630, 633, 635, 637, 672, 675, 690, 691, 695, 703, 714, 743, 753, 757, 758, 759, 785, 789, 791, 792, 810, 818, 826, 830, 848, 851, 852, 858, 859, 860, 903, 945, 951, 978, 1019, 1027, 1045, 1071, 1106, 1121, 1154, 1160, 1217, 1220, 1222, 1224, 1256, 1271, 1272, 1276, 1284, 1295, 1315, 1321, 1340, 1351], "singlecolselector": 197, "singleindexselector": [197, 955], "sinh": [830, 1340], "sink_csv": 945, "sink_ipc": 945, "sink_ndjson": 945, "sink_parquet": 945, "site_id": [339, 343], "six": [661, 830], "size": [14, 45, 49, 133, 138, 139, 140, 165, 166, 167, 168, 172, 174, 215, 307, 339, 569, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 750, 784, 785, 806, 807, 830, 851, 945, 1099, 1222, 1232, 1340, 1371], "sizeunit": [215, 339, 397, 1002, 1099, 1340], "skew": [651, 830, 1232, 1340], "skewtest": [669, 830, 1251, 1340], "skip": [138, 139, 143, 150, 152, 157, 244, 307, 339, 875, 945, 1193, 1340, 1356], "skip_empty_lin": 143, "skip_lin": [138, 152], "skip_nul": [578, 830, 1193, 1340], "skip_row": [138, 139, 152], "skip_rows_after_head": [138, 139, 152], "sklearn": [301, 339], "slice": [46, 47, 48, 49, 52, 57, 58, 135, 215, 231, 242, 290, 339, 547, 567, 578, 589, 591, 640, 641, 643, 645, 647, 649, 652, 654, 656, 690, 714, 830, 851, 852, 862, 880, 889, 901, 945, 1099, 1122, 1163, 1183, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1271, 1295, 1312, 1340, 1363], "slice_pushdown": [46, 47, 48, 49, 57, 58, 851, 852, 862, 880, 889, 901, 945], "slide": [428, 830, 1038, 1340], "slightli": [46, 47, 48, 49, 94, 498, 830, 945, 1364], "slot": [428, 432, 539, 830, 1038, 1041, 1155, 1340], "slow": [110, 126, 129, 138, 139, 140, 143, 147, 148, 149, 152, 156, 157, 339, 428, 578, 640, 692, 830, 928, 945, 1038, 1226, 1273, 1340], "slower": [127, 129, 143, 228, 248, 261, 309, 325, 339, 578, 792, 830, 869, 928, 945, 1193, 1340], "small": [11, 141, 463, 945, 1371], "smaller": [45, 49, 215, 339, 945, 1099, 1340], "smallest": [199, 302, 339, 408, 409, 736, 830, 846, 908, 945, 1013, 1340, 1357, 1360], "smooth": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "snappi": [35, 45, 49, 339, 945], "snapshot": 154, "snapshot_id": 154, "snowflak": [140, 141], "snowflake_format": 185, "snowi": [699, 700], "so": [1, 40, 141, 143, 152, 174, 192, 227, 229, 245, 263, 271, 339, 365, 375, 431, 498, 515, 546, 569, 578, 639, 699, 700, 701, 708, 709, 710, 724, 830, 857, 870, 876, 894, 945, 951, 981, 1162, 1280, 1281, 1282, 1289, 1290, 1291], "softwar": [36, 137, 339], "solut": [38, 339], "some": [14, 30, 40, 45, 49, 50, 59, 91, 126, 138, 139, 140, 152, 196, 212, 263, 274, 297, 339, 343, 699, 700, 826, 945, 1133, 1280, 1281, 1340, 1371], "some_account": [685, 1266], "some_t": 1370, "someth": [577, 830], "sometim": [774, 829], "somewher": [685, 1266], "sort": [51, 52, 199, 229, 244, 255, 262, 263, 271, 280, 302, 309, 322, 333, 339, 364, 408, 409, 485, 494, 578, 619, 639, 662, 672, 735, 736, 741, 743, 753, 769, 772, 792, 830, 846, 862, 870, 875, 885, 888, 889, 894, 899, 901, 908, 925, 936, 945, 951, 970, 1013, 1101, 1140, 1242, 1325, 1326, 1329, 1340, 1356, 1369, 1371], "sort_bi": 830, "sort_column": [263, 339], "sorted": [244, 339, 875, 945], "sorted_asc": [1112, 1340], "sorted_desc": [1112, 1340], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 830, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 945, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1340, 1345, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1368], "source_ac": 130, "source_actor_id": 130, "source_alia": [39, 339], "source_cha": 130, "source_channel_id": 130, "south": 69, "space": [20, 229, 339, 468, 788, 789, 870, 945, 951, 1081], "spam": [251, 339, 685, 1266], "span": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "spanner": [339, 343], "spark": [45, 339], "sparklin": [40, 339], "speak": [669, 830, 1251, 1340], "spearman": 760, "speci": [339, 342], "special": [38, 138, 139, 141, 152, 301, 316, 339, 640, 685, 699, 700, 830, 919, 945, 1193, 1226, 1266, 1280, 1281, 1340], "specif": [1, 30, 39, 40, 41, 42, 94, 123, 125, 127, 129, 134, 138, 141, 142, 143, 147, 148, 149, 153, 154, 156, 200, 241, 243, 291, 296, 339, 465, 468, 713, 715, 716, 720, 741, 830, 848, 874, 945, 950, 951, 1078, 1081, 1294, 1296, 1297, 1301, 1315, 1319, 1329, 1340, 1356, 1368, 1370, 1371], "specifi": [37, 38, 39, 40, 45, 46, 51, 95, 98, 101, 116, 119, 138, 143, 149, 150, 152, 157, 169, 178, 180, 181, 182, 199, 200, 215, 216, 219, 224, 228, 229, 243, 244, 261, 263, 271, 272, 274, 277, 278, 282, 285, 296, 302, 305, 313, 314, 318, 339, 409, 418, 461, 468, 484, 486, 487, 488, 493, 619, 632, 634, 641, 643, 645, 647, 649, 652, 654, 656, 663, 672, 728, 736, 753, 756, 757, 758, 759, 769, 770, 772, 773, 774, 776, 808, 812, 817, 818, 826, 830, 846, 848, 863, 865, 869, 870, 874, 875, 894, 896, 897, 900, 903, 908, 910, 915, 916, 921, 945, 951, 1027, 1074, 1081, 1099, 1100, 1102, 1103, 1109, 1221, 1244, 1319, 1340, 1356, 1363, 1370], "speed": [49, 280, 339, 578, 830, 899, 945, 949, 1371], "speedup": [51, 157, 241, 248, 339, 578, 830, 1193, 1340], "split": [1, 40, 45, 52, 242, 339, 683, 705, 706, 1264, 1286, 1287], "split_by_column_dtyp": 54, "split_inclus": 704, "splitfram": [1, 52], "spreadsheet": [36, 137, 143, 149, 263, 339], "spring": [699, 700], "sql": [0, 38, 113, 114, 122, 140, 141, 243, 282, 339, 383, 562, 663, 787, 810, 830, 842, 900, 945, 989, 1178, 1244, 1340, 1349, 1350, 1352, 1354, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1365, 1366, 1369, 1370], "sql_expr": 1368, "sqlalchemi": [38, 140, 160, 339], "sqlcontext": [286, 339, 809, 904, 945, 1367], "sqldw_format": 185, "sqlite": [38, 140, 339], "sqrt": [578, 669, 728, 830, 1193, 1251, 1340, 1361], "sqrt_x": 1362, "squar": [1, 55, 325, 527, 635, 673, 830, 928, 1143, 1222, 1254, 1340, 1362], "st": [32, 1371], "stabil": [230, 339, 507, 830, 1121, 1340], "stabl": [150, 194, 205, 207, 208, 230, 275, 279, 286, 339, 431, 507, 574, 592, 734, 830, 856, 857, 884, 898, 903, 904, 945, 953, 1121, 1323, 1340], "stack": [59, 233, 311, 339, 342, 1350], "stai": [577, 665, 830], "standalon": [166, 951], "standard": [7, 10, 40, 140, 287, 296, 301, 339, 449, 486, 652, 653, 669, 674, 693, 696, 811, 826, 830, 905, 945, 1058, 1097, 1102, 1205, 1251, 1255, 1274, 1277, 1340, 1357, 1371], "standardis": [40, 339], "start": [40, 136, 138, 139, 141, 143, 144, 146, 148, 149, 150, 152, 155, 156, 157, 174, 223, 228, 229, 246, 284, 309, 315, 316, 339, 392, 395, 398, 411, 415, 436, 444, 454, 459, 463, 476, 477, 488, 502, 545, 563, 638, 642, 644, 646, 648, 650, 653, 655, 657, 670, 676, 681, 685, 689, 698, 703, 707, 708, 710, 711, 714, 723, 750, 755, 764, 768, 769, 770, 771, 772, 773, 776, 778, 784, 785, 788, 789, 817, 818, 820, 826, 830, 868, 869, 870, 889, 902, 918, 919, 945, 951, 1003, 1015, 1020, 1045, 1047, 1050, 1053, 1055, 1056, 1062, 1064, 1066, 1067, 1070, 1072, 1076, 1080, 1089, 1090, 1115, 1161, 1179, 1225, 1252, 1262, 1266, 1270, 1279, 1284, 1288, 1289, 1291, 1295, 1304, 1340, 1356, 1363, 1371], "start_bi": [229, 339, 870, 945], "startbi": [229, 339, 870, 945], "starts_a": 1363, "starts_with": [52, 263, 339, 343, 392, 395, 411, 585, 676, 681, 809, 904, 945, 951, 1015, 1262, 1361], "starts_with_expr": 398, "starts_with_lit": 398, "startup": [296, 339], "stat": [527, 669, 830, 1143, 1251, 1340], "state": [4, 5, 106, 764, 842, 862, 889, 901, 945, 1368], "statement": [619, 820, 830, 1354, 1369], "static": [88, 928], "statist": [45, 49, 138, 139, 150, 155, 157, 207, 339, 486, 487, 527, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 669, 830, 856, 945, 1040, 1102, 1103, 1143, 1232, 1251, 1340], "std": [207, 339, 652, 653, 830, 856, 945, 1040, 1233, 1340], "std_dev": [40, 339], "stddev": 1361, "stddev_samp": 1357, "stdev": [40, 339, 1357], "stdev_samp": 1357, "stdout": [192, 227, 339, 594], "step": [307, 339, 498, 750, 784, 785, 830], "steve": [255, 339, 885, 945], "still": [140, 141], "stock": [339, 342], "stop": [133, 136, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 642, 644, 646, 648, 650, 653, 655, 657, 830, 1047, 1050, 1055, 1056, 1062, 1064, 1066, 1070, 1076, 1080], "storag": [37, 39, 41, 45, 46, 47, 48, 49, 138, 142, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 182, 339, 945], "storage_loc": [183, 186, 187], "storage_opt": [37, 39, 41, 45, 46, 47, 48, 49, 138, 142, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 182, 339, 945], "store": [39, 138, 154, 217, 241, 273, 339, 412, 637, 830, 1016, 1106, 1224, 1340], "store_id": [619, 830], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 66, 69, 70, 92, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 168, 171, 172, 173, 177, 178, 180, 181, 182, 183, 184, 186, 187, 192, 199, 200, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 220, 221, 222, 224, 225, 227, 228, 229, 231, 233, 236, 238, 239, 241, 243, 244, 245, 247, 249, 251, 253, 254, 255, 256, 259, 261, 263, 265, 267, 268, 269, 270, 271, 272, 273, 275, 279, 280, 284, 285, 286, 287, 288, 290, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 348, 349, 350, 371, 376, 388, 392, 393, 394, 395, 398, 399, 404, 407, 409, 411, 412, 415, 423, 429, 431, 433, 441, 458, 462, 463, 465, 468, 476, 485, 488, 494, 496, 500, 501, 504, 512, 515, 536, 537, 546, 547, 548, 563, 567, 569, 578, 589, 591, 592, 593, 594, 596, 603, 604, 605, 606, 607, 608, 609, 610, 616, 619, 623, 626, 632, 633, 634, 636, 638, 639, 642, 644, 646, 648, 650, 653, 655, 657, 664, 671, 672, 724, 725, 726, 727, 736, 741, 743, 744, 745, 746, 747, 748, 749, 751, 752, 758, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 826, 830, 837, 846, 848, 851, 852, 854, 856, 857, 858, 859, 860, 862, 863, 866, 869, 870, 872, 874, 875, 876, 884, 885, 888, 889, 891, 892, 893, 894, 898, 899, 901, 902, 903, 904, 908, 909, 910, 911, 912, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 945, 950, 951, 957, 977, 982, 994, 999, 1014, 1015, 1016, 1020, 1039, 1040, 1050, 1071, 1075, 1076, 1078, 1081, 1089, 1101, 1109, 1112, 1152, 1153, 1164, 1185, 1201, 1202, 1203, 1214, 1219, 1220, 1221, 1241, 1305, 1307, 1308, 1316, 1317, 1318, 1319, 1329, 1340, 1346, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1360, 1363, 1364, 1368, 1369, 1371], "str_date": 1363, "str_timestamp": 1363, "strategi": [37, 46, 51, 59, 138, 157, 165, 166, 167, 168, 169, 170, 172, 219, 229, 243, 244, 258, 308, 339, 493, 569, 578, 830, 865, 870, 874, 875, 912, 945, 1109, 1185, 1340], "stream": [14, 41, 42, 46, 47, 48, 49, 57, 58, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 228, 243, 304, 339, 577, 830, 851, 852, 862, 869, 874, 880, 884, 889, 901, 903, 909, 945], "streamabl": [880, 884, 911, 945], "streaming_t": 189, "strftime": [94, 468, 1081, 1361, 1363], "strict": [125, 126, 129, 134, 200, 209, 268, 339, 393, 410, 468, 676, 679, 688, 713, 715, 716, 718, 720, 830, 848, 858, 892, 945, 951, 998, 1014, 1081, 1257, 1260, 1269, 1294, 1296, 1297, 1299, 1301, 1340], "strictli": [37, 46, 50, 91, 244, 339, 875, 945], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 35, 37, 38, 39, 40, 43, 44, 46, 50, 63, 66, 69, 82, 89, 90, 91, 92, 94, 100, 118, 126, 130, 134, 138, 139, 140, 141, 152, 161, 162, 163, 164, 165, 172, 176, 199, 200, 203, 208, 213, 215, 222, 224, 227, 228, 229, 244, 261, 263, 271, 274, 276, 277, 278, 279, 285, 295, 296, 302, 303, 307, 309, 313, 314, 318, 339, 348, 371, 376, 393, 394, 395, 409, 411, 413, 414, 415, 418, 431, 458, 463, 465, 468, 476, 485, 488, 496, 500, 515, 548, 592, 594, 619, 623, 633, 634, 639, 642, 644, 646, 648, 650, 653, 655, 657, 672, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 728, 736, 744, 746, 748, 753, 756, 757, 758, 759, 767, 769, 770, 772, 773, 779, 794, 796, 799, 808, 812, 814, 817, 818, 820, 826, 830, 842, 846, 848, 853, 857, 861, 862, 869, 870, 875, 894, 895, 896, 897, 898, 903, 908, 915, 916, 921, 945, 950, 951, 982, 998, 999, 1000, 1015, 1017, 1018, 1019, 1020, 1071, 1076, 1078, 1081, 1089, 1101, 1128, 1164, 1220, 1221, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1307, 1318, 1319, 1340, 1349, 1350, 1358, 1361, 1364, 1367, 1371], "stringcach": [90, 91, 243, 339, 842, 1017, 1021], "stringio": [147, 148, 500, 830], "strings_hex": 680, "strip": [28, 708, 709, 710, 711, 712, 1289, 1290, 1291, 1363], "strip_chars_end": [710, 712], "strip_chars_start": [709, 711], "strip_prefix": [710, 712], "strip_suffix": [709, 711], "strongli": [40, 174, 248, 272, 325, 339, 578, 830, 1193, 1340], "strpo": 1361, "strpost": 1363, "strptime": [271, 339, 462, 639, 830, 894, 945, 1075, 1361], "struct": [8, 70, 119, 130, 259, 277, 300, 305, 313, 339, 388, 429, 509, 569, 577, 578, 604, 606, 608, 626, 637, 638, 686, 692, 705, 706, 734, 741, 764, 765, 767, 791, 830, 896, 910, 915, 928, 945, 994, 1039, 1185, 1193, 1214, 1224, 1267, 1273, 1286, 1287, 1321, 1323, 1340], "struct_col": [724, 726, 727], "struct_seri": 928, "structarrai": [215, 339, 1099, 1340], "structfieldnotfounderror": 726, "structur": [40, 41, 42, 100, 103, 117, 134, 217, 262, 274, 291, 297, 339, 623, 830, 888, 945, 1106, 1315, 1340, 1368], "student": [263, 339], "style": [7, 20, 40, 140, 263, 339], "sub": [325, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 390, 548, 555, 830, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 991, 992, 996, 1164, 1171], "subarrai": [367, 368, 973, 974], "subclass": [1, 339], "subexpress": [57, 58, 851, 852, 862, 889, 901, 945], "subinterv": 1357, "subject": [45, 263, 339], "sublist": [375, 534, 535, 537, 539, 543, 544, 545, 546, 547, 548, 549, 558, 563, 567, 569, 981, 1133, 1150, 1151, 1153, 1155, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1174, 1179, 1183, 1185, 1340], "subplan": [57, 58, 851, 852, 862, 889, 901, 945], "subsequ": [40, 150, 157, 266, 298, 339, 569, 809, 820, 862, 945, 1322, 1340, 1355], "subset": [211, 212, 259, 304, 339, 859, 860, 909, 945], "substr": [392, 395, 398, 411, 415, 676, 681, 688, 699, 700, 703, 704, 705, 706, 707, 951, 997, 1000, 1003, 1015, 1020, 1257, 1262, 1269, 1280, 1281, 1284, 1285, 1286, 1287, 1288, 1361], "subtl": [40, 339], "subtli": [498, 830], "subtract": [527, 729, 830, 1143, 1340], "succe": [138, 139, 152], "success": [678, 685, 1259, 1266], "successfulli": [851, 945], "suffix": [243, 244, 245, 277, 313, 318, 339, 350, 395, 409, 411, 522, 523, 524, 525, 583, 603, 605, 608, 609, 610, 636, 681, 709, 712, 736, 830, 874, 875, 876, 896, 915, 917, 921, 945, 951, 1000, 1015, 1262, 1293], "suffix_field": [604, 606], "sugar": [308, 339, 633, 634, 701, 745, 747, 749, 761, 763, 766, 776, 781, 782, 783, 793, 795, 797, 798, 800, 802, 803, 808, 811, 813, 815, 819, 821, 830, 912, 945, 1220, 1221, 1254, 1282, 1340], "suggest": [339, 342, 1340, 1345], "suitabl": [51, 59, 140, 166, 248, 339, 578, 661, 830, 1193, 1240, 1340], "sum": [40, 135, 215, 222, 228, 229, 239, 263, 271, 289, 318, 339, 426, 427, 431, 481, 494, 569, 578, 589, 591, 592, 593, 594, 595, 633, 634, 639, 654, 655, 743, 745, 757, 764, 766, 767, 778, 792, 804, 814, 830, 851, 852, 857, 862, 869, 870, 887, 889, 894, 898, 901, 921, 945, 951, 1036, 1037, 1095, 1099, 1234, 1340, 1349, 1356, 1358, 1361, 1368], "sum_": [669, 830, 1251, 1340], "sum_a": [271, 339, 639, 830, 894, 945], "sum_horizont": [51, 339, 813], "summari": [207, 339, 856, 945, 1040, 1340, 1356], "summer": [699, 700], "sun": [339, 342, 713, 1294], "sundai": [229, 339, 436, 465, 468, 478, 755, 870, 945, 1045, 1078, 1081, 1091], "sunni": [699, 700, 1280, 1281], "supercast": [222, 339], "supertyp": [59, 135, 219, 297, 301, 339, 354, 758, 830, 865, 945, 1340], "suppli": [38, 40, 123, 125, 126, 127, 129, 140, 147, 148, 156, 220, 267, 272, 296, 339, 494, 623, 830, 866, 891, 945, 1319, 1340], "support": [1, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 59, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 142, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 165, 169, 172, 182, 192, 241, 242, 243, 244, 273, 274, 284, 285, 293, 298, 301, 339, 468, 485, 563, 619, 633, 634, 670, 672, 677, 687, 689, 690, 699, 700, 701, 703, 714, 826, 830, 836, 851, 874, 875, 902, 903, 945, 951, 1081, 1101, 1179, 1220, 1221, 1252, 1258, 1268, 1270, 1271, 1280, 1281, 1282, 1284, 1295, 1322, 1324, 1340, 1344, 1358, 1363, 1364, 1366, 1367, 1368], "supportsinterchang": 124, "suppos": [197, 263, 339, 578, 830, 1193, 1340], "sure": [59, 123, 124, 128, 135, 138, 139, 142, 144, 146, 150, 153, 266, 339, 830], "surreal_query_to_fram": 140, "surrealdb": 140, "surrealql": 140, "suscept": 945, "swap": [892, 945], "swim": 759, "switch": [437, 851, 945, 1046], "sy": 192, "sydnei": 771, "symbol": [36, 37, 46, 339, 830, 945], "symmetr": [560, 951, 1176], "symmetri": [854, 861, 895, 914, 945], "synchron": [140, 939], "syntact": [308, 339, 633, 634, 701, 745, 747, 749, 761, 763, 766, 776, 781, 782, 783, 793, 795, 797, 798, 800, 802, 803, 808, 811, 813, 815, 819, 821, 830, 912, 945, 1220, 1221, 1254, 1282, 1340], "syntax": [40, 114, 220, 248, 259, 267, 339, 593, 676, 684, 685, 688, 699, 700, 784, 785, 826, 866, 891, 901, 945, 1257, 1265, 1266, 1269, 1280, 1281, 1340, 1364, 1366], "system": [36, 138, 139, 339, 441, 851, 945, 1050], "t": [36, 37, 39, 46, 59, 137, 138, 143, 149, 152, 229, 244, 248, 262, 304, 307, 339, 428, 437, 445, 462, 468, 481, 484, 486, 487, 541, 578, 619, 623, 684, 688, 699, 700, 710, 713, 716, 721, 820, 830, 870, 875, 888, 909, 945, 951, 1038, 1075, 1081, 1095, 1100, 1102, 1103, 1157, 1193, 1265, 1269, 1280, 1281, 1290, 1291, 1294, 1297, 1302, 1340, 1352, 1353, 1363], "t_": [305, 339, 485, 830, 910, 945, 1101, 1340], "t_0": [271, 339, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 830, 894, 945, 1101, 1340], "t_1": [271, 339, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 830, 894, 945, 1101, 1340], "t_a": [305, 339, 910, 945], "t_b": [305, 339, 910, 945], "t_c": [305, 339, 910, 945], "t_d": [305, 339, 910, 945], "t_i": [485, 830, 1101, 1340], "t_id": [245, 339, 876, 945], "t_n": [271, 339, 639, 642, 644, 646, 648, 650, 653, 655, 657, 830, 894, 945], "t_struct": [305, 339, 910, 945], "tab_spann": [339, 343], "tab_stub": [339, 343], "tab_styl": [339, 343], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 38, 39, 40, 123, 130, 134, 142, 143, 149, 153, 154, 178, 181, 182, 184, 187, 188, 243, 245, 263, 286, 291, 298, 307, 308, 339, 343, 809, 842, 874, 876, 904, 912, 945, 1350, 1351, 1352, 1353, 1355, 1356, 1367, 1368], "table_id": 187, "table_nam": [38, 40, 143, 178, 182, 286, 339, 904, 945], "table_path": [39, 142, 153, 154, 339], "table_styl": [40, 339], "table_typ": 187, "tableinfo": [178, 181, 190], "tablemerg": [39, 339], "tablenotfounderror": [39, 339], "tables_scale_100": [132, 139], "tabletyp": [187, 190], "tail": [227, 231, 339, 354, 669, 830, 945, 1122, 1251, 1340], "take": [40, 134, 143, 149, 168, 169, 192, 222, 223, 229, 252, 255, 262, 263, 268, 339, 364, 436, 458, 494, 501, 502, 544, 545, 577, 604, 606, 608, 672, 753, 755, 775, 777, 786, 830, 868, 870, 885, 892, 945, 970, 1045, 1071, 1114, 1115, 1160, 1161, 1331, 1340, 1358], "taken": [563, 703, 1179, 1284], "talkin": [721, 1302], "tan": [830, 1340, 1361], "tand": 1361, "tangent": [360, 361, 732, 733, 830, 966, 967, 1313, 1314, 1340, 1365], "tanh": [263, 339, 830, 1340], "target": [1, 38, 39, 40, 56, 143, 301, 339, 684, 699, 700, 713, 715, 716, 951, 1265, 1280, 1281, 1294, 1296, 1297, 1363], "target_alia": [39, 339], "target_t": [38, 339], "task": [58, 852, 945], "tau": [484, 485, 830, 1100, 1101, 1340], "tb": [161, 163, 215, 339, 397, 1099, 1340], "tbl": [132, 139, 1370], "tbl0": 1355, "tbl1": [1353, 1355], "tbl2": [1353, 1355], "tbl3": 1353, "tbl4": 1353, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": [20, 192], "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 207, 339, 856, 945], "tbl_width_char": 774, "td": 468, "td1": 951, "td2": 951, "td3": 951, "tdf": [262, 339], "technic": 826, "tell": [677, 701, 1258, 1282], "tempor": [94, 200, 229, 241, 271, 273, 274, 293, 339, 418, 468, 515, 639, 642, 644, 646, 648, 650, 653, 655, 657, 788, 830, 842, 848, 870, 894, 945, 951, 1027, 1081, 1128, 1340, 1361, 1367], "temporalliter": [418, 788, 789, 830, 1027, 1060, 1061, 1340], "temporari": [38, 339], "temporarili": [174, 192, 229, 271, 339, 639, 830, 870, 894, 945], "tenant": 33, "tenant_id": 33, "tend": [161, 163], "tensor": [301, 339, 1324, 1340], "tensordataset": [301, 339], "term": [484, 486, 487, 690, 703, 714, 830, 1100, 1102, 1103, 1271, 1284, 1295, 1340], "termin": [37, 46, 339, 945], "terminologi": 186, "test": [0, 38, 140, 141, 143, 149, 214, 263, 339, 842, 1098, 1340, 1363], "test1": 1355, "test2": 1355, "test3": 1355, "test_1": [263, 339], "test_1_math": [263, 339], "test_1_phys": [263, 339], "test_2": [263, 339], "test_2_math": [263, 339], "test_2_phys": [263, 339], "test_data": 140, "test_df_height": 168, "test_func": 791, "test_lf": [917, 945], "test_miscellan": 1371, "test_numer": 1371, "test_price_calcul": 1371, "test_series_len": 172, "test_tabl": 141, "test_unique_xyz": 166, "testdb": 141, "testing1234": 1355, "text": [137, 140, 185, 413, 414, 682, 690, 694, 695, 696, 699, 700, 702, 703, 714, 810, 945, 1018, 1019, 1271, 1275, 1276, 1283, 1284, 1295, 1355, 1371], "text1": 700, "text2": 700, "textclaus": 140, "texttt": [669, 830, 1251, 1340], "th": [223, 339, 502, 545, 558, 669, 690, 714, 830, 868, 945, 1115, 1161, 1174, 1251, 1271, 1295, 1340], "than": [40, 46, 47, 48, 49, 57, 58, 97, 120, 127, 129, 138, 139, 140, 143, 149, 152, 158, 201, 228, 241, 243, 244, 248, 261, 272, 273, 275, 307, 325, 339, 413, 498, 500, 503, 505, 515, 529, 557, 576, 577, 578, 594, 626, 638, 660, 669, 690, 694, 697, 698, 706, 714, 723, 760, 792, 830, 851, 852, 869, 874, 875, 928, 945, 1018, 1128, 1173, 1193, 1214, 1225, 1238, 1251, 1271, 1275, 1278, 1279, 1287, 1295, 1304, 1321, 1340, 1371], "the_aws_access_key_id": [39, 142, 153, 154, 339], "the_aws_region": [39, 339], "the_aws_secret_access_kei": [39, 142, 153, 154, 339], "thei": [37, 40, 46, 50, 58, 59, 90, 91, 126, 135, 152, 192, 244, 246, 274, 339, 619, 701, 709, 710, 830, 851, 875, 945, 949, 951, 1282], "them": [58, 123, 125, 126, 127, 129, 140, 141, 143, 147, 148, 149, 150, 152, 155, 156, 157, 192, 216, 217, 229, 244, 255, 263, 271, 301, 309, 339, 376, 485, 515, 548, 611, 612, 619, 639, 758, 769, 770, 772, 773, 817, 818, 830, 852, 863, 870, 875, 885, 894, 945, 951, 982, 1101, 1106, 1164, 1202, 1203, 1340, 1358, 1368], "therebi": [152, 155, 156], "therefor": [215, 339, 578, 820, 830, 1099, 1340], "theta": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 65, 66, 67, 68, 69, 73, 83, 91, 98, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 186, 188, 192, 194, 196, 197, 198, 199, 202, 203, 205, 207, 208, 211, 212, 215, 217, 221, 222, 227, 228, 229, 230, 234, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 284, 286, 287, 288, 291, 293, 296, 297, 298, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 320, 325, 338, 339, 342, 343, 351, 354, 355, 364, 376, 382, 383, 384, 389, 408, 409, 412, 418, 428, 429, 431, 437, 438, 449, 455, 456, 458, 462, 465, 468, 479, 483, 490, 500, 507, 509, 512, 513, 515, 519, 541, 542, 548, 557, 558, 559, 560, 561, 562, 564, 569, 570, 574, 575, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 596, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 619, 626, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 663, 664, 665, 670, 671, 672, 675, 677, 684, 687, 689, 691, 692, 696, 697, 698, 701, 708, 709, 710, 711, 712, 717, 721, 723, 725, 728, 735, 736, 738, 739, 740, 741, 745, 749, 757, 758, 761, 763, 764, 777, 778, 780, 782, 783, 786, 787, 788, 789, 792, 795, 797, 800, 802, 808, 811, 815, 819, 820, 821, 826, 830, 842, 845, 846, 847, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 866, 869, 870, 872, 874, 875, 876, 878, 880, 884, 885, 889, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 908, 909, 911, 912, 914, 915, 916, 917, 918, 919, 920, 923, 928, 942, 943, 944, 945, 949, 950, 951, 953, 960, 961, 970, 982, 988, 989, 990, 995, 1013, 1016, 1021, 1022, 1027, 1028, 1038, 1039, 1046, 1047, 1049, 1058, 1068, 1069, 1071, 1075, 1078, 1081, 1092, 1094, 1097, 1099, 1105, 1106, 1115, 1117, 1121, 1123, 1133, 1142, 1157, 1158, 1164, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1186, 1191, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1205, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1252, 1253, 1255, 1256, 1258, 1265, 1268, 1270, 1272, 1273, 1277, 1278, 1279, 1282, 1289, 1290, 1291, 1298, 1302, 1304, 1305, 1307, 1310, 1311, 1315, 1317, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1328, 1329, 1330, 1340, 1345, 1349, 1350, 1351, 1355, 1363, 1366, 1367, 1368, 1369, 1371], "thing": [152, 159], "think": [455, 456, 1068, 1069], "third": [577, 830], "thoma": [255, 339, 885, 945], "those": [5, 30, 40, 138, 143, 220, 267, 274, 298, 308, 339, 498, 629, 684, 792, 830, 891, 912, 945, 951, 1216, 1265, 1322, 1340], "though": [38, 140, 229, 339, 826, 870, 945], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 37, 46, 58, 132, 138, 139, 141, 174, 175, 285, 339, 541, 578, 672, 753, 830, 852, 903, 945, 990, 1157, 1180, 1253, 1340], "thread_loc": [578, 830], "thread_pool_s": 175, "threadpool": 57, "three": [40, 197, 271, 300, 339, 429, 626, 639, 661, 690, 699, 714, 830, 894, 945, 994, 1039, 1185, 1214, 1271, 1281, 1295, 1340], "threshold": [277, 339, 896, 945], "through": [140, 826, 951, 1340, 1355], "throughout": 192, "throw": [39, 125, 126, 129, 209, 268, 339, 692, 693, 848, 858, 892, 945, 1273, 1274, 1340], "thu": [40, 217, 339, 342, 760, 949, 1106, 1340], "thursdai": [229, 339, 436, 755, 870, 945, 1045], "ti": [629, 830, 1216, 1340], "time": [12, 37, 39, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 68, 107, 142, 148, 150, 152, 153, 155, 156, 157, 168, 169, 172, 182, 207, 217, 229, 244, 245, 271, 309, 339, 371, 408, 409, 437, 438, 440, 441, 442, 445, 446, 455, 456, 458, 461, 462, 463, 465, 467, 468, 476, 479, 485, 536, 537, 569, 638, 639, 642, 644, 646, 648, 650, 653, 655, 657, 665, 713, 716, 720, 734, 735, 736, 758, 759, 769, 770, 771, 772, 773, 774, 780, 788, 817, 818, 830, 851, 852, 856, 870, 875, 876, 889, 894, 945, 951, 977, 1013, 1046, 1047, 1049, 1050, 1054, 1055, 1071, 1074, 1075, 1076, 1078, 1080, 1081, 1089, 1092, 1101, 1106, 1152, 1153, 1225, 1247, 1294, 1297, 1301, 1323, 1325, 1340, 1349, 1355, 1364, 1371], "time_column": [309, 339], "time_format": [37, 46, 339, 945], "time_unit": [66, 68, 438, 440, 446, 467, 479, 716, 771, 772, 773, 774, 780, 950, 951, 1047, 1049, 1055, 1080, 1092, 1297], "time_unit_m": [438, 1047], "time_unit_n": [438, 1047], "time_unit_u": 479, "time_zon": [66, 441, 443, 462, 716, 771, 772, 773, 950, 951, 1046, 1050, 1054, 1075, 1297], "timedelta": [229, 244, 271, 309, 339, 458, 463, 468, 476, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 769, 770, 772, 773, 817, 818, 830, 870, 875, 894, 945, 950, 951, 1059, 1065, 1071, 1076, 1089, 1101, 1202, 1203, 1255, 1330, 1340], "timeout": [58, 852, 945], "timestamp": [130, 142, 153, 229, 339, 462, 463, 476, 780, 870, 945, 1075, 1076, 1089, 1361], "timestamp_m": 467, "timestamp_n": 1080, "timestamp_u": [467, 1080], "timestep": 780, "timeunit": [37, 46, 66, 68, 339, 438, 440, 467, 479, 716, 771, 772, 773, 774, 945, 951, 1047, 1049, 1080, 1092, 1297], "timezon": [66, 142, 153, 443, 951, 1364], "tip": [578, 830], "titl": [40, 339, 342, 1340, 1345, 1349], "titlecas": [721, 1302], "tm": [440, 468, 951, 1364], "to_arrow": [242, 339, 1321, 1340, 1368], "to_batch": [242, 339], "to_dict": [200, 274, 339, 848, 945, 951], "to_dummi": [296, 301, 339, 1340], "to_fram": [412, 446, 463, 467, 476, 713, 950, 1039, 1214, 1239, 1241, 1286, 1287, 1294, 1340, 1345], "to_init_repr": [130, 339, 1340], "to_jax": [301, 339, 1340], "to_list": [130, 271, 339, 1257, 1269, 1340], "to_lowercas": 610, "to_numpi": [296, 301, 339, 577, 830, 1340], "to_panda": [339, 1340], "to_phys": [830, 1021, 1340], "to_python": 950, "to_seri": [52, 224, 339, 713, 754, 805, 1294, 1363], "to_sql": [38, 339], "to_str": [465, 1078], "to_struct": [339, 685], "to_torch": [296, 339, 1340], "to_uppercas": [350, 609, 686, 830], "togeth": 1363, "token": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 154, 155, 156, 157, 177, 182, 339, 945], "tokyo": [130, 951], "tokyo_tz": 951, "toler": [161, 162, 163, 164, 244, 339, 875, 945], "tone": [40, 339], "tonight": [677, 701, 1258, 1282], "too": [14, 263, 339, 396, 619, 830, 945, 1001], "tooltip": [339, 342, 1340, 1345], "toomanyrowsreturnederror": [272, 339], "top": [40, 286, 302, 339, 342, 736, 830, 904, 908, 945, 1340, 1345, 1368], "top_col": [40, 339], "top_k": [199, 339, 408, 409, 736, 830, 846, 945, 1013, 1340], "top_k_bi": [408, 409, 735, 830], "top_row": [40, 339], "tor_id": 130, "torch": [160, 301, 339, 1324, 1340], "torchexporttyp": [301, 339], "total": [40, 215, 320, 339, 469, 470, 471, 472, 473, 474, 475, 530, 550, 830, 923, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1099, 1146, 1166, 1340], "total_gross": 1349, "toward": [320, 530, 550, 830, 923, 1146, 1166, 1340], "tp": [1, 54], "tpu": [296, 339, 1319, 1340], "tr15": [696, 1277], "trace": 69, "traceback": [161, 162, 163, 164, 297, 339, 634, 830, 1221, 1321, 1340], "tracebacktyp": 1368, "track": [142, 153, 154, 248, 339, 569, 1368], "trail": [28, 227, 339, 708, 709, 1289, 1290], "train": [301, 339], "train_lf": [917, 945], "transfer": 141, "transferencod": [393, 394, 679, 680, 998, 999, 1260, 1261], "transform": [248, 286, 339, 577, 721, 809, 830, 904, 945, 1302], "transform_dens": [1340, 1345], "transit": [220, 267, 339, 866, 891, 945], "translat": 140, "transpar": [851, 945], "transpos": [263, 339], "travel": [142, 153], "travers": [641, 643, 645, 647, 649, 652, 654, 656, 830, 1227, 1228, 1230, 1233, 1234, 1235, 1340], "treat": [138, 139, 152, 194, 485, 676, 678, 688, 699, 700, 820, 830, 953, 1101, 1257, 1259, 1269, 1280, 1281, 1340], "tree": [594, 862, 945], "tree_format": [862, 945], "trend": [40, 339], "tri": [248, 339], "triangl": [325, 928], "trigger": [39, 135, 246, 298, 339, 830, 1322, 1340], "trigonometri": [1361, 1367], "trim": [130, 1363], "trim_decimal_zero": 28, "trip": 140, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 38, 39, 40, 45, 46, 47, 48, 49, 57, 58, 59, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 138, 139, 140, 142, 143, 144, 146, 149, 150, 152, 153, 155, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 177, 192, 196, 200, 201, 202, 207, 209, 214, 219, 220, 222, 224, 226, 227, 228, 229, 234, 236, 237, 238, 241, 243, 244, 245, 246, 251, 252, 258, 259, 261, 263, 264, 267, 268, 272, 273, 274, 275, 277, 285, 286, 289, 292, 294, 296, 297, 298, 301, 303, 304, 305, 307, 308, 309, 313, 319, 321, 323, 326, 327, 328, 329, 330, 331, 332, 339, 342, 349, 350, 351, 352, 353, 354, 365, 367, 368, 371, 375, 376, 384, 388, 392, 393, 395, 398, 399, 404, 407, 409, 410, 411, 415, 423, 424, 425, 426, 427, 429, 436, 438, 441, 444, 446, 448, 455, 456, 458, 459, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 486, 487, 494, 501, 503, 504, 505, 506, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 537, 544, 546, 548, 564, 569, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 613, 614, 616, 618, 621, 622, 626, 631, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 664, 665, 669, 671, 672, 675, 676, 677, 678, 679, 681, 687, 688, 689, 691, 692, 693, 699, 700, 704, 705, 707, 713, 715, 716, 718, 720, 724, 726, 727, 736, 738, 741, 744, 745, 746, 747, 748, 750, 753, 754, 755, 760, 769, 772, 778, 784, 788, 789, 792, 796, 802, 805, 808, 809, 812, 814, 817, 820, 821, 830, 848, 849, 850, 851, 852, 856, 858, 862, 865, 866, 869, 870, 874, 875, 876, 878, 880, 884, 889, 891, 892, 896, 901, 903, 904, 909, 910, 911, 912, 915, 920, 922, 924, 926, 929, 930, 931, 932, 933, 934, 935, 944, 945, 950, 951, 958, 959, 971, 973, 974, 977, 981, 982, 990, 997, 998, 1000, 1003, 1014, 1015, 1017, 1020, 1022, 1025, 1026, 1039, 1045, 1046, 1047, 1050, 1053, 1054, 1055, 1056, 1057, 1061, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1095, 1097, 1098, 1100, 1102, 1103, 1110, 1119, 1123, 1125, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1148, 1149, 1153, 1160, 1162, 1164, 1180, 1193, 1199, 1205, 1207, 1210, 1211, 1214, 1217, 1218, 1232, 1251, 1253, 1256, 1257, 1258, 1259, 1260, 1262, 1268, 1269, 1270, 1272, 1273, 1274, 1280, 1281, 1285, 1286, 1288, 1294, 1296, 1297, 1299, 1301, 1316, 1321, 1322, 1329, 1331, 1340, 1345, 1349, 1350, 1352, 1354, 1358, 1360, 1363, 1368, 1371], "truediv": [498, 830], "truncat": [20, 130, 138, 139, 152, 227, 229, 241, 273, 274, 293, 339, 870, 889, 945, 1367], "truncate_nod": [889, 945], "truncate_ragged_lin": [138, 139, 152], "truncate_str": 476, "truncate_td": 476, "trust": [431, 830, 857, 945], "try": [37, 41, 45, 46, 47, 48, 49, 57, 58, 117, 138, 139, 144, 148, 150, 152, 155, 156, 157, 182, 339, 851, 852, 862, 889, 901, 945], "try_cast": 1361, "try_parse_d": [132, 138, 139, 152], "try_parse_hive_d": [150, 155, 157], "ts_local": [462, 1075], "tseri": [455, 456, 1068, 1069], "tstamp": 951, "tstamp_tokyo": 951, "tstamp_utc": 951, "tue": [339, 342], "tuesdai": [229, 339, 870, 945], "tupl": [40, 60, 141, 143, 149, 197, 241, 248, 261, 272, 273, 274, 281, 301, 317, 339, 593, 635, 830, 889, 901, 945, 950, 951, 1222, 1243, 1340], "turn": [8, 46, 47, 48, 49, 57, 58, 138, 139, 152, 243, 244, 339, 851, 852, 862, 874, 875, 880, 889, 945], "twice": [40, 339], "two": [40, 50, 90, 91, 125, 127, 129, 141, 197, 220, 222, 244, 245, 254, 255, 267, 273, 300, 306, 319, 325, 339, 343, 349, 433, 440, 498, 501, 504, 569, 626, 671, 751, 752, 758, 760, 762, 769, 772, 806, 807, 809, 830, 866, 875, 876, 884, 885, 891, 911, 922, 928, 945, 951, 994, 1042, 1049, 1185, 1214, 1340, 1355, 1356, 1357, 1360, 1369], "two_a": 1368, "tworld": [710, 1289, 1291], "txt": [1, 12, 152, 676, 688, 1269, 1363], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 46, 47, 48, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 123, 125, 126, 127, 128, 129, 131, 138, 139, 140, 142, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 194, 197, 203, 213, 216, 222, 227, 229, 230, 242, 243, 248, 271, 276, 279, 291, 296, 297, 300, 301, 304, 316, 339, 351, 353, 356, 357, 358, 359, 360, 361, 364, 369, 370, 371, 373, 376, 387, 388, 392, 393, 394, 395, 396, 397, 398, 410, 412, 413, 414, 418, 419, 420, 421, 422, 429, 430, 436, 437, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 488, 490, 501, 504, 507, 515, 516, 517, 518, 519, 520, 521, 530, 534, 535, 537, 542, 548, 550, 568, 569, 577, 578, 592, 626, 628, 632, 633, 634, 635, 637, 638, 639, 642, 644, 646, 648, 650, 653, 655, 657, 666, 667, 668, 675, 678, 679, 680, 683, 684, 685, 686, 689, 690, 691, 693, 694, 695, 703, 704, 705, 706, 713, 714, 718, 732, 733, 734, 741, 750, 758, 761, 768, 769, 770, 771, 772, 773, 774, 776, 784, 785, 787, 788, 789, 790, 791, 792, 802, 805, 816, 817, 818, 821, 826, 830, 842, 851, 852, 861, 862, 863, 870, 874, 889, 894, 895, 901, 909, 919, 945, 950, 953, 958, 959, 971, 973, 974, 975, 976, 977, 979, 981, 982, 993, 994, 995, 997, 998, 999, 1001, 1002, 1014, 1016, 1018, 1019, 1027, 1039, 1040, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1098, 1101, 1105, 1121, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1148, 1149, 1150, 1151, 1153, 1158, 1164, 1166, 1184, 1185, 1207, 1214, 1220, 1221, 1222, 1224, 1225, 1246, 1248, 1256, 1257, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1274, 1275, 1276, 1284, 1285, 1286, 1287, 1294, 1295, 1299, 1320, 1321, 1323, 1331, 1340, 1349, 1356, 1361, 1363, 1367, 1368], "type_coercion": [46, 47, 48, 49, 57, 58, 851, 852, 862, 889, 901, 945], "type_json": 184, "type_nam": 184, "type_text": 184, "typeerror": [39, 339], "typenam": [40, 339], "typic": [126, 140, 157, 248, 339, 445, 666, 830, 951, 1054, 1193, 1248, 1340], "tz": [716, 1297], "tzinfo": [66, 142, 153, 951], "u": [40, 66, 68, 157, 170, 244, 339, 438, 440, 446, 467, 479, 713, 716, 746, 748, 771, 772, 773, 774, 780, 875, 945, 950, 951, 1047, 1049, 1055, 1080, 1092, 1294, 1297, 1353, 1364], "u1": [297, 339], "u16": [152, 1366, 1371], "u32": [12, 140, 198, 200, 206, 260, 315, 316, 320, 324, 330, 332, 339, 349, 355, 362, 363, 364, 365, 366, 369, 370, 372, 381, 397, 413, 414, 422, 423, 509, 511, 530, 534, 535, 538, 550, 555, 601, 617, 629, 637, 638, 642, 644, 646, 648, 650, 653, 655, 657, 661, 678, 688, 689, 694, 695, 696, 734, 739, 741, 745, 749, 753, 754, 761, 763, 784, 787, 800, 830, 845, 848, 855, 887, 918, 919, 923, 927, 933, 935, 945, 951, 970, 971, 972, 975, 976, 978, 987, 1014, 1018, 1019, 1021, 1033, 1123, 1150, 1151, 1154, 1166, 1171, 1216, 1224, 1225, 1240, 1259, 1269, 1270, 1275, 1276, 1323, 1327, 1329, 1340, 1349, 1357, 1358, 1359, 1363, 1368], "u64": [230, 316, 339, 507, 631, 830, 889, 919, 945, 951, 1121, 1218, 1340], "u8": [200, 294, 295, 307, 339, 634, 744, 830, 848, 945, 951, 1221, 1316, 1340, 1371], "udf": [174, 248, 262, 325, 339, 431, 578, 623, 792, 830, 857, 888, 928, 945, 1193, 1340], "ufunc": 97, "uid": 140, "uint": 1371, "uint16": [152, 426, 427, 730, 830, 951, 1036, 1037, 1311, 1321, 1324, 1340], "uint2": 1366, "uint32": [131, 160, 200, 215, 271, 316, 339, 364, 369, 370, 397, 413, 414, 422, 485, 501, 504, 530, 534, 535, 550, 632, 637, 638, 639, 642, 644, 646, 648, 650, 653, 655, 657, 678, 689, 694, 695, 734, 761, 784, 787, 830, 848, 894, 919, 945, 951, 971, 975, 976, 1002, 1014, 1018, 1019, 1099, 1101, 1150, 1151, 1166, 1224, 1225, 1259, 1270, 1275, 1276, 1323, 1324, 1340], "uint4": 1368, "uint64": [131, 230, 271, 316, 339, 369, 370, 485, 507, 534, 535, 631, 639, 642, 644, 646, 648, 650, 653, 655, 657, 830, 894, 919, 945, 951, 975, 976, 1101, 1121, 1150, 1151, 1218, 1324, 1340], "uint8": [140, 200, 295, 296, 297, 307, 339, 426, 427, 634, 730, 744, 830, 848, 945, 950, 951, 1036, 1037, 1221, 1311, 1324, 1340, 1371], "uint8_pair": 1371, "uit": [703, 1284], "uk": [685, 1266], "unabl": [99, 143], "unalias": 584, "unari": [615, 830], "unbias": [486, 487, 830, 1102, 1103, 1340], "unchang": [215, 339, 633, 734, 830, 880, 928, 945, 1099, 1220, 1323, 1340], "uncompress": [35, 41, 42, 45, 49, 144, 155, 339, 945], "undefin": [737, 830], "under": [37, 41, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 90, 91, 148, 150, 152, 155, 156, 157, 180, 181, 182, 263, 286, 339, 822, 823, 825, 826, 831, 832, 835, 837, 838, 839, 904, 945, 1332, 1334, 1336, 1341, 1346, 1347, 1348], "underestim": [215, 339, 1099, 1340], "underli": [1, 50, 65, 66, 68, 83, 91, 96, 106, 123, 125, 126, 127, 129, 140, 141, 143, 147, 148, 149, 150, 156, 165, 168, 172, 216, 217, 241, 242, 273, 291, 297, 339, 393, 438, 439, 440, 444, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 462, 464, 468, 477, 478, 479, 480, 631, 658, 676, 679, 688, 830, 863, 945, 951, 998, 1021, 1047, 1048, 1049, 1053, 1056, 1057, 1058, 1062, 1063, 1064, 1066, 1067, 1070, 1072, 1073, 1075, 1077, 1081, 1090, 1091, 1092, 1093, 1106, 1218, 1236, 1246, 1257, 1260, 1269, 1315, 1321, 1340, 1368], "understood": 792, "undo": [595, 602, 603, 605, 607, 609, 610], "unexpect": [106, 115, 140, 220, 267, 339, 577, 578, 830, 866, 891, 945, 1193, 1340], "unhelpfulli": [161, 163], "unicod": [20, 414, 690, 695, 696, 703, 714, 951, 1019, 1271, 1276, 1277, 1284, 1295, 1363], "unicodeform": [696, 1277], "unifi": [40, 296, 301, 339, 951], "uniform": [40, 339, 626, 830, 1214, 1340], "unimod": [669, 830, 1251, 1340], "union": [57, 58, 59, 561, 851, 852, 862, 889, 901, 945, 951, 1177, 1367, 1368], "uniqu": [45, 49, 51, 69, 135, 143, 165, 166, 167, 170, 172, 198, 238, 243, 259, 263, 274, 330, 339, 355, 366, 381, 429, 526, 555, 601, 626, 713, 715, 716, 720, 739, 741, 749, 800, 830, 845, 874, 933, 945, 961, 972, 987, 1039, 1141, 1171, 1200, 1214, 1294, 1296, 1297, 1301, 1327, 1329, 1340, 1356, 1358], "unique_column_valu": [263, 339], "unique_count": [830, 1340], "uniquekeepstrategi": [304, 339, 909, 945], "unit": [40, 66, 68, 135, 161, 162, 163, 164, 168, 172, 215, 339, 397, 438, 440, 446, 461, 467, 479, 485, 491, 575, 590, 713, 716, 740, 757, 771, 772, 773, 774, 780, 830, 889, 945, 951, 1002, 1047, 1049, 1055, 1074, 1080, 1092, 1099, 1101, 1107, 1191, 1294, 1297, 1328, 1340, 1371], "uniti": [177, 178, 180, 181, 182, 190, 842], "unity_catalog": 185, "univers": [194, 953], "unix": [65, 66, 446, 780, 1055], "unknown": [569, 684, 790, 1265], "unless": [40, 51, 125, 296, 301, 339, 708, 709, 805, 945, 1289, 1363], "unlik": [134, 229, 339, 870, 945], "unnam": [686, 1267], "unnest": [134, 339, 429, 626, 637, 685, 686, 705, 706, 726, 728, 741, 830, 945, 994, 1039, 1185, 1214, 1224, 1286, 1287, 1340, 1361, 1367], "unpivot": [254, 339, 884, 945], "unregist": [1351, 1352, 1353, 1368, 1370], "unsaf": [135, 830], "unset": [38, 150, 155, 167, 324, 339, 401, 402, 403, 405, 406, 462, 569, 830, 927, 1006, 1007, 1008, 1010, 1011, 1075, 1340, 1349], "unsign": [84, 85, 86, 87, 631, 830, 951, 1218, 1340], "unsigned_integ": 951, "unstabl": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 121, 133, 134, 140, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 286, 296, 301, 308, 339, 342, 343, 428, 429, 509, 578, 626, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 757, 830, 851, 852, 862, 904, 912, 945, 1022, 1038, 1039, 1123, 1214, 1226, 1229, 1231, 1232, 1319, 1324, 1340, 1345], "unstack": 339, "unstackdirect": [307, 339], "unsuit": 122, "unsupport": [39, 339], "until": [90, 229, 246, 339, 697, 698, 723, 870, 945, 1278, 1279, 1304], "up": [10, 40, 82, 141, 241, 244, 263, 273, 274, 280, 293, 339, 417, 418, 578, 690, 699, 700, 714, 830, 874, 875, 880, 899, 945, 951, 1024, 1271, 1280, 1281, 1295, 1340], "upcast": [354, 830], "upcast_integer_typ": [1, 54], "updat": [39, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192, 207, 339, 856, 945], "updated_at": [183, 186, 187], "updated_bi": [183, 186, 187], "upgrad": 102, "upheld": [880, 945], "upon": 139, "upper": [138, 139, 140, 215, 229, 339, 418, 509, 515, 569, 604, 740, 750, 769, 770, 772, 773, 788, 789, 817, 818, 830, 870, 945, 1027, 1099, 1123, 1128, 1191, 1328, 1340, 1358, 1361], "upper_bound": [229, 339, 418, 515, 569, 830, 870, 945, 1027, 1128, 1191, 1340], "uppercas": [610, 722, 1303, 1363], "upsampl": [229, 339, 870, 945], "urandom": [397, 1002], "uri": [38, 39, 140, 141, 142, 153, 154, 339], "url": [140, 141, 150, 155, 157, 177, 684, 686, 1265, 1267], "urllib": 141, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 51, 57, 58, 59, 60, 66, 82, 90, 91, 94, 98, 121, 124, 126, 127, 129, 131, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 177, 198, 199, 200, 203, 207, 209, 211, 212, 218, 219, 220, 222, 228, 229, 236, 238, 240, 241, 242, 244, 248, 254, 258, 259, 261, 262, 263, 267, 271, 272, 273, 274, 275, 277, 278, 280, 285, 286, 287, 291, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 318, 325, 339, 342, 349, 351, 353, 355, 364, 365, 388, 393, 394, 396, 409, 411, 413, 414, 415, 418, 428, 431, 434, 435, 443, 461, 462, 463, 465, 468, 476, 479, 481, 484, 485, 486, 487, 488, 492, 493, 494, 498, 509, 513, 514, 515, 527, 541, 557, 565, 569, 571, 577, 578, 581, 602, 605, 607, 609, 610, 619, 626, 629, 631, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 660, 662, 664, 665, 669, 671, 672, 674, 675, 676, 677, 679, 680, 681, 683, 684, 685, 687, 688, 689, 692, 693, 694, 695, 696, 699, 700, 701, 703, 705, 707, 709, 710, 711, 712, 713, 715, 716, 720, 723, 724, 728, 736, 742, 743, 745, 746, 747, 748, 749, 752, 753, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 778, 780, 784, 785, 787, 788, 790, 792, 793, 794, 796, 798, 799, 802, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 819, 820, 821, 826, 829, 830, 841, 842, 845, 846, 847, 848, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 870, 875, 878, 884, 891, 894, 895, 896, 897, 899, 903, 904, 905, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 928, 945, 949, 950, 951, 958, 959, 961, 990, 994, 998, 999, 1001, 1018, 1019, 1022, 1038, 1040, 1043, 1044, 1052, 1060, 1061, 1074, 1075, 1076, 1078, 1081, 1089, 1092, 1095, 1100, 1101, 1102, 1103, 1108, 1109, 1114, 1120, 1123, 1126, 1127, 1128, 1143, 1157, 1173, 1180, 1185, 1193, 1214, 1216, 1218, 1220, 1222, 1224, 1225, 1226, 1238, 1239, 1241, 1242, 1245, 1251, 1253, 1255, 1256, 1257, 1258, 1260, 1261, 1264, 1265, 1266, 1268, 1269, 1270, 1275, 1276, 1277, 1280, 1281, 1282, 1284, 1286, 1294, 1296, 1297, 1301, 1304, 1315, 1316, 1318, 1321, 1322, 1330, 1340, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1363, 1364, 1368, 1370, 1371], "usag": [168, 172, 283, 339, 951, 1246, 1340], "usd": [227, 339, 1371], "use_pyarrow": [45, 49, 138, 142, 144, 146, 150, 153, 297, 339, 945, 1321, 1340], "use_pyarrow_extension_arrai": [298, 339, 1322, 1340], "use_pyarrow_write_to_dataset": [45, 339], "use_statist": [150, 157], "user": [38, 133, 135, 140, 141, 194, 248, 262, 325, 339, 577, 578, 623, 662, 792, 830, 888, 928, 945, 949, 953, 1193, 1242, 1340], "user_conn": 140, "usernam": [138, 141, 144, 146], "userwarn": 1, "usr": 140, "usual": [98, 141, 192, 301, 339, 437, 1046], "utc": [142, 153, 437, 441, 443, 445, 462, 713, 716, 950, 951, 1046, 1050, 1054, 1075, 1294, 1297], "utc_tz": 951, "utf": [37, 46, 81, 339, 945], "utf8": [20, 138, 139, 152, 690, 703, 714, 1271, 1284, 1295], "utf8_borders_onli": 20, "utf8_ful": [20, 51, 130], "utf8_full_condens": [7, 20, 130], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [301, 339, 780, 945], "uvloop": 140, "uvw": [685, 1266], "v": [8, 9, 45, 215, 339, 661, 746, 748, 830, 1240, 1340, 1352, 1353], "v1": 32, "v2": [8, 144, 155], "val": [40, 270, 339, 578, 623, 734, 820, 830, 893, 945], "valid": [37, 40, 46, 66, 138, 140, 144, 146, 150, 152, 172, 192, 209, 215, 243, 244, 268, 339, 428, 676, 678, 684, 685, 686, 688, 693, 699, 700, 820, 830, 858, 874, 875, 892, 920, 945, 951, 1038, 1099, 1257, 1259, 1265, 1266, 1267, 1269, 1274, 1280, 1281, 1340, 1349, 1350], "validate_output_schema": [880, 945], "vals_phys": [734, 830], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 36, 37, 40, 45, 46, 49, 50, 51, 59, 60, 63, 69, 70, 78, 79, 88, 91, 100, 125, 126, 128, 129, 138, 139, 140, 141, 150, 152, 155, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 192, 196, 198, 199, 200, 207, 211, 212, 214, 217, 218, 219, 220, 224, 227, 229, 230, 231, 235, 239, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 261, 263, 264, 265, 267, 268, 271, 272, 273, 274, 275, 282, 285, 287, 288, 289, 290, 292, 293, 297, 298, 302, 303, 306, 307, 308, 309, 310, 317, 320, 321, 323, 326, 327, 329, 330, 339, 342, 343, 347, 348, 349, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 398, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 427, 428, 429, 432, 434, 435, 440, 444, 454, 459, 468, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 562, 564, 565, 566, 567, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 586, 597, 598, 599, 600, 601, 611, 612, 613, 614, 617, 619, 620, 623, 624, 626, 627, 629, 632, 633, 634, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 666, 667, 668, 669, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 714, 723, 725, 729, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 747, 748, 749, 753, 756, 758, 759, 761, 763, 764, 765, 766, 767, 777, 778, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 813, 814, 820, 830, 845, 846, 856, 859, 860, 864, 865, 866, 870, 872, 873, 874, 875, 881, 882, 883, 884, 886, 887, 890, 891, 892, 894, 900, 903, 905, 906, 908, 911, 912, 913, 923, 924, 926, 929, 930, 932, 933, 945, 951, 956, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1014, 1015, 1018, 1019, 1020, 1024, 1027, 1029, 1030, 1031, 1033, 1038, 1039, 1040, 1041, 1043, 1044, 1049, 1053, 1067, 1072, 1081, 1090, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1108, 1109, 1113, 1114, 1115, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1178, 1180, 1181, 1182, 1183, 1186, 1187, 1193, 1194, 1195, 1197, 1198, 1200, 1202, 1203, 1205, 1206, 1208, 1209, 1213, 1214, 1215, 1216, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1239, 1240, 1241, 1244, 1248, 1249, 1250, 1251, 1253, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1295, 1304, 1307, 1311, 1312, 1313, 1314, 1321, 1322, 1323, 1327, 1329, 1331, 1340, 1349, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1366, 1368, 1370, 1371], "value1": [672, 830], "value2": [672, 830], "value_a": 1368, "value_b": 1368, "value_count": [739, 830, 1340], "value_cum_sum": [427, 830], "value_cum_sum_all_fil": [427, 830], "value_nam": [254, 306, 339, 884, 911, 945], "value_var": [254, 306, 339, 884, 911, 945], "valueerror": [15, 20], "valueexcept": 790, "var": [40, 173, 339, 656, 657, 830, 945, 1340, 1357], "var_samp": 1357, "vari": [143, 149, 437, 1046, 1371], "variabl": [30, 37, 41, 45, 46, 47, 48, 49, 78, 148, 150, 152, 155, 156, 157, 171, 174, 182, 254, 294, 306, 339, 884, 911, 945, 1316, 1340, 1350, 1352, 1368], "variable_nam": [254, 306, 339, 884, 911, 945], "variad": 140, "varianc": [310, 339, 487, 527, 656, 657, 742, 819, 830, 913, 945, 1103, 1143, 1235, 1330, 1340, 1361], "variou": [140, 197, 203, 339, 830, 853, 945, 950, 951, 1340], "vector": [641, 643, 645, 647, 649, 652, 654, 656, 830, 1227, 1228, 1230, 1233, 1234, 1235, 1340], "vector_index_format": 185, "vectoris": [455, 456, 1068, 1069], "vein": 192, "verbos": [29, 161, 163, 192, 685, 1266], "veri": [140, 241, 303, 339, 578, 830, 928, 1362], "verifi": [244, 339, 875, 945], "versicolor": [339, 342], "version": [38, 39, 56, 60, 124, 138, 139, 142, 143, 153, 160, 165, 166, 167, 168, 172, 175, 182, 196, 198, 208, 230, 243, 254, 279, 286, 296, 297, 301, 315, 320, 339, 342, 431, 443, 455, 456, 468, 479, 500, 507, 585, 586, 592, 596, 633, 675, 683, 728, 743, 752, 760, 804, 809, 830, 845, 857, 862, 874, 884, 898, 904, 917, 918, 923, 945, 951, 1052, 1060, 1061, 1068, 1069, 1081, 1092, 1120, 1121, 1220, 1256, 1264, 1319, 1321, 1324, 1340, 1345], "versu": [207, 339, 856, 945], "vertic": [59, 217, 307, 311, 339, 675, 691, 1256, 1272], "vertical_relax": 59, "via": [30, 138, 139, 140, 150, 152, 155, 156, 157, 195, 197, 208, 241, 273, 339, 431, 578, 686, 830, 857, 945, 954, 1267], "view": [189, 578, 830], "visibl": [17, 215, 339, 1099, 1340], "visit": [428, 830, 1038, 1340], "visual": [236, 238, 339, 593, 901, 945], "volk": 134, "vote": [684, 686, 1265, 1267], "vowel": [699, 700, 1280, 1281], "vstack": [59, 217, 339], "w": [40, 140, 229, 274, 339, 678, 682, 684, 686, 746, 748, 870, 945, 951, 1259, 1263, 1265, 1267, 1290, 1352, 1353, 1356], "w_i": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "wa": [38, 56, 98, 143, 208, 296, 297, 339, 342, 431, 634, 701, 774, 830, 857, 945, 951, 1221, 1282, 1321, 1340, 1345], "wai": [90, 91, 123, 125, 126, 127, 129, 147, 148, 156, 228, 242, 262, 285, 318, 339, 463, 623, 672, 684, 761, 826, 830, 854, 861, 869, 888, 895, 903, 914, 921, 928, 945, 949, 1076, 1265], "walk": 759, "want": [58, 126, 128, 138, 143, 152, 192, 217, 248, 259, 271, 286, 339, 413, 436, 494, 577, 578, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 665, 677, 694, 699, 700, 701, 755, 764, 769, 772, 778, 802, 805, 821, 830, 852, 904, 920, 945, 951, 1018, 1045, 1106, 1193, 1258, 1275, 1280, 1281, 1282, 1340, 1355], "warehous": 141, "warn": [93, 94, 97, 98, 101, 108, 110, 111, 121, 244, 339, 619, 788, 789, 830, 875, 945, 1340], "watermark": [45, 339], "wb": [40, 339], "we": [45, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 197, 207, 208, 229, 244, 263, 271, 309, 339, 342, 431, 458, 463, 476, 509, 541, 569, 577, 578, 639, 642, 644, 646, 648, 650, 653, 655, 657, 686, 699, 700, 718, 768, 769, 770, 771, 772, 773, 790, 817, 818, 820, 830, 856, 857, 866, 870, 875, 880, 891, 894, 945, 1071, 1076, 1089, 1123, 1157, 1193, 1267, 1281, 1299, 1340, 1345, 1352], "weather": [699, 700, 1280, 1281], "wed": [339, 342], "wednesdai": [229, 339, 465, 468, 870, 945, 1078, 1081], "week": [229, 244, 271, 309, 339, 436, 458, 463, 476, 478, 485, 639, 642, 644, 646, 648, 650, 653, 655, 657, 755, 769, 770, 772, 773, 774, 817, 818, 830, 870, 875, 894, 945, 951, 1045, 1071, 1076, 1089, 1091, 1101, 1340, 1364], "week_mask": [436, 755, 1045], "weekdai": [444, 459], "weekend": [436, 755, 1045], "weekli": [229, 339, 476, 870, 945, 1089], "weghorst": [686, 1267], "weight": [134, 484, 485, 486, 487, 640, 641, 643, 645, 647, 649, 652, 654, 656, 669, 830, 1100, 1101, 1102, 1103, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1251, 1340], "wei\u00df": 1363, "well": [40, 138, 139, 140, 152, 339, 515, 809, 830, 1128, 1340, 1368], "were": [192, 633, 634, 826, 830, 1220, 1221, 1340], "west": [69, 245, 339, 876, 945], "what": [197, 259, 339, 436, 577, 677, 701, 830, 1045, 1258, 1282], "whatev": 192, "when": [10, 14, 17, 19, 23, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 66, 82, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 133, 134, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 168, 172, 192, 199, 207, 213, 215, 217, 219, 220, 222, 229, 243, 245, 248, 255, 262, 268, 272, 274, 277, 278, 282, 285, 291, 294, 296, 297, 301, 302, 304, 308, 314, 339, 383, 396, 413, 414, 418, 436, 484, 486, 487, 493, 562, 569, 590, 623, 633, 634, 663, 671, 672, 677, 683, 687, 689, 690, 694, 695, 701, 703, 708, 709, 710, 713, 714, 753, 755, 764, 778, 788, 830, 846, 856, 865, 870, 874, 876, 880, 885, 892, 896, 897, 900, 903, 908, 909, 912, 916, 942, 945, 989, 1001, 1018, 1019, 1027, 1040, 1045, 1099, 1100, 1102, 1103, 1106, 1109, 1178, 1220, 1221, 1239, 1241, 1244, 1258, 1264, 1268, 1270, 1271, 1275, 1276, 1282, 1284, 1289, 1290, 1291, 1294, 1295, 1315, 1316, 1321, 1340, 1355, 1368], "when_matched_update_al": [39, 339], "when_not_matched_insert_al": [39, 339], "where": [40, 51, 98, 140, 141, 143, 211, 212, 217, 220, 229, 241, 245, 254, 263, 267, 273, 286, 287, 296, 301, 306, 308, 310, 339, 365, 468, 478, 481, 483, 485, 494, 565, 571, 577, 614, 632, 661, 669, 672, 674, 701, 721, 742, 754, 760, 762, 806, 807, 809, 811, 819, 820, 830, 859, 860, 866, 870, 876, 884, 891, 904, 905, 911, 912, 913, 945, 971, 1081, 1091, 1095, 1097, 1101, 1106, 1110, 1205, 1240, 1251, 1255, 1282, 1302, 1330, 1331, 1340, 1349, 1357, 1367, 1368, 1370], "wherea": [138, 152, 271, 339, 411, 415, 463, 476, 611, 612, 639, 830, 894, 945, 1076, 1089, 1202, 1203, 1340], "wherev": [40, 248, 325, 339, 578, 830, 1193, 1340], "whether": [37, 46, 127, 129, 134, 143, 149, 150, 155, 157, 172, 176, 214, 240, 244, 280, 285, 339, 351, 353, 367, 368, 448, 464, 506, 532, 533, 619, 662, 672, 687, 689, 753, 830, 875, 880, 899, 903, 945, 951, 958, 959, 973, 974, 1017, 1022, 1057, 1077, 1098, 1119, 1120, 1148, 1149, 1268, 1270, 1340, 1352, 1368], "which": [1, 6, 10, 20, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 126, 128, 138, 139, 140, 141, 142, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 168, 171, 173, 192, 199, 200, 207, 208, 211, 212, 215, 217, 218, 228, 229, 234, 243, 244, 263, 271, 279, 296, 297, 302, 304, 309, 339, 351, 388, 396, 431, 436, 458, 463, 465, 476, 485, 491, 515, 517, 520, 522, 523, 524, 525, 569, 577, 578, 590, 592, 639, 642, 644, 646, 648, 650, 653, 655, 657, 700, 718, 755, 769, 770, 772, 773, 774, 788, 789, 817, 818, 820, 830, 846, 848, 851, 854, 856, 857, 859, 860, 861, 862, 870, 874, 875, 894, 898, 908, 909, 914, 945, 951, 994, 1001, 1045, 1071, 1076, 1078, 1089, 1099, 1101, 1106, 1107, 1128, 1131, 1134, 1136, 1137, 1138, 1139, 1185, 1241, 1299, 1319, 1321, 1340, 1350, 1356, 1368, 1371], "while": [39, 58, 139, 142, 143, 153, 157, 168, 172, 182, 192, 241, 254, 303, 306, 308, 339, 414, 633, 695, 830, 852, 884, 911, 912, 945, 1019, 1220, 1276, 1340], "white": [40, 339], "whitespac": [130, 708, 709, 710, 1289, 1290, 1291, 1363], "whole": [577, 671, 672, 684, 830, 928, 945, 1265], "whose": [51, 244, 263, 339, 488, 776, 830, 875, 945, 951], "why": [851, 945], "wide": [140, 227, 254, 263, 306, 307, 339, 884, 911, 945], "width": [26, 40, 60, 138, 139, 152, 339, 342, 568, 757, 945, 1184, 1340, 1345], "wiki": 20, "wikipedia": 20, "wildcard": [135, 488, 724, 764, 765, 778, 804, 826, 830], "win_loss": [40, 339], "window": [138, 139, 152, 229, 271, 339, 428, 484, 486, 487, 578, 619, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 758, 806, 807, 830, 870, 894, 945, 1038, 1100, 1102, 1103, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1340], "window_s": [640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 806, 807, 830, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1340], "windowmappingstrategi": [619, 830], "winter": [687, 689, 699, 700, 1268, 1270], "wise": [40, 51, 140, 222, 339, 356, 357, 358, 359, 360, 361, 419, 420, 421, 489, 573, 666, 667, 668, 732, 733, 778, 804, 830, 962, 963, 964, 965, 966, 967, 1029, 1030, 1031, 1104, 1189, 1190, 1248, 1249, 1250, 1313, 1314, 1340], "wish": [199, 302, 339, 408, 409, 735, 736, 830, 846, 908, 945, 1013, 1325, 1340], "with_column": [1, 12, 54, 57, 58, 133, 229, 262, 271, 301, 307, 314, 339, 348, 350, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 381, 382, 383, 384, 388, 393, 394, 396, 397, 410, 411, 413, 414, 415, 418, 423, 424, 425, 426, 427, 429, 432, 436, 437, 439, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 477, 478, 480, 482, 483, 485, 492, 493, 498, 503, 505, 507, 513, 514, 515, 518, 519, 521, 522, 523, 524, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 577, 578, 598, 600, 602, 603, 605, 607, 609, 610, 613, 614, 615, 619, 620, 623, 624, 626, 629, 633, 634, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 663, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 718, 719, 721, 722, 723, 725, 728, 729, 734, 737, 744, 746, 748, 751, 755, 756, 757, 758, 759, 764, 765, 767, 768, 770, 771, 775, 785, 788, 789, 791, 794, 796, 799, 810, 814, 816, 818, 820, 826, 830, 851, 852, 862, 870, 872, 888, 889, 894, 901, 916, 945, 951, 1039, 1075, 1214, 1270, 1340, 1368], "with_column_nam": 152, "with_columns_seq": [339, 945], "with_context": 945, "with_field": [578, 830], "with_replac": [275, 339, 557, 660, 830, 1173, 1238, 1340], "with_row_count": [339, 945], "with_row_index": [1, 271, 315, 339, 642, 644, 646, 648, 650, 653, 655, 657, 830, 918, 945, 1239, 1340, 1345], "within": [45, 60, 70, 78, 161, 162, 163, 164, 183, 184, 186, 228, 229, 230, 244, 271, 309, 339, 507, 629, 672, 830, 870, 875, 894, 945, 1121, 1340, 1368], "without": [1, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 56, 57, 58, 67, 69, 73, 98, 101, 130, 133, 134, 142, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 243, 245, 286, 296, 297, 301, 307, 308, 339, 342, 343, 428, 429, 509, 578, 626, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 677, 687, 689, 701, 757, 761, 788, 789, 808, 830, 851, 852, 862, 874, 876, 904, 912, 945, 949, 1017, 1022, 1038, 1039, 1123, 1214, 1226, 1229, 1231, 1232, 1258, 1268, 1270, 1282, 1319, 1321, 1324, 1340, 1345, 1370], "without_fil": [142, 153, 154], "wod": [710, 1291], "womp": [305, 339, 910, 945], "word": [141, 699, 700, 709, 710, 721, 1302], "work": [40, 67, 69, 73, 139, 158, 278, 314, 339, 351, 353, 389, 413, 414, 417, 418, 488, 497, 541, 570, 577, 578, 602, 603, 605, 607, 609, 610, 619, 690, 694, 695, 703, 714, 738, 788, 830, 897, 916, 945, 949, 951, 958, 959, 995, 1018, 1019, 1024, 1027, 1113, 1157, 1186, 1271, 1275, 1276, 1284, 1295, 1326, 1340], "workaround": 339, "workbook": [40, 143, 149, 339], "workday_raas_format": 185, "worker": 945, "working_with_conditional_format": [40, 339], "working_with_sparklin": [40, 339], "worksheet": [40, 143, 149, 339], "workspac": 177, "workspace_url": 177, "world": [1, 20, 677, 701, 708, 709, 710, 951, 1164, 1258, 1282, 1289, 1290, 1291, 1351, 1354], "wors": [903, 945], "worth": [541, 1157], "worthwhil": [161, 163], "would": [97, 138, 139, 152, 197, 297, 301, 339, 342, 364, 375, 436, 546, 577, 578, 589, 619, 629, 753, 755, 830, 970, 981, 1045, 1162, 1216, 1321, 1340, 1345, 1366], "wrap": [80, 130, 410, 515, 577, 830, 1014, 1340], "wrap_numer": [410, 830, 1014, 1340], "wrapper": [58, 852, 945], "writabl": [35, 37, 41, 42, 43, 44, 45, 279, 297, 339, 1321, 1340], "write": [35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 137, 139, 144, 192, 203, 339, 418, 593, 596, 830, 878, 901, 945, 951, 1027, 1340], "write_avro": 339, "write_clipboard": [137, 339], "write_csv": [36, 139, 152, 339], "write_databas": 339, "write_delta": 339, "write_excel": 339, "write_ipc": [144, 339], "write_ipc_stream": 339, "write_json": 339, "write_markdown_frame_to_stdout": 192, "write_ndjson": [43, 339], "write_parquet": 339, "write_t": [45, 339], "write_to_dataset": [45, 339], "writeabl": [297, 339, 1321, 1340], "writer": [39, 339], "writer_properti": [39, 339], "writerproperti": [39, 339], "written": [6, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 279, 339, 592, 898, 945], "ww": [1363, 1370], "www": [696, 726, 1277], "x": [27, 51, 59, 82, 100, 124, 130, 138, 139, 141, 143, 149, 152, 165, 166, 168, 196, 215, 233, 236, 238, 243, 263, 273, 274, 303, 306, 307, 339, 342, 348, 350, 352, 371, 376, 397, 423, 430, 482, 483, 498, 503, 505, 507, 529, 536, 548, 574, 576, 577, 578, 598, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 618, 624, 632, 633, 634, 638, 666, 669, 705, 728, 729, 734, 737, 744, 746, 748, 751, 752, 758, 764, 765, 767, 778, 790, 791, 794, 796, 799, 804, 809, 814, 820, 830, 874, 880, 902, 904, 911, 945, 950, 951, 982, 1021, 1033, 1109, 1193, 1220, 1221, 1248, 1251, 1286, 1319, 1323, 1324, 1340, 1345, 1352, 1353, 1356, 1362, 1368, 1370], "x00": [392, 393, 394, 395, 396, 398, 679, 997, 998, 999, 1000, 1001, 1003, 1260], "x01": [396, 1001], "x05": [396, 1001], "x07": 397, "x1": 397, "x10": [396, 1001], "x80": 397, "x83": 397, "x88": 397, "x8e": 397, "x99": 397, "x_": [485, 830, 1101, 1340], "x_0": [307, 339, 484, 485, 486, 487, 830, 1100, 1101, 1102, 1103, 1340], "x_1": [307, 339, 485, 830, 1101, 1340], "x_2": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "x_i": [485, 830, 1101, 1340], "x_invers": [624, 830], "x_pow_8": 1362, "x_round": 1362, "x_round_1": 1362, "x_squar": [624, 830], "x_t": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "x_uniqu": [601, 830], "x_y": [376, 548], "xb": 397, "xb9neq": 397, "xbd": 397, "xc14": 397, "xd3": 397, "xdist": 1371, "xee": 397, "xf4v": 397, "xf9": 397, "xfb": 397, "xff": [392, 393, 394, 395, 398, 679, 997, 998, 999, 1000, 1003, 1260], "xi": [685, 1266], "xl": 143, "xlog2": [600, 624, 830], "xlsb": 143, "xlsx": [40, 143, 339], "xlsx2csv": [143, 160], "xlsxwriter": [40, 160, 339], "xor": [407, 830, 1012, 1340, 1359], "xor_xi": [744, 830], "xx": [10, 52, 54, 172, 207, 286, 339, 856, 945, 951, 1356, 1363, 1370], "xxx": [211, 339, 726, 859, 945], "xy": [52, 54], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 348, 678, 685, 830, 1259, 1266, 1317, 1340], "y": [27, 51, 59, 82, 100, 124, 130, 165, 166, 168, 196, 215, 236, 238, 243, 263, 273, 274, 303, 306, 307, 339, 342, 348, 350, 352, 371, 376, 397, 465, 468, 482, 483, 503, 505, 529, 536, 548, 576, 578, 601, 603, 605, 607, 609, 610, 613, 614, 618, 632, 633, 634, 638, 713, 715, 716, 728, 737, 744, 746, 748, 751, 752, 767, 774, 790, 794, 796, 799, 809, 814, 830, 874, 902, 904, 911, 945, 950, 951, 982, 1021, 1078, 1081, 1220, 1221, 1294, 1296, 1297, 1340, 1345, 1356, 1363, 1364, 1370], "y_": [484, 485, 486, 487, 830, 1100, 1101, 1102, 1103, 1340], "y_0": [307, 339, 484, 485, 486, 487, 830, 1100, 1101, 1102, 1103, 1340], "y_1": [307, 339], "y_i": [485, 830, 1101, 1340], "y_mul": 728, "y_t": [484, 486, 487, 830, 1100, 1102, 1103, 1340], "y_uniqu": [601, 830], "ya": [703, 1284], "ya29": 154, "year": [229, 244, 271, 286, 309, 339, 436, 448, 449, 458, 459, 461, 463, 476, 477, 639, 642, 644, 646, 648, 650, 653, 655, 657, 755, 768, 769, 770, 771, 772, 773, 817, 818, 830, 870, 875, 894, 945, 951, 1045, 1057, 1058, 1071, 1072, 1074, 1076, 1089, 1090, 1364], "yellow": [339, 343, 392, 393, 394, 395, 398], "yield": [127, 129, 138, 139, 140, 152, 215, 217, 240, 303, 339, 498, 577, 619, 830, 945, 1099, 1106, 1340], "you": [1, 10, 14, 40, 45, 49, 51, 58, 59, 123, 125, 126, 127, 128, 129, 135, 138, 139, 140, 141, 143, 144, 147, 148, 152, 156, 158, 192, 199, 217, 220, 229, 240, 241, 244, 248, 259, 263, 267, 271, 272, 273, 274, 286, 293, 296, 302, 303, 304, 306, 325, 339, 342, 408, 409, 413, 436, 455, 456, 458, 462, 465, 468, 488, 494, 515, 541, 569, 577, 578, 593, 619, 624, 631, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 665, 677, 694, 699, 700, 701, 721, 724, 735, 736, 755, 764, 769, 772, 774, 778, 788, 792, 802, 805, 809, 821, 830, 846, 852, 866, 870, 875, 891, 894, 901, 904, 908, 909, 911, 920, 928, 945, 949, 951, 1013, 1018, 1045, 1068, 1069, 1075, 1078, 1081, 1106, 1128, 1157, 1193, 1212, 1218, 1258, 1275, 1280, 1281, 1282, 1302, 1319, 1325, 1340, 1345, 1350, 1355, 1371], "your": [38, 40, 50, 51, 91, 133, 138, 139, 140, 141, 143, 158, 192, 241, 243, 248, 273, 274, 277, 293, 313, 318, 325, 339, 342, 441, 485, 500, 578, 686, 713, 715, 716, 723, 792, 830, 874, 880, 896, 915, 921, 928, 945, 949, 1050, 1101, 1193, 1267, 1294, 1296, 1297, 1304, 1340, 1345, 1371], "yy": [10, 52, 54, 172, 207, 286, 339, 856, 945, 951, 1356, 1363, 1370], "yyi": [211, 339, 726, 859, 945], "yyyi": [40, 339], "yz": [52, 54], "z": [40, 59, 82, 130, 166, 215, 236, 238, 243, 273, 274, 303, 306, 307, 339, 348, 350, 352, 507, 536, 578, 603, 605, 607, 609, 610, 618, 632, 633, 634, 677, 685, 687, 689, 701, 713, 716, 746, 748, 767, 794, 796, 799, 805, 809, 814, 830, 874, 902, 904, 911, 945, 950, 951, 1109, 1220, 1221, 1258, 1266, 1268, 1270, 1282, 1294, 1297, 1340, 1352, 1356, 1368, 1370], "z_0": [307, 339], "z_1": [307, 339], "zap": 951, "zero": [28, 40, 123, 124, 136, 138, 139, 144, 146, 150, 167, 170, 196, 219, 229, 241, 272, 286, 291, 297, 298, 339, 493, 569, 574, 661, 669, 723, 737, 830, 849, 865, 870, 945, 1026, 1109, 1185, 1251, 1304, 1315, 1321, 1322, 1340, 1362, 1368], "zero_copy_onli": [1321, 1340], "zfill": [698, 744, 830, 1279], "zip": 1371, "zip_with": [222, 339, 1340], "zone": [66, 168, 169, 172, 437, 441, 462, 485, 716, 771, 772, 773, 830, 951, 1046, 1050, 1075, 1101, 1297, 1340], "zoneinfo": [66, 951], "zoom": [40, 339], "zstd": [39, 41, 42, 45, 47, 49, 339, 945], "zz": [172, 207, 286, 339, 856, 945, 1356, 1363, 1370], "zzz": 726, "\u03bc": [130, 200, 229, 241, 271, 273, 274, 293, 309, 339, 437, 438, 440, 441, 442, 443, 445, 447, 450, 452, 453, 455, 456, 457, 458, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 639, 642, 644, 646, 648, 650, 653, 655, 657, 713, 716, 771, 772, 773, 774, 780, 830, 848, 870, 894, 945, 951, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1061, 1062, 1066, 1068, 1069, 1070, 1071, 1075, 1076, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1294, 1297, 1363], "\u0441\u0438\u043d\u0438\u0439": 1363, "\u0967\u096f\u096f\u096f": 951, "\u0968\u0966\u096d\u096d": 951, "\u4eac\u90fd": 951, "\u5927\u962a": 951, "\u6771\u4eac": [413, 414, 694, 695, 951, 1018, 1019, 1275, 1276], "\u90fd\u5e02": 951, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [696, 1277], "\uff54\uff45\uff53\uff54": 1363, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1363, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1363, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1363, "\ud835\udf0b": 1362}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1356, 1369], "IF": 1360, "__array__": [194, 953], "__arrow_c_stream__": [195, 954], "__dataframe__": 196, "__getitem__": [197, 955], "__iter__": 317, "ab": [347, 956, 1362], "aco": 1365, "acosd": 1365, "add": 348, "add_business_dai": [436, 1045], "agg": [318, 921], "agg_group": 349, "aggreg": [193, 346, 844, 952, 1357], "alia": [350, 957], "alias": [1357, 1362, 1363], "align_fram": 51, "all": [319, 351, 367, 532, 745, 922, 958, 973, 1148, 1369], "all_horizont": 746, "and_": 352, "ani": [353, 368, 533, 747, 959, 974, 1149], "any_horizont": 748, "api": [1, 52, 53, 54, 55, 842, 1368], "append": [354, 960], "approx_n_uniqu": [198, 355, 749, 845, 961], "arang": 750, "arcco": [356, 962], "arccosh": [357, 963], "arcsin": [358, 964], "arcsinh": [359, 965], "arctan": [360, 966], "arctan2": 751, "arctan2d": 752, "arctanh": [361, 967], "arg_max": [362, 369, 534, 968, 975, 1150], "arg_min": [363, 370, 535, 969, 976, 1151], "arg_sort": [364, 970], "arg_sort_bi": 753, "arg_tru": [365, 971], "arg_uniqu": [366, 972], "arg_wher": 754, "arr": [367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996], "arrai": [60, 822, 1332, 1358], "array_agg": 1358, "array_contain": 1358, "array_get": 1358, "array_length": 1358, "array_low": 1358, "array_mean": 1358, "array_revers": 1358, "array_sum": 1358, "array_to_str": 1358, "array_uniqu": 1358, "array_upp": 1358, "asin": 1365, "asind": 1365, "assert": 1371, "assert_frame_equ": 161, "assert_frame_not_equ": 162, "assert_series_equ": 163, "assert_series_not_equ": 164, "atan": 1365, "atan2": 1365, "atan2d": 1365, "atand": 1365, "attribut": [334, 940, 1333], "avail": 1, "avg": 1357, "avro": 843, "backward_fil": 391, "base_utc_offset": [437, 1046], "batched_read": 132, "batchedcsvread": 132, "bin": [392, 393, 394, 395, 396, 397, 398, 997, 998, 999, 1000, 1001, 1002, 1003], "binari": [61, 823, 836, 1334], "bit_and": 1359, "bit_count": 1359, "bit_length": 1363, "bit_or": 1359, "bit_xor": 1359, "bitwis": 1359, "bitwise_and": [399, 1004], "bitwise_count_on": [400, 1005], "bitwise_count_zero": [401, 1006], "bitwise_leading_on": [402, 1007], "bitwise_leading_zero": [403, 1008], "bitwise_or": [404, 1009], "bitwise_trailing_on": [405, 1010], "bitwise_trailing_zero": [406, 1011], "bitwise_xor": [407, 1012], "boolean": [62, 824, 1335], "bottom_k": [199, 408, 846, 1013], "bottom_k_bi": 409, "build_info": 56, "business_day_count": 755, "cach": 847, "cancel": 937, "cast": [200, 410, 848, 1014, 1366], "cast_time_unit": [438, 1047], "cat": [411, 412, 413, 414, 415, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "catalog": [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "cataloginfo": 183, "categor": 63, "categori": [825, 1336], "categoricalremappingwarn": 93, "cbrt": [416, 1023, 1362], "ceil": [417, 1024, 1362], "centuri": [439, 1048], "chronoformatwarn": 94, "chunk_length": 1025, "claus": 1356, "clear": [201, 849, 1026], "clip": [418, 1027], "clipboard": 843, "clone": [202, 850, 1028], "cloud": 843, "co": [419, 1029, 1365], "coalesc": [756, 1360], "col": 826, "collect": 851, "collect_al": 57, "collect_all_async": 58, "collect_async": 852, "collect_schema": [203, 853], "column": [165, 166, 204, 827, 854], "columninfo": 184, "columnnotfounderror": 95, "combin": [440, 1049], "comparison": [836, 1344], "comput": [335, 828, 1337], "computeerror": 96, "concat": [59, 536, 675, 1152, 1256, 1363], "concat_arr": 757, "concat_list": 758, "concat_str": 759, "concat_w": 1363, "condit": 1360, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 192], "conjunct": 836, "contain": [371, 392, 537, 676, 977, 997, 1153, 1257], "contains_ani": [677, 1258], "context": 192, "convers": 841, "convert_time_zon": [441, 1050], "corr": [205, 760], "cosd": 1365, "cosh": [420, 1030], "cot": [421, 1031, 1365], "cotd": 1365, "count": [206, 320, 422, 761, 855, 923, 1032, 1357], "count_match": [372, 538, 678, 978, 1154, 1259], "cov": 762, "creat": 1370, "create_list_strategi": 167, "credenti": 843, "credentialprovid": 31, "credentialprovideraw": 32, "credentialproviderazur": 33, "credentialprovidergcp": 34, "csv": [132, 843], "cum_count": [423, 763, 1033], "cum_fold": 764, "cum_max": [424, 1034], "cum_min": [425, 1035], "cum_prod": [426, 1036], "cum_reduc": 765, "cum_sum": [427, 766, 1037], "cum_sum_horizont": 767, "cumulative_ev": [428, 1038], "customufuncwarn": 97, "cut": [429, 1039], "dai": [444, 1053], "data": 344, "databas": 843, "datafram": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 168, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339], "dataorientationwarn": 98, "dataset": 843, "datasourceformat": 185, "datatyp": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 344], "date": [65, 442, 768, 1051, 1363], "date_part": 1364, "date_rang": [769, 770], "datetim": [66, 443, 771, 1052], "datetime_rang": [772, 773], "decim": 67, "decod": [393, 679, 998, 1260], "decor": 192, "degre": [430, 1365], "delet": 1370, "delta": 843, "describ": [207, 856, 1040], "descript": [336, 941, 1338], "deseri": [208, 431, 857], "diff": [432, 539, 1041, 1155], "disable_string_cach": 90, "distinct": 1356, "div": 1362, "document": 1368, "dot": [433, 1042], "drop": [209, 858, 1370], "drop_in_plac": 210, "drop_nan": [211, 434, 859, 1043], "drop_nul": [212, 435, 540, 860, 1044, 1156], "dst_offset": [445, 1054], "dt": [436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093], "dtype": [169, 213, 861, 1094], "duplicateerror": 99, "durat": [68, 774], "element": 775, "enable_string_cach": 91, "encod": [394, 680, 999, 1261], "ends_with": [395, 411, 681, 1000, 1015, 1262, 1363], "engine_config": 920, "entropi": [481, 1095], "enum": 69, "epoch": [446, 1055], "eq": [482, 582, 1096], "eq_miss": [483, 1097], "equal": [214, 1098], "error": 345, "escape_regex": [92, 682, 1263], "estimated_s": [215, 1099], "eval": [541, 1157], "ewm_mean": [484, 1100], "ewm_mean_bi": [485, 1101], "ewm_std": [486, 1102], "ewm_var": [487, 1103], "exampl": [1, 951, 1371], "excel": 843, "except": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 345, 1369], "exclud": [488, 776], "execut": 1349, "execute_glob": 1350, "exp": [489, 1104, 1362], "explain": [862, 1370], "explod": [216, 373, 490, 542, 683, 863, 979, 1105, 1158, 1264], "export": [337, 1339], "expr": [347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744], "express": [830, 949, 1368], "extend": [1, 217, 1106], "extend_const": [491, 1107], "extract": [684, 1265, 1364], "extract_al": [685, 1266], "extract_group": [686, 1267], "extract_mani": [687, 1268], "feather": 843, "fetch": 938, "fetch_block": 939, "field": [70, 724, 1305, 1306], "fill_nan": [218, 492, 864, 1108], "fill_nul": [219, 493, 865, 1109], "filter": [220, 494, 866, 1110], "find": [688, 1269], "find_mani": [689, 1270], "first": [321, 374, 495, 543, 777, 867, 924, 980, 1111, 1159, 1357], "flag": [221, 1112], "flatten": 496, "float32": 71, "float64": 72, "floor": [497, 1113, 1362], "floordiv": 498, "fold": [222, 778], "format": 779, "forward_fil": 499, "frame": 1368, "from": 1356, "from_arrow": 123, "from_datafram": 124, "from_dict": [125, 126], "from_epoch": 780, "from_json": 500, "from_numpi": 127, "from_panda": 128, "from_record": 129, "from_repr": 130, "function": [1, 829, 841, 951, 1361], "gather": [501, 544, 1114, 1160], "gather_everi": [223, 502, 545, 868, 1115, 1161], "ge": [503, 1116], "get": [375, 504, 546, 981, 1162], "get_categori": [412, 1016], "get_chunk": 1117, "get_column": [224, 226], "get_column_index": 225, "get_index_typ": 131, "get_polars_schema": 188, "get_table_info": 178, "glimps": 227, "global": 1368, "gpuengin": [920, 942], "greatest": 1360, "group": [781, 1356], "group_bi": [228, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 869, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936], "group_by_dynam": [229, 870], "groupbi": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 943], "gt": [505, 1118], "has_multiple_output": 583, "has_nul": [506, 1119], "has_valid": 1120, "hash": [507, 1121], "hash_row": 230, "have": 1356, "head": [231, 322, 508, 547, 690, 782, 871, 925, 1122, 1163, 1271], "height": 232, "helper": 1371, "hist": [509, 1123], "hour": [447, 1056], "hstack": 233, "iceberg": 843, "ifnul": 1360, "implod": [510, 783, 1124], "import": 951, "in_process": [937, 938, 939], "index": 0, "index_of": [511, 1125], "initcap": 1363, "inprocessqueri": [937, 938, 939, 944], "input": 843, "insert_column": 234, "inspect": [512, 872], "instanc": 192, "int128": 73, "int16": 74, "int32": 75, "int64": 76, "int8": 77, "int_rang": [784, 785], "interfac": 1367, "interpol": [235, 513, 873, 1126], "interpolate_bi": [514, 1127], "intersect": 1369, "introduct": 1368, "invalidoperationerror": 100, "io": [132, 133, 949], "ipc": 843, "is_between": [515, 1128], "is_column": 584, "is_column_select": 585, "is_dupl": [236, 516, 1129], "is_empti": [237, 1130], "is_finit": [517, 1131], "is_first_distinct": [518, 1132], "is_in": [519, 1133], "is_infinit": [520, 1134], "is_last_distinct": [521, 1135], "is_leap_year": [448, 1057], "is_liter": 586, "is_loc": 1017, "is_nan": [522, 1136], "is_not_nan": [523, 1137], "is_not_nul": [524, 1138], "is_nul": [525, 1139], "is_regex_project": 587, "is_sort": 1140, "is_uniqu": [238, 526, 1141], "iso_year": [449, 1058], "item": [239, 1142], "iter_column": 240, "iter_row": 241, "iter_slic": 242, "join": [243, 376, 548, 691, 874, 982, 1164, 1272, 1356], "join_asof": [244, 875], "join_wher": [245, 876], "json": 843, "json_decod": [692, 1273], "json_encod": [725, 1307], "json_norm": 134, "json_path_match": [693, 1274], "keep": 602, "kurtosi": [527, 1143], "lake": 843, "last": [323, 377, 528, 549, 786, 877, 926, 983, 1144, 1165, 1357], "lazi": [246, 878], "lazyfram": [46, 47, 48, 49, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 945], "lazygroupbi": [921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936], "le": [529, 1145], "least": 1360, "left": 1363, "len": [324, 530, 550, 787, 927, 1146, 1166], "len_byt": [413, 694, 1018, 1275], "len_char": [414, 695, 1019, 1276], "length": 1363, "limit": [247, 531, 879, 1147, 1356], "linear_spac": [788, 789], "list": [78, 170, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 831, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1341], "list_catalog": 179, "list_namespac": 180, "list_tabl": 181, "lit": 790, "ln": 1362, "load": [2, 192], "load_from_fil": 3, "load_profil": 171, "log": [572, 1188, 1362], "log10": [573, 1189, 1362], "log1p": [574, 1190, 1362], "log2": 1362, "lower": 1363, "lower_bound": [575, 1191], "lt": [576, 1192], "ltrim": 1363, "manag": 192, "manipul": [341, 834, 947, 1343], "map": 603, "map_batch": [577, 791, 880], "map_el": [578, 1193], "map_field": 604, "map_group": [325, 792, 928], "map_row": 248, "mapwithoutreturndtypewarn": 101, "math": 1362, "max": [249, 326, 378, 551, 579, 793, 881, 929, 984, 1059, 1167, 1194, 1357], "max_horizont": [250, 794], "mean": [251, 327, 552, 580, 795, 882, 930, 1060, 1168, 1195], "mean_horizont": [252, 796], "median": [253, 328, 379, 553, 581, 797, 883, 931, 985, 1061, 1169, 1196, 1357], "melt": [254, 884], "merge_sort": [255, 885], "meta": [582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 832], "metadata": 948, "method": 1368, "microsecond": [450, 1062], "millennium": [451, 1063], "millisecond": [452, 1064], "min": [256, 329, 380, 554, 597, 798, 886, 932, 986, 1065, 1170, 1197, 1357], "min_horizont": [257, 799], "minut": [453, 1066], "miscellan": [340, 833, 841, 946, 1342], "mod": [598, 1362], "mode": [599, 1198], "moduleupgraderequirederror": 102, "month": [454, 1067], "month_end": [455, 1068], "month_start": [456, 1069], "mul": 600, "multipl": 192, "n_chunk": [258, 1199], "n_uniqu": [259, 330, 381, 555, 601, 800, 933, 987, 1171, 1200], "name": [602, 603, 604, 605, 606, 607, 608, 609, 610, 827, 835, 1201, 1369], "namespaceinfo": 186, "nan_max": [611, 1202], "nan_min": [612, 1203], "nanosecond": [457, 1070], "ne": [588, 613, 1204], "ne_miss": [614, 1205], "neg": 615, "nest": 344, "new": 1, "new_from_index": 1206, "next_batch": 132, "nodataerror": 103, "normal": [696, 1277, 1363], "norowsreturnederror": 104, "not_": [616, 1207], "nth": 801, "null": 79, "null_count": [260, 617, 887, 1208], "nullif": 1360, "numer": [344, 836, 1344], "object": 80, "octet_length": 1363, "od": 843, "offset": 1356, "offset_bi": [458, 1071], "ones": 802, "oper": [836, 951, 1344, 1369, 1370], "option": 192, "or_": 618, "order": 1356, "ordinal_dai": [459, 1072], "other": 344, "outofboundserror": 105, "output": 843, "output_nam": 589, "over": 619, "pad_end": [697, 1278], "pad_start": [698, 1279], "panic": 345, "panicexcept": 106, "parallel": 841, "parametercollisionerror": 107, "parametr": [165, 166, 167, 168, 169, 170, 171, 172, 173, 1371], "parquet": 843, "partition_bi": 261, "pct_chang": [620, 1209], "peak_max": [621, 1210], "peak_min": [622, 1211], "performancewarn": 108, "pi": 1362, "pipe": [262, 623, 888], "pivot": 263, "plot": [342, 1345], "plugin": [133, 135, 949], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1371], "polarserror": 109, "polarsinefficientmapwarn": 110, "polarswarn": 111, "pop": 590, "pow": [624, 1212, 1362], "prefix": 605, "prefix_field": 606, "product": [264, 625, 1213], "profil": [889, 1371], "provid": 1, "pyarrow": 843, "python": [842, 1368], "qcut": [626, 1214], "quantil": [265, 331, 627, 803, 890, 934, 1215], "quantile_cont": 1357, "quantile_disc": 1357, "quarter": [460, 1073], "queri": 1368, "radian": [628, 1365], "random": 841, "rank": [629, 1216], "read_avro": 136, "read_clipboard": 137, "read_csv": 138, "read_csv_batch": 139, "read_databas": 140, "read_database_uri": 141, "read_delta": 142, "read_excel": 143, "read_ipc": 144, "read_ipc_schema": 145, "read_ipc_stream": 146, "read_json": 147, "read_ndjson": 148, "read_od": 149, "read_parquet": 150, "read_parquet_schema": 151, "rechunk": [266, 630, 1217], "reduc": 804, "refer": 842, "regexp_lik": 1363, "regist": 1351, "register_dataframe_namespac": 52, "register_expr_namespac": 53, "register_glob": 1352, "register_io_sourc": 133, "register_lazyframe_namespac": 54, "register_mani": 1353, "register_plugin_funct": 135, "register_series_namespac": 55, "registr": 1, "reinterpret": [396, 631, 1001, 1218], "remov": [267, 891], "renam": [268, 892, 1219], "rename_field": [726, 1308], "repeat": 805, "repeat_bi": 632, "replac": [461, 633, 699, 1074, 1220, 1280, 1363], "replace_al": [700, 1281], "replace_column": 269, "replace_mani": [701, 1282], "replace_strict": [634, 1221], "replace_time_zon": [462, 1075], "reshap": [635, 1222], "restore_default": 4, "revers": [270, 382, 556, 636, 702, 893, 988, 1172, 1223, 1283, 1363], "right": 1363, "rle": [637, 1224], "rle_id": [638, 1225], "roll": [271, 639, 894], "rolling_corr": 806, "rolling_cov": 807, "rolling_map": [640, 1226], "rolling_max": [641, 1227], "rolling_max_bi": 642, "rolling_mean": [643, 1228], "rolling_mean_bi": 644, "rolling_median": [645, 1229], "rolling_median_bi": 646, "rolling_min": [647, 1230], "rolling_min_bi": 648, "rolling_quantil": [649, 1231], "rolling_quantile_bi": 650, "rolling_skew": [651, 1232], "rolling_std": [652, 1233], "rolling_std_bi": 653, "rolling_sum": [654, 1234], "rolling_sum_bi": 655, "rolling_var": [656, 1235], "rolling_var_bi": 657, "root_nam": 591, "round": [463, 658, 1076, 1236, 1362], "round_sig_fig": [659, 1237], "row": [272, 273], "rows_by_kei": 274, "rowserror": 112, "rtrim": 1363, "sampl": [275, 557, 660, 1173, 1238], "save": [5, 192], "save_to_fil": 6, "scan_csv": 152, "scan_delta": 153, "scan_iceberg": 154, "scan_ipc": 155, "scan_ndjson": 156, "scan_parquet": 157, "scan_pyarrow_dataset": 158, "scan_tabl": 182, "scatter": 1239, "schema": [276, 895, 950, 1309], "schemaerror": 115, "schemafieldnotfounderror": 116, "search_sort": [661, 1240], "second": [464, 1077], "select": [277, 341, 808, 834, 896, 947, 1343, 1356], "select_seq": [278, 897], "selector": 951, "seri": [172, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1340], "serial": [279, 340, 592, 898, 946], "set": [951, 1241, 1369], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [558, 1174], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [559, 1175], "set_profil": 173, "set_random_se": 159, "set_sort": [280, 662, 899, 1242], "set_streaming_chunk_s": 14, "set_symmetric_differ": [560, 1176], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [561, 1177], "set_verbos": 29, "shape": [281, 1243], "shapeerror": 117, "shift": [282, 383, 562, 663, 900, 989, 1178, 1244], "show": 1370, "show_graph": [593, 901], "show_vers": 160, "shrink_dtyp": [664, 1245], "shrink_to_fit": [283, 1246], "shuffl": [665, 1247], "sign": [666, 1248, 1362], "sin": [667, 1249, 1365], "sind": 1365, "sinh": [668, 1250], "sink_csv": 46, "sink_ipc": 47, "sink_ndjson": 48, "sink_parquet": 49, "size": [397, 1002], "skew": [669, 1251], "slice": [284, 563, 670, 703, 902, 1179, 1252, 1284], "sort": [285, 384, 564, 671, 903, 990, 1180, 1253], "sort_bi": 672, "split": [704, 1285], "split_exact": [705, 1286], "splitn": [706, 1287], "sql": [286, 809, 904, 1356, 1361, 1367, 1368], "sql_expr": 810, "sqlcontext": [1349, 1350, 1351, 1352, 1353, 1354, 1355, 1368], "sqlinterfaceerror": 113, "sqlsyntaxerror": 114, "sqrt": [673, 1254, 1362], "starts_with": [398, 415, 707, 1003, 1020, 1288, 1363], "state": [30, 192], "std": [287, 385, 565, 674, 811, 905, 991, 1181, 1255], "stddev": 1357, "str": [675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304], "strategi": 1371, "strftime": [465, 1078, 1364], "string": [81, 344, 837, 1346, 1363], "stringcach": [50, 841], "stringcachemismatcherror": 118, "strip_char": [708, 1289], "strip_chars_end": [709, 1290], "strip_chars_start": [710, 1291], "strip_prefix": [711, 1292], "strip_suffix": [712, 1293], "strpo": 1363, "strptime": [713, 1294, 1363], "struct": [82, 724, 725, 726, 727, 728, 812, 838, 1305, 1306, 1307, 1308, 1309, 1310, 1347], "structfieldnotfounderror": 119, "style": 343, "sub": 729, "substr": 1363, "suffix": 607, "suffix_field": 608, "sum": [288, 332, 386, 566, 730, 813, 906, 935, 992, 1182, 1311, 1357], "sum_horizont": [289, 814], "tabl": [1354, 1370], "tableinfo": [187, 188], "tabletyp": 189, "tail": [290, 333, 567, 714, 731, 815, 907, 936, 1183, 1295, 1312], "tan": [732, 1313, 1365], "tand": 1365, "tanh": [733, 1314], "tempor": [344, 839, 1348, 1364], "test": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 1371], "thread_pool_s": 174, "threadpool_s": 175, "time": [83, 466, 816, 1079], "time_rang": [817, 818], "timestamp": [467, 1080, 1363], "to_arrai": [568, 1184], "to_arrow": [291, 1315], "to_dat": [715, 1296], "to_datetim": [716, 1297], "to_decim": [717, 1298], "to_dict": [292, 293], "to_dummi": [294, 1316], "to_fram": 1317, "to_init_repr": [295, 1318], "to_integ": [718, 1299], "to_jax": [296, 1319], "to_list": [387, 993, 1320], "to_loc": 1021, "to_lowercas": [609, 719, 1300], "to_numpi": [297, 1321], "to_panda": [298, 1322], "to_phys": [734, 1323], "to_seri": 299, "to_str": [468, 1081], "to_struct": [300, 388, 569, 994, 1185], "to_tim": [720, 1301], "to_titlecas": [721, 1302], "to_torch": [301, 1324], "to_uppercas": [610, 722, 1303], "toomanyrowsreturnederror": 120, "top_k": [302, 735, 908, 1325], "top_k_bi": 736, "total_dai": [469, 1082], "total_hour": [470, 1083], "total_microsecond": [471, 1084], "total_millisecond": [472, 1085], "total_minut": [473, 1086], "total_nanosecond": [474, 1087], "total_second": [475, 1088], "transpos": 303, "tree_format": 594, "trigonometri": 1365, "truediv": 737, "truncat": [476, 1089, 1370], "try_cast": 1366, "type": [344, 1366], "uint16": 84, "uint32": 85, "uint64": 86, "uint8": 87, "undo_alias": 595, "union": 1369, "uniqu": [304, 389, 570, 738, 909, 995, 1186, 1326], "unique_count": [739, 1327], "uniti": [183, 184, 185, 186, 187, 188, 189, 191], "unknown": 88, "unnest": [305, 727, 910, 1310, 1358, 1370], "unpivot": [306, 911], "unregist": 1355, "unstablewarn": 121, "unstack": 307, "unsuitablesqlerror": 122, "updat": [308, 912], "upper": 1363, "upper_bound": [740, 1328], "upsampl": 309, "us": 192, "uses_lexical_ord": 1022, "using_string_cach": 176, "utf8": 89, "value_count": [741, 1329], "var": [310, 390, 571, 742, 819, 913, 996, 1187, 1330], "varianc": 1357, "vstack": 311, "warn": 345, "week": [477, 1090], "weekdai": [478, 1091], "when": 820, "where": [743, 1356], "width": [312, 914], "window": 840, "with_column": [313, 915], "with_columns_seq": [314, 916], "with_context": 917, "with_field": 728, "with_row_count": [315, 918], "with_row_index": [316, 919], "with_time_unit": [479, 1092], "write_avro": 35, "write_clipboard": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 596], "write_ndjson": 44, "write_parquet": 45, "xor": 744, "year": [480, 1093], "zero": 821, "zfill": [723, 1304], "zip_with": 1331}})